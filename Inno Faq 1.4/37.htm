<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=windows-1251"><title>Нативный пример Inno Callback</title><link rel="stylesheet" type="text/css" href="css.css"><script type="text/javascript" src="includer.js"></script><script language='jscript' type='text/javascript' src='copycode.js'></script></head><body><div id="heading"><h1>» Inno Setup Faq. Нативный пример Inno Callback</h1></div><br><script language="javascript" type="text/javascript">includeSyntax('delphi');</script><code id="delphi_Tc4NTM"> <input type="button" value="Копировать в буфер обмена" onClick="copyToClipboard( taCode1, theCode1 );"> <blockquote id="theCode1"><font>[Setup]<br>AppName=My Application<br>AppVerName=My Application Ver 1.5<br>DefaultDirName={pf}\My Application<br>SolidCompression=yes<br>Compression=lzma/ultra<br><br>[Code]<br><br>type<br>TTimerProc=procedure(h:longword; msg:longword; idevent:longword; dwTime:longword);<br><br>function SetTimer(hWnd: longword; nIDEvent, uElapse: longword; lpTimerFunc: longword): longword;<br>&nbsp; external 'SetTimer@user32.dll stdcall';<br><br>///used for timerproc access<br>function wsprintf( a:ansistring; b:ansistring; c:TTimerProc ): longword;<br>&nbsp; external 'wsprintfA@user32.dll cdecl';<br><br>///used for copying of generated code from string to allocated memory<br>function memcpy( a:longword; c:ansistring; l:longword ): longword;<br>&nbsp; external 'memcpy@msvcrt.dll cdecl';<br><br>///required memory allocation with executable permissions<br>function VirtualAlloc( a:longword; b:longword; c:longword; d:longword ): longword;<br>&nbsp; external 'VirtualAlloc@kernel32.dll stdcall';<br><br>///function VirtualFree( a:longword; b:longword; c:longword ): longword;<br>///&nbsp; external 'VirtualFree@kernel32.dll stdcall';<br><br>function sh_wrap( u: TTimerProc ): longword;<br>var<br>&nbsp; x,y,cb: longword;<br>&nbsp; s: ansistring;<br>begin<br><br>SetLength( s, 256 );<br>wsprintf( s, '%i %i;', u );<br><br>///fetch 1st pointer dword<br>x := StrToInt( Copy(s,1,Pos(' ',s)-1) );<br><br>///fetch 2nd pointer dword<br>Delete( s, 1, Pos(' ',s) );<br>y := StrToInt( Copy(s,1,Pos(';',s)-1) );<br><br>///x86 code for callback function with 4 args<br>s := chr(85)+chr(139)+chr(236)+chr(104)+chr(x)+chr(x shr 8)+chr(x shr 16)+chr(x shr 24)+chr(139)+chr(85)+chr(8)+chr(139)+chr(77)+chr(12)+chr(255)+chr(181)+chr(16)+chr(0)+chr(0)+chr(0)+chr(255)+chr(181)+chr(20)+chr(0)+chr(0)+chr(0)+chr(184)+chr(y)+chr(y shr 8)+chr(y shr 16)+chr(y shr 24)+chr(255)+chr(85)+chr(252)+chr(90)+chr(93)+chr(194)+chr(16)+chr(0);<br>///SaveStringToFile( 'z:\tmp1', s, false );<br><br>///allocate executable&nbsp; memory<br>cb := VirtualAlloc( 0, $2000, $1000, $40 );<br>///copy the generated code<br>memcpy( cb, s, Length(s) );<br><br>result := cb;<br>end;<br><br>procedure mytimerproc1(h:longword; msg:longword; idevent:longword; dwTime:longword);<br>begin<br>&nbsp; WizardForm.WelcomePage.Color:=random($FFFFFF);<br>&nbsp; WizardForm.WelcomeLabel2.Font.Color:=random($FFFFFF);<br>end;<br><br>procedure mytimerproc2(h:longword; msg:longword; idevent:longword; dwTime:longword);<br>begin<br>&nbsp; WizardForm.WelcomeLabel1.Font.Color:=random($FFFFFF);<br>&nbsp; WizardForm.Color:=random($FFFFFF);<br>end;<br><br>procedure InitializeWizard();<br>begin<br>&nbsp; settimer(0,0,1000,sh_wrap(@mytimerproc1));<br>&nbsp; settimer(0,0,700,sh_wrap(@mytimerproc2));<br>end;</font></blockquote><textarea id="taCode1" style="display:none;" rows="1" cols="5"></textarea><textarea id='taCode' style='display:none;' rows='1' cols='20'></textarea></code><script language="javascript" type="text/javascript">highlightSyntax('delphi_Tc4NTM','delphi');</script><br><div id="heading"><h1><font size="1" face="Consolas">Copyright (c) <a href="http://www.krinkels.org/" target="_blank">Krinkels Inc</a></font></h1></div></body></html>