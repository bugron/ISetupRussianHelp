<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><title>Текстурирование кнопок через botva2.dll</title><link rel="stylesheet" type="text/css" href="css.css"><script type="text/javascript" src="includer.js"></script><script language='jscript' type='text/javascript' src='copycode.js'></script></head><body><div id="heading"><h1>» Inno Setup Faq. Текстурирование кнопок через botva2.dll</h1></div><br><script language="javascript" type="text/javascript">includeSyntax('delphi');</script><code id="delphi_Tc4NTM">
<input type="button" value="Копировать в буфер обмена" onClick="copyToClipboard( taCode1, theCode1 );">
<blockquote id="theCode1"><font>[Setup]<br>AppName=MyApp<br>AppVerName=MyApp<br>DefaultDirName={pf}\MyApp<br><br>[Files]<br>Source: botva2.dll; DestDir: {tmp}; Flags: dontcopy<br>Source: compiler:innocallback.dll; DestDir: {tmp}; Flags: dontcopy<br>Source: Button.png; DestDir: {tmp}; Flags: dontcopy<br><br>[Code]<br>type<br>TButtonInfo = record ButtonName: array of TButton; Handle: array of HWND; Count: Integer; end;<br>TBtnEventProc = procedure(h:HWND);<br><br>const<br>BtnClickEventID = 1;<br>BtnMouseEnterEventID = 2;<br>BtnMouseLeaveEventID = 3;<br>BtnMouseMoveEventID = 4;<br><br>balLeft = 0;<br>balCenter = 1;<br><br>var<br>ButtonsBuff: TButtonInfo;<br>HCancelButton, HNextButton, HBackButton, HDirBrowseButton, HGroupBrowseButton: HWND;<br><br>function WrapBtnCallback(Callback: TBtnEventProc; ParamCount: Integer): Longword; external 'wrapcallback@files:innocallback.dll stdcall';<br>function BtnCreate(hParent:HWND; Left,Top,Width,Height:integer; FileName:PAnsiChar; ShadowWidth:integer; IsCheckBtn:boolean):HWND; external 'BtnCreate@{tmp}\botva2.dll stdcall delayload';<br>procedure BtnSetPosition(h:HWND; NewLeft, NewTop, NewWidth, NewHeight: integer); external 'BtnSetPosition@files:botva2.dll stdcall';<br>procedure BtnRefresh(h:HWND); external 'BtnRefresh@files:botva2.dll stdcall';<br>function BtnGetChecked(h:HWND):boolean; external 'BtnGetChecked@files:botva2.dll stdcall';<br>procedure BtnSetChecked(h:HWND; Value:boolean); external 'BtnSetChecked@files:botva2.dll stdcall';<br>procedure BtnSetText(h:HWND; Text:PAnsiChar); external 'BtnSetText@{tmp}\botva2.dll stdcall delayload';<br>procedure BtnSetTextAlignment(h:HWND; HorIndent, VertIndent:integer; Alignment:DWORD); external 'BtnSetTextAlignment@files:botva2.dll stdcall';<br>procedure BtnSetVisibility(h:HWND; Value:boolean); external 'BtnSetVisibility@files:botva2.dll stdcall';<br>function BtnGetEnabled(h:HWND):boolean; external 'BtnGetEnabled@files:botva2.dll stdcall';<br>procedure BtnSetEnabled(h:HWND; Value:boolean); external 'BtnSetEnabled@{tmp}\botva2.dll stdcall delayload';<br>procedure BtnSetFont(h:HWND; Font:Cardinal); external 'BtnSetFont@{tmp}\botva2.dll stdcall delayload';<br>procedure BtnSetFontColor(h:HWND; NormalFontColor, FocusedFontColor, PressedFontColor, DisabledFontColor: Cardinal); external 'BtnSetFontColor@{tmp}\botva2.dll stdcall delayload';<br>procedure BtnSetEvent(h:HWND; EventID:integer; Event:Longword); external 'BtnSetEvent@files:botva2.dll stdcall';<br>procedure BtnSetCursor(h:HWND; hCur:Cardinal); external 'BtnSetCursor@files:botva2.dll stdcall';<br>function GetSysCursorHandle(id:integer):Cardinal; external 'GetSysCursorHandle@files:botva2.dll stdcall';<br>procedure gdipShutdown; external 'gdipShutdown@files:botva2.dll stdcall';<br><br>procedure UpdateButtons();<br>var I: integer;<br>begin<br>for I:=0 to (ButtonsBuff.Count-1) do begin<br>BtnSetEnabled(ButtonsBuff.Handle[I], ButtonsBuff.ButtonName[I].Enabled)<br>BtnSetVisibility(ButtonsBuff.Handle[I], ButtonsBuff.ButtonName[I].Visible)<br>BtnSetText(ButtonsBuff.Handle[I], ButtonsBuff.ButtonName[I].Caption)<br>BtnRefresh(ButtonsBuff.Handle[I])<br>end;<br>end;<br><br>procedure ButtonOnClick(hBtn: HWND);<br>var Btn: TButton; I: Integer;<br>begin<br>for I:=0 to (ButtonsBuff.Count-1) do begin<br>if hBtn = ButtonsBuff.Handle[I] then Btn:= ButtonsBuff.ButtonName[I];<br>end;<br>Btn.OnClick(Btn)<br>UpdateButtons;<br>end;<br><br>function EffectTextureButton(Handle: HWND; Button: TButton; ImageName: PAnsiChar; ShadowWidth: Integer; EnterEvent, MoveEvent, LeaveEvent: TbtnEventProc): HWND;<br>begin<br>Result:=BtnCreate(Handle, Button.Left-8, Button.Top-8, Button.Width+16, Button.Height+16, ImageName, ShadowWidth, False) ///Размеры подобраны для текущей текстуры<br>BtnSetEvent(Result, BtnClickEventID, WrapBtnCallback(@ButtonOnClick, 1))<br>if EnterEvent &lt;&gt; nil then BtnSetEvent(Result, BtnMouseEnterEventID, WrapBtnCallback(EnterEvent, 1));<br>if MoveEvent &lt;&gt; nil then BtnSetEvent(Result, BtnMouseMoveEventID, WrapBtnCallback(MoveEvent, 1));<br>if LeaveEvent &lt;&gt; nil then BtnSetEvent(Result, BtnMouseLeaveEventID, WrapBtnCallback(LeaveEvent, 1));<br>BtnSetFont(Result, Button.Font.Handle)<br>BtnSetText(Result, Button.Caption);<br>BtnSetVisibility(Result, Button.Visible);<br>BtnSetFontColor(Result,clBlack,clBlack,clBlack,clGray);<br>BtnSetCursor(Result,GetSysCursorHandle(32649));<br>Button.Width:=0; Button.Height:= 0;<br>SetArrayLength(ButtonsBuff.Handle, ButtonsBuff.Count+1);SetArrayLength(ButtonsBuff.ButtonName, ButtonsBuff.Count+1);<br>ButtonsBuff.ButtonName[ButtonsBuff.Count]:= Button; ButtonsBuff.Handle[ButtonsBuff.Count]:= Result;<br>ButtonsBuff.Count:= ButtonsBuff.Count+1;<br>end;<br><br>procedure ButtonChangeFont(ButtonHandle: HWND; Font: TFont; NormalColor, FocusedColor, PressedColor, DisabledColor: Cardinal);<br>begin<br>if Font &lt;&gt; nil then BtnSetFont(ButtonHandle, Font.Handle);<br>BtnSetFontColor(ButtonHandle, NormalColor, FocusedColor, PressedColor, DisabledColor)<br>end;<br><br>procedure InitializeWizard();<br>begin<br>ExtractTemporaryFile('Button.png')<br>HNextButton:= EffectTextureButton(WizardForm.Handle, WizardForm.NextButton, ExpandConstant('{tmp}\Button.png'), 18, nil, nil, nil)<br>HCancelButton:= EffectTextureButton(WizardForm.Handle, WizardForm.CancelButton, ExpandConstant('{tmp}\Button.png'), 18, nil, nil, nil)<br>HBackButton:= EffectTextureButton(WizardForm.Handle, WizardForm.BackButton, ExpandConstant('{tmp}\Button.png'), 18, nil, nil, nil)<br>HDirBrowseButton:= EffectTextureButton(WizardForm.Handle, WizardForm.DirBrowseButton, ExpandConstant('{tmp}\Button.png'), 18, nil, nil, nil)<br>HGroupBrowseButton:= EffectTextureButton(WizardForm.Handle, WizardForm.GroupBrowseButton, ExpandConstant('{tmp}\Button.png'), 18, nil, nil, nil)<br>end;<br><br>procedure CurPageChanged(CurPageId: Integer);<br>begin<br>UpdateButtons<br>end;<br><br>procedure DeinitializeSetup();<br>begin<br>gdipShutdown<br>end;</font></blockquote><textarea id="taCode1" style="display:none;" rows="1" cols="5"></textarea><textarea id='taCode' style='display:none;' rows='1' cols='20'></textarea></code><script language="javascript" type="text/javascript">highlightSyntax('delphi_Tc4NTM','delphi');</script><br><div id="heading"><h1><font size="1" face="Consolas">Copyright (c) <a href="http://www.krinkels.org/" target="_blank">Krinkels Inc</a></font></h1></div></body></html>