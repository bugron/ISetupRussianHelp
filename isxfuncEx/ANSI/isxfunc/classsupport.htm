<html xmlns=http://www.w3.org/1999/xhtml xml:lang=en lang=en><head><meta http-equiv=Content-Type content="text/html; charset=windows-1251" /><meta http-equiv=X-UA-Compatible content=IE=8 /><title>Список поддерживаемых классов</title><link rel=stylesheet type=text/css href=../../../styles.css /><script type="text/javascript" src="../../../topic.js"></script> <script type="text/javascript" src="../../../Inno%20Faq%201.4/core.js"></script> <script type="text/javascript" src="../../../Inno%20Faq%201.4/delphi.js"></script> <script type="text/javascript" src="../../../Inno%20Faq%201.4/includer.js"></script></head><body><h1 class=topicheading>Список поддерживаемых классов&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br /></h1><div class=topicbody>&nbsp; Ниже приведен список поддерживаемых классов, которые могут использоваться в <br /> &nbsp; скриптах. Есть также три доступных вспомогательных объектов: MainForm типа<br /> &nbsp; TMainForm, WizardForm типа TWizardForm и UninstallProgressForm типа<br /> &nbsp; TUninstallProgressForm и одна специальная константа: crHand типа<br /> &nbsp; TControl.Cursor.<br /> &nbsp; Примечание: MainForm видна только если WindowVisible=yes.<br /> &nbsp; Примечание: Для получения подробной информации о визуальных компонентах<br /> &nbsp;&nbsp; (VCL) перейдите по ссылке: <a href=http://docs.embarcadero.com/products/rad_studio/>Embarcadero Technologies</a>.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br /> <script language="javascript" type="text/javascript">includeSyntax('delphi');</script><code id=delphi_Tc4NTM><br /> Type<br /> &nbsp; AnsiString = String;<br /> <br /> &nbsp; TObject = class<br /> &nbsp;&nbsp;&nbsp; constructor Create;<br /> &nbsp;&nbsp;&nbsp; procedure Free;<br /> &nbsp; end;<br /> <br /> &nbsp; TBits = class(TObject)<br /> &nbsp;&nbsp;&nbsp; function OpenBit: Integer;<br /> &nbsp;&nbsp;&nbsp; property Bits[Index: Integer]: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Size: Integer; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TPersistent = class(TObject)<br /> &nbsp;&nbsp;&nbsp; procedure Assign(Source: TPersistent);<br /> &nbsp; end;<br /> <br /> &nbsp; TStream = class(TObject)<br /> &nbsp;&nbsp;&nbsp; function Read(Buffer: String; Count: Longint): Longint;<br /> &nbsp;&nbsp;&nbsp; function Write(Buffer: String; Count: Longint): Longint;<br /> &nbsp;&nbsp;&nbsp; function Seek(Offset: Longint; Origin: Word): Longint;<br /> &nbsp;&nbsp;&nbsp; procedure ReadBuffer(Buffer: String; Count: Longint);<br /> &nbsp;&nbsp;&nbsp; procedure WriteBuffer(Buffer: String; Count: Longint);<br /> &nbsp;&nbsp;&nbsp; function CopyFrom(Source: TStream; Count: Longint): Longint;<br /> &nbsp;&nbsp;&nbsp; property Position: Longint; read write;<br /> &nbsp;&nbsp;&nbsp; property Size: Longint; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TParser = class(TObject)<br /> &nbsp;&nbsp;&nbsp; constructor Create(Stream: TStream);<br /> &nbsp;&nbsp;&nbsp; procedure CheckToken(T: Char);<br /> &nbsp;&nbsp;&nbsp; procedure CheckTokenSymbol(S: String);<br /> &nbsp;&nbsp;&nbsp; procedure Error(Ident: Integer);<br /> &nbsp;&nbsp;&nbsp; procedure ErrorStr(Message: String);<br /> &nbsp;&nbsp;&nbsp; procedure HexToBinary(Stream: TStream);<br /> &nbsp;&nbsp;&nbsp; function NextToken: Char;<br /> &nbsp;&nbsp;&nbsp; function SourcePos: Longint;<br /> &nbsp;&nbsp;&nbsp; function TokenComponentIdent: String;<br /> &nbsp;&nbsp;&nbsp; function TokenFloat: Extended;<br /> &nbsp;&nbsp;&nbsp; function TokenInt: Longint;<br /> &nbsp;&nbsp;&nbsp; function TokenString: String;<br /> &nbsp;&nbsp;&nbsp; function TokenSymbolIs(S: String): Boolean;<br /> &nbsp;&nbsp;&nbsp; property SourceLine: Integer; read;<br /> &nbsp;&nbsp;&nbsp; property Token: Char; read;<br /> &nbsp; end;<br /> <br /> &nbsp; TCollectionItem = class(TPersistent)<br /> &nbsp;&nbsp;&nbsp; constructor Create(Collection: TCollection);<br /> &nbsp;&nbsp;&nbsp; property Collection: TCollection; read write;<br /> &nbsp;&nbsp;&nbsp; property Index: Integer; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TCollection = class(TPersistent)<br /> &nbsp;&nbsp;&nbsp; function Add: TCollectionItem;<br /> &nbsp;&nbsp;&nbsp; procedure BeginUpdate;<br /> &nbsp;&nbsp;&nbsp; procedure Clear;<br /> &nbsp;&nbsp;&nbsp; procedure EndUpdate;<br /> &nbsp;&nbsp;&nbsp; property Count: Integer; read;<br /> &nbsp;&nbsp;&nbsp; property Items[Index: Integer]: TCollectionItem; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; HMENU = Cardinal;<br /> <br /> &nbsp; HAccel = Cardinal;<br /> <br /> &nbsp; Exception = class(TObject)<br /> &nbsp; end;<br /> <br /> &nbsp; EMenuError = class(Exception)<br /> &nbsp; end;<br /> <br /> &nbsp; TMenuBreak = (mbNone, mbBreak, mbBarBreak);<br /> <br /> &nbsp; TShortCut = Word;<br /> <br /> &nbsp; TMenuItem = class(TComponent)<br /> &nbsp;&nbsp;&nbsp; constructor Create(AOwner: TComponent);<br /> &nbsp;&nbsp;&nbsp; procedure Insert(Index: Integer; Item: TMenuItem);<br /> &nbsp;&nbsp;&nbsp; procedure Delete(Index: Integer);<br /> &nbsp;&nbsp;&nbsp; procedure Click;<br /> &nbsp;&nbsp;&nbsp; function IndexOf(Item: TMenuItem): Integer;<br /> &nbsp;&nbsp;&nbsp; function GetParentComponent: TComponent;<br /> &nbsp;&nbsp;&nbsp; function HasParent: Boolean;<br /> &nbsp;&nbsp;&nbsp; procedure Add(Item: TMenuItem);<br /> &nbsp;&nbsp;&nbsp; procedure Remove(Item: TMenuItem);<br /> &nbsp;&nbsp;&nbsp; property Command: Word; read;<br /> &nbsp;&nbsp;&nbsp; property Handle: HMENU; read;<br /> &nbsp;&nbsp;&nbsp; property Count: Integer; read;<br /> &nbsp;&nbsp;&nbsp; property Items[Index: Integer]: TMenuItem; read;<br /> &nbsp;&nbsp;&nbsp; property MenuIndex: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property Parent: TMenuItem; read;<br /> &nbsp;&nbsp;&nbsp; property Caption: String; read write;<br /> &nbsp;&nbsp;&nbsp; property Checked: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Default: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Enabled: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property GroupIndex: Byte; read write;<br /> &nbsp;&nbsp;&nbsp; property HelpContext: THelpContext; read write;<br /> &nbsp;&nbsp;&nbsp; property Hint: String; read write;<br /> &nbsp;&nbsp;&nbsp; property RadioItem: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property ShortCut: TShortCut; read write;<br /> &nbsp;&nbsp;&nbsp; property Visible: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property OnClick: TNotifyEvent; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TMenuChangeEvent = procedure (Sender: TObject; Source: TMenuItem; Rebuild: Boolean);<br /> <br /> &nbsp; TFindItemKind = (fkCommand, fkHandle, fkShortCut);<br /> <br /> &nbsp; TMenu = class(TComponent)<br /> &nbsp;&nbsp;&nbsp; constructor Create(AOwner: TComponent);<br /> &nbsp;&nbsp;&nbsp; function DispatchCommand(ACommand: Word): Boolean;<br /> &nbsp;&nbsp;&nbsp; function DispatchPopup(AHandle: HMENU): Boolean;<br /> &nbsp;&nbsp;&nbsp; function FindItem(Value: Integer; Kind: TFindItemKind): TMenuItem;<br /> &nbsp;&nbsp;&nbsp; function GetHelpContext(Value: Integer; ByCommand: Boolean): THelpContext;<br /> &nbsp;&nbsp;&nbsp; property Handle: HMENU; read;<br /> &nbsp;&nbsp;&nbsp; property WindowHandle: HWnd; read write;<br /> &nbsp;&nbsp;&nbsp; property Items: TMenuItem; read;<br /> &nbsp; end;<br /> <br /> &nbsp; TMainMenu = class(TMenu)<br /> &nbsp;&nbsp;&nbsp; procedure Merge(Menu: TMainMenu);<br /> &nbsp;&nbsp;&nbsp; procedure Unmerge(Menu: TMainMenu);<br /> &nbsp;&nbsp;&nbsp; procedure PopulateOle2Menu(SharedMenu: HMENU; Groups: TArrayOfInteger; var Widths: TArrayOfInteger);<br /> &nbsp;&nbsp;&nbsp; procedure GetOle2AcceleratorTable(var AccelTable: HAccel; var AccelCount: Integer; Groups: TArrayOfInteger);<br /> &nbsp;&nbsp;&nbsp; procedure SetOle2MenuHandle(Handle: HMENU);<br /> &nbsp;&nbsp;&nbsp; property AutoMerge: Boolean; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TPopupAlignment = (paLeft, paRight, paCenter);<br /> <br /> &nbsp; TPopupMenu = class(TMenu)<br /> &nbsp;&nbsp;&nbsp; constructor Create(AOwner: TComponent);<br /> &nbsp;&nbsp;&nbsp; procedure Popup(X, Y: Integer);<br /> &nbsp;&nbsp;&nbsp; property PopupComponent: TComponent; read write;<br /> &nbsp;&nbsp;&nbsp; property Alignment: TPopupAlignment; read write;<br /> &nbsp;&nbsp;&nbsp; property AutoPopup: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property HelpContext: THelpContext; read write;<br /> &nbsp;&nbsp;&nbsp; property OnPopup: TNotifyEvent; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TComponentStateE = (csLoading, csReading, csWriting, csDestroying, csDesigning, csAncestor, csUpdating, csFixups, csFreeNotification, csInline, csDesignInstance);<br /> <br /> &nbsp; TComponentState = set of TComponentStateE;<br /> &nbsp; <br /> &nbsp; TComponent = class(TPersistent)<br /> &nbsp;&nbsp;&nbsp; function FindComponent(AName: String): TComponent;<br /> &nbsp;&nbsp;&nbsp; constructor Create(AOwner: TComponent);<br /> &nbsp;&nbsp;&nbsp; property Owner: TComponent; read write;<br /> &nbsp;&nbsp;&nbsp; property Components[Index: Integer]: TComponent; read;<br /> &nbsp;&nbsp;&nbsp; property ComponentCount: Integer; read;<br /> &nbsp;&nbsp;&nbsp; property ComponentIndex: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property ComponentState: Byte; read;<br /> &nbsp;&nbsp;&nbsp; property Name: String; read write;<br /> &nbsp;&nbsp;&nbsp; property Tag: Longint; read write;<br /> &nbsp;&nbsp;&nbsp; procedure DestroyComponents;<br /> &nbsp;&nbsp;&nbsp; procedure Destroying;<br /> &nbsp;&nbsp;&nbsp; procedure FreeNotification(AComponent: TComponent);<br /> &nbsp;&nbsp;&nbsp; procedure InsertComponent(AComponent: TComponent);<br /> &nbsp;&nbsp;&nbsp; procedure RemoveComponent(AComponent: TComponent);<br /> &nbsp;&nbsp;&nbsp; property DesignInfo: Longint; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TTimer = class(TComponent)<br /> &nbsp;&nbsp;&nbsp; property Enabled: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Interval: Cardinal; read write;<br /> &nbsp;&nbsp;&nbsp; property OnTimer: TNotifyEvent; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TStrings = class(TPersistent)<br /> &nbsp;&nbsp;&nbsp; function Add(S: String): Integer;<br /> &nbsp;&nbsp;&nbsp; procedure Append(S: String);<br /> &nbsp;&nbsp;&nbsp; procedure AddStrings(Strings: TStrings);<br /> &nbsp;&nbsp;&nbsp; procedure Clear;<br /> &nbsp;&nbsp;&nbsp; procedure Delete(Index: Integer);<br /> &nbsp;&nbsp;&nbsp; function IndexOf(const S: String): Integer;<br /> &nbsp;&nbsp;&nbsp; procedure Insert(Index: Integer; S: String);<br /> &nbsp;&nbsp;&nbsp; property Count: Integer; read;<br /> &nbsp;&nbsp;&nbsp; property Text: String; read write;<br /> &nbsp;&nbsp;&nbsp; property CommaText: String; read write;<br /> &nbsp;&nbsp;&nbsp; procedure LoadFromFile(FileName: String);<br /> &nbsp;&nbsp;&nbsp; procedure SaveToFile(FileName: String);<br /> &nbsp;&nbsp;&nbsp; property Strings[Index: Integer]: String; read write;<br /> &nbsp;&nbsp;&nbsp; property Objects[Index: Integer]: TObject; read write;<br /> &nbsp;&nbsp;&nbsp; procedure BeginUpdate;<br /> &nbsp;&nbsp;&nbsp; procedure EndUpdate;<br /> &nbsp;&nbsp;&nbsp; function Equals(Strings: TStrings): Boolean;<br /> &nbsp;&nbsp;&nbsp; procedure Exchange(Index1, Index2: Integer);<br /> &nbsp;&nbsp;&nbsp; function IndexOfName(Name: String): Integer;<br /> &nbsp;&nbsp;&nbsp; procedure LoadFromStream(Stream: TStream);<br /> &nbsp;&nbsp;&nbsp; procedure Move(CurIndex, NewIndex: Integer);<br /> &nbsp;&nbsp;&nbsp; procedure SaveToStream(Stream: TStream);<br /> &nbsp;&nbsp;&nbsp; procedure SetText(Text: PChar);<br /> &nbsp;&nbsp;&nbsp; property Names[Index: Integer]: String; read;<br /> &nbsp;&nbsp;&nbsp; property Values[Name: String]: String; read write;<br /> &nbsp;&nbsp;&nbsp; function AddObject(S: String; AObject: TObject): Integer;<br /> &nbsp;&nbsp;&nbsp; function GetText: PChar;<br /> &nbsp;&nbsp;&nbsp; function IndexOfObject(AObject: TObject): Integer;<br /> &nbsp;&nbsp;&nbsp; procedure InsertObject(Index: Integer; S: String; AObject: TObject);<br /> &nbsp; end;<br /> <br /> &nbsp; TAlignment = (taLeftJustify, taRightJustify, taCenter);<br /> <br /> &nbsp; THelpEvent = function (Command: Word; Data: Longint; var CallHelp: Boolean): Boolean;<br /> <br /> &nbsp; TGetStrProc = procedure(const S: String);<br /> <br /> &nbsp; TDuplicates = (dupIgnore, dupAccept, dupError);<br /> <br /> &nbsp; TOperation = (opInsert, opRemove);<br /> <br /> &nbsp; THandle = Longint;<br /> <br /> &nbsp; TNotifyEvent = procedure(Sender: TObject);<br /> <br /> &nbsp; TStringList = class(TStrings)<br /> &nbsp;&nbsp;&nbsp; function Find(S: String; var Index: Integer): Boolean;<br /> &nbsp;&nbsp;&nbsp; procedure Sort;<br /> &nbsp;&nbsp;&nbsp; property Duplicates: TDuplicates; read write;<br /> &nbsp;&nbsp;&nbsp; property Sorted: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property OnChange: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnChanging: TNotifyEvent; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; THandleStream = class(TStream)<br /> &nbsp;&nbsp;&nbsp; constructor Create(AHandle: Integer);<br /> &nbsp;&nbsp;&nbsp; property Handle: Integer; read;<br /> &nbsp; end;<br /> <br /> &nbsp; TFileStream = class(THandleStream)<br /> &nbsp;&nbsp;&nbsp; constructor Create(Filename: String; Mode: Word);<br /> &nbsp; end;<br /> <br /> &nbsp; TCustomMemoryStream = class(TStream)<br /> &nbsp;&nbsp;&nbsp; procedure SaveToStream(Stream: TStream);<br /> &nbsp;&nbsp;&nbsp; procedure SaveToFile(FileName: String);<br /> &nbsp; end;<br /> <br /> &nbsp; TMemoryStream = class(TCustomMemoryStream)<br /> &nbsp;&nbsp;&nbsp; procedure Clear;<br /> &nbsp;&nbsp;&nbsp; procedure LoadFromStream(Stream: TStream);<br /> &nbsp;&nbsp;&nbsp; procedure LoadFromFile(FileName: String);<br /> &nbsp;&nbsp;&nbsp; procedure SetSize(NewSize: Longint);<br /> &nbsp; end;<br /> <br /> &nbsp; TResourceStream = class(TCustomMemoryStream)<br /> &nbsp;&nbsp;&nbsp; constructor Create(Instance: THandle; ResName: String; ResType: Integer);<br /> &nbsp;&nbsp;&nbsp; constructor CreateFromID(Instance: THandle; ResID: Integer; ResType: Integer);<br /> &nbsp; end;<br /> <br /> &nbsp; TGraphicsObject = class(TPersistent)<br /> &nbsp;&nbsp;&nbsp; property OnChange: TNotifyEvent; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TFontStyle = (fsBold, fsItalic, fsUnderline, fsStrikeOut);<br /> <br /> &nbsp; TFontStyles = set of TFontStyle;<br /> <br /> &nbsp; TFontPitch = (fpDefault, fpVariable, fpFixed);<br /> <br /> &nbsp; TFont = class(TGraphicsObject)<br /> &nbsp;&nbsp;&nbsp; constructor Create;<br /> &nbsp;&nbsp;&nbsp; property Handle: Integer; read;<br /> &nbsp;&nbsp;&nbsp; property Color: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property Height: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property Name: String; read write;<br /> &nbsp;&nbsp;&nbsp; property Pitch: Byte; read write;<br /> &nbsp;&nbsp;&nbsp; property Size: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property PixelsPerInch: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property Style: TFontStyles; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TRect = record<br /> &nbsp;&nbsp;&nbsp; Left, Top, Right, Bottom: Integer;<br /> &nbsp; end;<br /> &nbsp; <br /> &nbsp; TPenMode = (pmBlack, pmWhite, pmNop, pmNot, pmCopy, pmNotCopy, pmMergePenNot, pmMaskPenNot, pmMergeNotPen, pmMaskNotPen, pmMerge, pmNotMerge, pmMask, pmNotMask, pmXor, pmNotXor);<br /> <br /> &nbsp; TPenStyle = (psSolid, psDash, psDot, psDashDot, psDashDotDot, psClear, psInsideFrame);<br /> <br /> &nbsp; TPen = class(TGraphicsObject)<br /> &nbsp;&nbsp;&nbsp; constructor Create;<br /> &nbsp;&nbsp;&nbsp; property Color: TColor; read write;<br /> &nbsp;&nbsp;&nbsp; property Mode: TPenMode; read write;<br /> &nbsp;&nbsp;&nbsp; property Style: TPenStyle; read write;<br /> &nbsp;&nbsp;&nbsp; property Width: Integer; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TBrushStyle = (bsSolid, bsClear, bsHorizontal, bsVertical, bsFDiagonal, bsBDiagonal, bsCross, bsDiagCross);<br /> <br /> &nbsp; TColor = integer;<br /> <br /> &nbsp; HBITMAP = Integer;<br /> <br /> &nbsp; HPALETTE = Integer;<br /> <br /> &nbsp; TBrush = class(TGraphicsObject)<br /> &nbsp;&nbsp;&nbsp; constructor Create;<br /> &nbsp;&nbsp;&nbsp; property Color: TColor; read write;<br /> &nbsp;&nbsp;&nbsp; property Style: TBrushStyle; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TCanvas = class(TPersistent)<br /> &nbsp;&nbsp;&nbsp; procedure Arc(X1, Y1, X2, Y2, X3, Y3, X4, Y4: Integer);<br /> &nbsp;&nbsp;&nbsp; procedure Chord(X1, Y1, X2, Y2, X3, Y3, X4, Y4: Integer);<br /> &nbsp;&nbsp;&nbsp; procedure Draw(X, Y: Integer; Graphic: TGraphic);<br /> &nbsp;&nbsp;&nbsp; procedure Ellipse(X1, Y1, X2, Y2: Integer);<br /> &nbsp;&nbsp;&nbsp; procedure FillRect(const Rect: TRect);<br /> &nbsp;&nbsp;&nbsp; procedure FloodFill(X, Y: Integer; Color: TColor; FillStyle: Byte);<br /> &nbsp;&nbsp;&nbsp; procedure LineTo(X, Y: Integer);<br /> &nbsp;&nbsp;&nbsp; procedure MoveTo(X, Y: Integer);<br /> &nbsp;&nbsp;&nbsp; procedure Pie(X1, Y1, X2, Y2, X3, Y3, X4, Y4: Integer);<br /> &nbsp;&nbsp;&nbsp; procedure Rectangle(X1, Y1, X2, Y2: Integer);<br /> &nbsp;&nbsp;&nbsp; procedure Refresh;<br /> &nbsp;&nbsp;&nbsp; procedure RoundRect(X1, Y1, X2, Y2, X3, Y3: Integer);<br /> &nbsp;&nbsp;&nbsp; function TextHeight(Text: String): Integer;<br /> &nbsp;&nbsp;&nbsp; procedure TextOut(X, Y: Integer; Text: String);<br /> &nbsp;&nbsp;&nbsp; function TextWidth(Text: String): Integer;<br /> &nbsp;&nbsp;&nbsp; property Handle: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property Pixels: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property Brush: TBrush; read;<br /> &nbsp;&nbsp;&nbsp; property CopyMode: Byte; read write;<br /> &nbsp;&nbsp;&nbsp; property Font: TFont; read;<br /> &nbsp;&nbsp;&nbsp; property Pen: TPen; read;<br /> &nbsp; end;<br /> <br /> &nbsp; TGraphic = class(TPersistent)<br /> &nbsp;&nbsp;&nbsp; procedure LoadFromFile(const Filename: String);<br /> &nbsp;&nbsp;&nbsp; procedure SaveToFile(const Filename: String);<br /> &nbsp;&nbsp;&nbsp; property Empty: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Height: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property Modified: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Width: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property OnChange: TNotifyEvent; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TBitmap = class(TGraphic)<br /> &nbsp;&nbsp;&nbsp; procedure LoadFromStream(Stream: TStream);<br /> &nbsp;&nbsp;&nbsp; procedure SaveToStream(Stream: TStream);<br /> &nbsp;&nbsp;&nbsp; property Canvas: TCanvas; read write;<br /> &nbsp;&nbsp;&nbsp; property Handle: HBITMAP; read write;<br /> &nbsp;&nbsp;&nbsp; procedure Dormant;<br /> &nbsp;&nbsp;&nbsp; procedure FreeImage;<br /> &nbsp;&nbsp;&nbsp; procedure LoadFromClipboardFormat(AFormat: Word; AData: THandle; APalette: HPALETTE);<br /> &nbsp;&nbsp;&nbsp; procedure LoadFromResourceName(Instance: THandle; const ResName: String);<br /> &nbsp;&nbsp;&nbsp; procedure LoadFromResourceID(Instance: THandle; ResID: Integer);<br /> &nbsp;&nbsp;&nbsp; function ReleaseHandle: HBITMAP;<br /> &nbsp;&nbsp;&nbsp; function ReleasePalette: HPALETTE;<br /> &nbsp;&nbsp;&nbsp; procedure SaveToClipboardFormat(var AFormat: Word; var AData: THandle; var APalette: HPALETTE);<br /> &nbsp;&nbsp;&nbsp; property Monochrome: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Palette: HPALETTE; read write;<br /> &nbsp;&nbsp;&nbsp; property IgnorePalette: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property TransparentColor: TColor; read;<br /> &nbsp; end;<br /> <br /> &nbsp; HICON = Integer;<br /> <br /> &nbsp; TIcon = class(TGraphic)<br /> &nbsp;&nbsp;&nbsp; procedure LoadFromStream(Stream: TStream);<br /> &nbsp;&nbsp;&nbsp; procedure SaveToStream(Stream: TStream);<br /> &nbsp;&nbsp;&nbsp; function ReleaseHandle: HICON;<br /> &nbsp;&nbsp;&nbsp; property Handle: HICON; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TNewIcon = class(TGraphic)<br /> &nbsp;&nbsp;&nbsp; procedure LoadFromStream(Stream: TStream);<br /> &nbsp;&nbsp;&nbsp; procedure SaveToStream(Stream: TStream);<br /> &nbsp;&nbsp;&nbsp; procedure LoadFromResourceName(Instance: THandle; const ResName: String);<br /> &nbsp;&nbsp;&nbsp; procedure LoadFromResourceID(Instance: THandle; ResID: Integer);<br /> &nbsp;&nbsp;&nbsp; function ReleaseHandle: HICON;<br /> &nbsp;&nbsp;&nbsp; property Handle: HICON; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TAlign = (alNone, alTop, alBottom, alLeft, alRight, alClient);<br /> <br /> &nbsp; TDragMode = (dmManual, dmAutomatic);<br /> &nbsp; <br /> &nbsp; TDragState = (dsDragEnter, dsDragLeave, dsDragMove);<br /> &nbsp; <br /> &nbsp; TDragKind = (dkDrag, dkDock);<br /> &nbsp; <br /> &nbsp; TDragOverEvent = procedure(Sender, Source: TObject; X, Y: Integer; State: TDragState; var Accept: Boolean);<br /> &nbsp; <br /> &nbsp; TDragDropEvent = procedure(Sender, Source: TObject;X, Y: Integer);<br /> &nbsp; <br /> &nbsp; TEndDragEvent = procedure(Sender, Target: TObject; X, Y: Integer);<br /> <br /> &nbsp; TDragObject = class(TObject)<br /> &nbsp;&nbsp;&nbsp; function GetName: String;<br /> &nbsp;&nbsp;&nbsp; procedure HideDragImage;<br /> &nbsp;&nbsp;&nbsp; function Instance: Longint;<br /> &nbsp;&nbsp;&nbsp; procedure ShowDragImage;<br /> &nbsp; end;<br /> <br /> &nbsp; TStartDragEvent = procedure(Sender: TObject; var DragObject: TDragObject);<br /> <br /> &nbsp; TControl = class(TComponent)<br /> &nbsp;&nbsp;&nbsp; constructor Create(AOwner: TComponent);<br /> &nbsp;&nbsp;&nbsp; procedure BringToFront;<br /> &nbsp;&nbsp;&nbsp; procedure Hide;<br /> &nbsp;&nbsp;&nbsp; procedure Invalidate;<br /> &nbsp;&nbsp;&nbsp; procedure Refresh;<br /> &nbsp;&nbsp;&nbsp; procedure Repaint;<br /> &nbsp;&nbsp;&nbsp; procedure SendToBack;<br /> &nbsp;&nbsp;&nbsp; procedure Show;<br /> &nbsp;&nbsp;&nbsp; procedure Update;<br /> &nbsp;&nbsp;&nbsp; procedure SetBounds(ALeft, ATop, AWidth, AHeight: Integer);<br /> &nbsp;&nbsp;&nbsp; property Parent: TWinControl; read write;<br /> &nbsp;&nbsp;&nbsp; property Left: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property Top: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property Width: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property Height: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property Hint: String; read write;<br /> &nbsp;&nbsp;&nbsp; property Align: TAlign; read write;<br /> &nbsp;&nbsp;&nbsp; property ClientHeight: Longint; read write;<br /> &nbsp;&nbsp;&nbsp; property ClientWidth: Longint; read write;<br /> &nbsp;&nbsp;&nbsp; property ShowHint: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property ParentShowHint: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Visible: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Enabled: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Cursor: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; function Dragging: Boolean;<br /> &nbsp;&nbsp;&nbsp; function HasParent: Boolean;<br /> &nbsp;&nbsp;&nbsp; procedure BeginDrag(Immediate: Boolean);<br /> &nbsp;&nbsp;&nbsp; function ClientToScreen(Point: TPoint): TPoint;<br /> &nbsp;&nbsp;&nbsp; procedure EndDrag(Drop: Boolean);<br /> &nbsp;&nbsp;&nbsp; function GetTextBuf(Buffer: PChar; BufSize: Integer): Integer;<br /> &nbsp;&nbsp;&nbsp; function GetTextLen: Integer;<br /> &nbsp;&nbsp;&nbsp; procedure SetTextBuf(Buffer: PChar);<br /> &nbsp;&nbsp;&nbsp; function Perform(Msg: Cardinal; WParam, LParam: Longint): Longint;<br /> &nbsp;&nbsp;&nbsp; function ScreenToClient(Point: TPoint): TPoint;<br /> &nbsp; end;<br /> <br /> &nbsp; TWinControl = class(TControl)<br /> &nbsp;&nbsp;&nbsp; property Handle: Longint; read write;<br /> &nbsp;&nbsp;&nbsp; property Showing: Boolean; read;<br /> &nbsp;&nbsp;&nbsp; property TabOrder: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property TabStop: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; function CanFocus: Boolean;<br /> &nbsp;&nbsp;&nbsp; function Focused: Boolean;<br /> &nbsp;&nbsp;&nbsp; property Controls[Index: Integer]: TControl; read;<br /> &nbsp;&nbsp;&nbsp; property ControlCount: Integer; read;<br /> &nbsp;&nbsp;&nbsp; function HandleAllocated: Boolean;<br /> &nbsp;&nbsp;&nbsp; procedure HandleNeeded;<br /> &nbsp;&nbsp;&nbsp; procedure EnableAlign;<br /> &nbsp;&nbsp;&nbsp; procedure RemoveControl(AControl: TControl);<br /> &nbsp;&nbsp;&nbsp; procedure InsertControl(AControl: TControl);<br /> &nbsp;&nbsp;&nbsp; procedure Realign;<br /> &nbsp;&nbsp;&nbsp; procedure ScaleBy(M, D: Integer);<br /> &nbsp;&nbsp;&nbsp; procedure ScrollBy(DeltaX, DeltaY: Integer);<br /> &nbsp;&nbsp;&nbsp; procedure SetFocus;<br /> &nbsp;&nbsp;&nbsp; procedure PaintTo(DC: HDC; X, Y: Integer);<br /> &nbsp;&nbsp;&nbsp; function ContainsControl(Control: TControl): Boolean;<br /> &nbsp;&nbsp;&nbsp; procedure DisableAlign;<br /> &nbsp;&nbsp;&nbsp; procedure UpdateControlState;<br /> &nbsp;&nbsp;&nbsp; property Brush: TBrush; read;<br /> &nbsp;&nbsp;&nbsp; property HelpContext: Longint; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TGraphicControl = class(TControl)<br /> &nbsp; end;<br /> <br /> &nbsp; TCustomControl = class(TWinControl)<br /> &nbsp; end;<br /> <br /> &nbsp; TFieldChangeEvent = procedure(Sender: TObject; OldField, Value: Byte);<br /> <br /> &nbsp; TIPAddressEdit = class(TCustomControl)<br /> &nbsp;&nbsp;&nbsp; procedure SetFieldFocus(Field: Byte);<br /> &nbsp;&nbsp;&nbsp; function IsBlank: Boolean;<br /> &nbsp;&nbsp;&nbsp; property Field1Value: Byte; read write;<br /> &nbsp;&nbsp;&nbsp; property Field2Value: Byte; read write;<br /> &nbsp;&nbsp;&nbsp; property Field3Value: Byte; read write;<br /> &nbsp;&nbsp;&nbsp; property Field4Value: Byte; read write;<br /> &nbsp;&nbsp;&nbsp; property Field1Max: Byte; read write;<br /> &nbsp;&nbsp;&nbsp; property Field1Min: Byte; read write;<br /> &nbsp;&nbsp;&nbsp; property Field2Max: Byte; read write;<br /> &nbsp;&nbsp;&nbsp; property Field2Min: Byte; read write;<br /> &nbsp;&nbsp;&nbsp; property Field3Max: Byte; read write;<br /> &nbsp;&nbsp;&nbsp; property Field3Min: Byte; read write;<br /> &nbsp;&nbsp;&nbsp; property Field4Max: Byte; read write;<br /> &nbsp;&nbsp;&nbsp; property Field4Min: Byte; read write;<br /> &nbsp;&nbsp;&nbsp; property IPValue: LongWord; read write;<br /> &nbsp;&nbsp;&nbsp; property OnChange: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnEnter: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnExit: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnFieldChange: TFieldChangeEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property InitClear: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Color: TColor; read write;<br /> &nbsp;&nbsp;&nbsp; property Font: TFont; read write;<br /> &nbsp;&nbsp;&nbsp; property ParentColor: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property ParentFont: Boolean; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TNewGroupBox = class(TCustomControl)<br /> &nbsp;&nbsp;&nbsp; property Caption: String; read write;<br /> &nbsp;&nbsp;&nbsp; property Color: TColor; read write;<br /> &nbsp;&nbsp;&nbsp; property Font: TFont; read write;<br /> &nbsp;&nbsp;&nbsp; property ParentColor: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property ParentFont: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property OnClick: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDblClick: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnEnter: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnExit: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property Ctl3D: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property DragCursor: Longint; read write;<br /> &nbsp;&nbsp;&nbsp; property DragMode: TDragMode; read write;<br /> &nbsp;&nbsp;&nbsp; property ParentCtl3D: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property PopupMenu: TPopupMenu; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDragDrop: TDragDropEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDragOver: TDragOverEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnEndDrag: TEndDragEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseDown: TMouseEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseMove: TMouseMoveEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseUp: TMouseEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnStartDrag: TStartDragEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property ParentBackground: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseEnter: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseLeave: TNotifyEvent; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TScrollBarKind = (sbHorizontal, sbVertical);<br /> <br /> &nbsp; TScrollBarInc = SmallInt;<br /> <br /> &nbsp; TControlScrollBar = class(TPersistent)<br /> &nbsp;&nbsp;&nbsp; property Kind: TScrollBarKind; read;<br /> &nbsp;&nbsp;&nbsp; property ScrollPos: Integer; read;<br /> &nbsp;&nbsp;&nbsp; property Margin: Word; read write;<br /> &nbsp;&nbsp;&nbsp; property Increment: TScrollBarInc; read write;<br /> &nbsp;&nbsp;&nbsp; property Range: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property Position: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property Tracking: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Visible: Boolean; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TScrollingWinControl = class(TWinControl)<br /> &nbsp;&nbsp;&nbsp; procedure ScrollInView(AControl: TControl);<br /> &nbsp;&nbsp;&nbsp; property HorzScrollBar: TControlScrollBar; read write;<br /> &nbsp;&nbsp;&nbsp; property VertScrollBar: TControlScrollBar; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TIdleEvent = procedure(Sender: TObject; var Done: Boolean);<br /> <br /> &nbsp; TFormBorderStyle = (bsNone, bsSingle, bsSizeable, bsDialog, bsToolWindow, bsSizeToolWin);<br /> &nbsp; TBorderStyle = TFormBorderStyle;<br /> <br /> &nbsp; TWindowState = (wsNormal, wsMinimized, wsMaximized);<br /> <br /> &nbsp; TFormStyle = (fsNormal, fsMDIChild, fsMDIForm, fsStayOnTop);<br /> <br /> &nbsp; TBorderIcon = (biSystemMenu, biMinimize, biMaximize, biHelp);<br /> &nbsp; TBorderIcons = set of TBorderIcon;<br /> <br /> &nbsp; TPosition = (poDesigned, poDefault, poDefaultPosOnly, poDefaultSizeOnly, poScreenCenter, poDesktopCenter, poMainFormCenter, poOwnerFormCenter);<br /> <br /> &nbsp; TPrintScale = (poNone, poProportional, poPrintToFit);<br /> <br /> &nbsp; TCloseAction = (caNone, caHide, caFree, caMinimize);<br /> <br /> &nbsp; TCloseEvent = procedure(Sender: TObject; var Action: TCloseAction);<br /> <br /> &nbsp; TCloseQueryEvent = procedure(Sender: TObject; var CanClose: Boolean);<br /> <br /> &nbsp; TEShiftState = (ssShift, ssAlt, ssCtrl, ssLeft, ssRight, ssMiddle, ssDouble);<br /> &nbsp; TShiftState = set of TEShiftState;<br /> <br /> &nbsp; TKeyEvent = procedure(Sender: TObject; var Key: Word; Shift: TShiftState);<br /> <br /> &nbsp; TKeyPressEvent = procedure(Sender: TObject; var Key: Char);<br /> <br /> &nbsp; THelpContext = Longint;<br /> <br /> &nbsp; TScrollBox = class(TScrollingWinControl)<br /> &nbsp;&nbsp;&nbsp; property BorderStyle: TBorderStyle; read write;<br /> &nbsp;&nbsp;&nbsp; property Color: TColor; read write;<br /> &nbsp;&nbsp;&nbsp; property Font: TFont; read write;<br /> &nbsp;&nbsp;&nbsp; property AutoScroll: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property ParentColor: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property ParentFont: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property OnClick: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDblClick: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnEnter: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnExit: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnResize: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property DragCursor: TCursor; read write;<br /> &nbsp;&nbsp;&nbsp; property DragMode: TDragMode; read write;<br /> &nbsp;&nbsp;&nbsp; property PopupMenu: TPopupMenu; read write;<br /> &nbsp;&nbsp;&nbsp; property Ctl3D: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property ParentCtl3D: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDragDrop: TDragDropEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDragOver: TDragOverEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnEndDrag: TEndDragEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseDown: TMouseEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseMove: TMouseMoveEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseUp: TMouseEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseEnter: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseLeave: TNotifyEvent; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TTileMode = (tbHorizontal, tbVertical);<br /> <br /> &nbsp; TForm = class(TScrollingWinControl)<br /> &nbsp;&nbsp;&nbsp; constructor CreateNew(AOwner: TComponent);<br /> &nbsp;&nbsp;&nbsp; procedure Close;<br /> &nbsp;&nbsp;&nbsp; procedure Hide;<br /> &nbsp;&nbsp;&nbsp; procedure Show;<br /> &nbsp;&nbsp;&nbsp; function ShowModal: Integer;<br /> &nbsp;&nbsp;&nbsp; procedure Release;<br /> &nbsp;&nbsp;&nbsp; property Active: Boolean; read;<br /> &nbsp;&nbsp;&nbsp; property ActiveControl: TWinControl; read write;<br /> &nbsp;&nbsp;&nbsp; property BorderIcons: TBorderIcons; read write;<br /> &nbsp;&nbsp;&nbsp; property BorderStyle: TFormBorderStyle; read write;<br /> &nbsp;&nbsp;&nbsp; property Caption: String; read write;<br /> &nbsp;&nbsp;&nbsp; property AutoScroll: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Color: TColor; read write;<br /> &nbsp;&nbsp;&nbsp; property Font: TFont; read write;<br /> &nbsp;&nbsp;&nbsp; property FormStyle: TFormStyle; read write;<br /> &nbsp;&nbsp;&nbsp; property KeyPreview: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Position: TPosition; read write;<br /> &nbsp;&nbsp;&nbsp; property OnActivate: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnClick: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDblClick: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnClose: TCloseEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnCloseQuery: TCloseQueryEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnCreate: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDestroy: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDeactivate: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnHide: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnKeyDown: TKeyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnKeyPress: TKeyPressEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnKeyUp: TKeyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnResize: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnShow: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; procedure ArrangeIcons;<br /> &nbsp;&nbsp;&nbsp; procedure Print;<br /> &nbsp;&nbsp;&nbsp; procedure SendCancelMode(Sender: TControl);<br /> &nbsp;&nbsp;&nbsp; property ActiveOLEControl: TWinControl; read write;<br /> &nbsp;&nbsp;&nbsp; property OleFormObject: TOLEFORMOBJECT; read write;<br /> &nbsp;&nbsp;&nbsp; property ClientHandle: Longint; read;<br /> &nbsp;&nbsp;&nbsp; property TileMode: TTileMode; read write;<br /> &nbsp;&nbsp;&nbsp; procedure Cascade;<br /> &nbsp;&nbsp;&nbsp; function CloseQuery: Boolean;<br /> &nbsp;&nbsp;&nbsp; procedure DefocusControl(Control: TWinControl; Removing: Boolean);<br /> &nbsp;&nbsp;&nbsp; procedure FocusControl(Control: TWinControl);<br /> &nbsp;&nbsp;&nbsp; procedure Next;<br /> &nbsp;&nbsp;&nbsp; procedure Previous;<br /> &nbsp;&nbsp;&nbsp; function SetFocusedControl(Control: TWinControl): Boolean;<br /> &nbsp;&nbsp;&nbsp; procedure Tile;<br /> &nbsp;&nbsp;&nbsp; property ActiveMDIChild: TForm; read;<br /> &nbsp;&nbsp;&nbsp; property Canvas: TCanvas; read;<br /> &nbsp;&nbsp;&nbsp; property DropTarget: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property ModalResult: Longint; read write;<br /> &nbsp;&nbsp;&nbsp; property MDIChildCount: Integer; read;<br /> &nbsp;&nbsp;&nbsp; property MDIChildren[I: Integer]: TForm; read;<br /> &nbsp;&nbsp;&nbsp; property Icon: TIcon; read write;<br /> &nbsp;&nbsp;&nbsp; property Menu: TMainMenu; read write;<br /> &nbsp;&nbsp;&nbsp; property ObjectMenuItem: TMenuItem; read write;<br /> &nbsp;&nbsp;&nbsp; property PixelsPerInch: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property PrintScale: TPrintScale; read write;<br /> &nbsp;&nbsp;&nbsp; property Scaled: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property WindowState: TWindowState; read write;<br /> &nbsp;&nbsp;&nbsp; property WindowMenu: TMenuItem; read write;<br /> &nbsp;&nbsp;&nbsp; property Ctl3D: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property PopupMenu: TPopupMenu; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDragDrop: TDragDropEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDockOver: TDockOverEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseDown: TMouseEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseMove: TMouseMoveEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseUp: TMouseEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnPaint: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseEnter: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseLeave: TNotifyEvent; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TMsg = record<br /> &nbsp;&nbsp;&nbsp; hwnd: HWND;<br /> &nbsp;&nbsp;&nbsp; message: LongWord;<br /> &nbsp;&nbsp;&nbsp; wParam: Longint;<br /> &nbsp;&nbsp;&nbsp; lParam: Longint;<br /> &nbsp;&nbsp;&nbsp; time: LongWord;<br /> &nbsp;&nbsp;&nbsp; pt: TPoint;<br /> &nbsp; end;<br /> <br /> &nbsp; TMessageEvent = procedure (var Msg: TMsg; var Handled: Boolean);<br /> <br /> &nbsp; TApplication = class(TComponent)<br /> &nbsp;&nbsp;&nbsp; procedure BringToFront;<br /> &nbsp;&nbsp;&nbsp; function MessageBox(Text, Caption: PChar; Flags: Word): Integer;<br /> &nbsp;&nbsp;&nbsp; procedure Minimize;<br /> &nbsp;&nbsp;&nbsp; procedure ProcessMessages;<br /> &nbsp;&nbsp;&nbsp; procedure Restore;<br /> &nbsp;&nbsp;&nbsp; procedure Terminate;<br /> &nbsp;&nbsp;&nbsp; property Active: Boolean; read;<br /> &nbsp;&nbsp;&nbsp; property ExeName: String; read;<br /> &nbsp;&nbsp;&nbsp; property Handle: Longint; read;<br /> &nbsp;&nbsp;&nbsp; property UpdateFormatSettings: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Hint: String; read write;<br /> &nbsp;&nbsp;&nbsp; property MainForm: TForm; read;<br /> &nbsp;&nbsp;&nbsp; property ShowHint: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property ShowMainForm: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Terminated: Boolean; read;<br /> &nbsp;&nbsp;&nbsp; property Title: String; read write;<br /> &nbsp;&nbsp;&nbsp; property OnActivate: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDeactivate: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnIdle: TIdleEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnHint: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMinimize: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnRestore: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; procedure ControlDestroyed(Control: TControl);<br /> &nbsp;&nbsp;&nbsp; procedure CancelHint;<br /> &nbsp;&nbsp;&nbsp; procedure HandleException(Sender: TObject);<br /> &nbsp;&nbsp;&nbsp; procedure HandleMessage;<br /> &nbsp;&nbsp;&nbsp; procedure HideHint;<br /> &nbsp;&nbsp;&nbsp; procedure Initalize;<br /> &nbsp;&nbsp;&nbsp; procedure NormalizeTopMosts;<br /> &nbsp;&nbsp;&nbsp; procedure RestoreTopMosts;<br /> &nbsp;&nbsp;&nbsp; procedure Run;<br /> &nbsp;&nbsp;&nbsp; function HelpCommand(Command: Integer; Data: Longint): Boolean;<br /> &nbsp;&nbsp;&nbsp; function HelpContext(Context: THelpContext): Boolean;<br /> &nbsp;&nbsp;&nbsp; function HelpJump(JumpID: String): Boolean;<br /> &nbsp;&nbsp;&nbsp; property DialogHandle: Longint; read write;<br /> &nbsp;&nbsp;&nbsp; procedure CreateHandle;<br /> &nbsp;&nbsp;&nbsp; property HelpFile: String; read write;<br /> &nbsp;&nbsp;&nbsp; property HintColor: TColor; read write;<br /> &nbsp;&nbsp;&nbsp; property HintPause: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property HintShortPause: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property HintHidePause: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property Icon: TIcon; read write;<br /> &nbsp;&nbsp;&nbsp; property OnHelp: THelpEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMessage: TMessageEvent; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TScreen = class(TComponent)<br /> &nbsp;&nbsp;&nbsp; property ActiveControl: TWinControl; read;<br /> &nbsp;&nbsp;&nbsp; property ActiveForm: TForm; read;<br /> &nbsp;&nbsp;&nbsp; property Cursor: TCursor; read write;<br /> &nbsp;&nbsp;&nbsp; property Cursors[Index: Integer]: Longword; read write;<br /> &nbsp;&nbsp;&nbsp; property FormCount: Integer; read;<br /> &nbsp;&nbsp;&nbsp; property Forms[Index: Integer]: TForm; read;<br /> &nbsp;&nbsp;&nbsp; property Fonts: TStrings; read;<br /> &nbsp;&nbsp;&nbsp; property Height: Integer; read;<br /> &nbsp;&nbsp;&nbsp; property Width: Integer; read;<br /> &nbsp;&nbsp;&nbsp; property PixelsPerInch: Integer; read;<br /> &nbsp;&nbsp;&nbsp; property OnActiveControlChange: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnActiveFormChange: TNotifyEvent; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TCustomLabel = class(TGraphicControl)<br /> &nbsp; end;<br /> <br /> &nbsp; TMouseButton = (mbLeft, mbRight, mbMiddle);<br /> <br /> &nbsp; TMouseEvent = procedure (Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);<br /> &nbsp; <br /> &nbsp; TMouseMoveEvent = procedure(Sender: TObject; Shift: TShiftState; X, Y: Integer);<br /> <br /> &nbsp; HWND = Longint;<br /> <br /> &nbsp; TAnchorKind = (akTop, akLeft, akRight, akBottom);<br /> &nbsp; TAnchors = set of TAnchorKind;<br /> <br /> &nbsp; TModalResult = Integer;<br /> <br /> &nbsp; TCursor = Integer;<br /> <br /> &nbsp; TPoint = record<br /> &nbsp;&nbsp;&nbsp; x, y: Longint;<br /> &nbsp; end;<br /> <br /> &nbsp; TLabel = class(TCustomLabel)<br /> &nbsp;&nbsp;&nbsp; property Alignment: TAlignment; read write;<br /> &nbsp;&nbsp;&nbsp; property AutoSize: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Caption: String; read write;<br /> &nbsp;&nbsp;&nbsp; property Color: TColor; read write;<br /> &nbsp;&nbsp;&nbsp; property FocusControl: TWinControl; read write;<br /> &nbsp;&nbsp;&nbsp; property Font: TFont; read write;<br /> &nbsp;&nbsp;&nbsp; property ParentColor: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property ParentFont: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Transparent: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property WordWrap: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property OnClick: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDblClick: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseDown: TMouseEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseMove: TMouseMoveEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseUp: TMouseEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property DragCursor: Longint; read write;<br /> &nbsp;&nbsp;&nbsp; property DragMode: TDragMode; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDragDrop: TDragDropEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDragOver: TDragOverEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnStartDrag: TStartDragEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnEndDrag: TEndDragEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property ShowAccelChar: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseEnter: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseLeave: TNotifyEvent; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TCustomEdit = class(TWinControl)<br /> &nbsp;&nbsp;&nbsp; procedure Clear;<br /> &nbsp;&nbsp;&nbsp; procedure ClearSelection;<br /> &nbsp;&nbsp;&nbsp; procedure SelectAll;<br /> &nbsp;&nbsp;&nbsp; property Modified: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property SelLength: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property SelStart: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property SelText: String; read write;<br /> &nbsp;&nbsp;&nbsp; property Text: String; read write;<br /> &nbsp;&nbsp;&nbsp; procedure CopyToClipboard;<br /> &nbsp;&nbsp;&nbsp; procedure CutToClipboard;<br /> &nbsp;&nbsp;&nbsp; procedure PasteFromClipboard;<br /> &nbsp;&nbsp;&nbsp; function GetSelTextBuf(Buffer: PChar; BufSize: Integer): Integer;<br /> &nbsp;&nbsp;&nbsp; procedure SetSelTextBuf(Buffer: PChar);<br /> &nbsp; end;<br /> <br /> &nbsp; TEditCharCase = (ecNormal, ecUpperCase, ecLowerCase);<br /> <br /> &nbsp; TEdit = class(TCustomEdit)<br /> &nbsp;&nbsp;&nbsp; property AutoSelect: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property AutoSize: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property BorderStyle: TBorderStyle; read write;<br /> &nbsp;&nbsp;&nbsp; property CharCase: TEditCharCase; read write;<br /> &nbsp;&nbsp;&nbsp; property Color: TColor; read write;<br /> &nbsp;&nbsp;&nbsp; property Font: TFont; read write;<br /> &nbsp;&nbsp;&nbsp; property HideSelection: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property MaxLength: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property ParentColor: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property ParentFont: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property PasswordChar: Char; read write;<br /> &nbsp;&nbsp;&nbsp; property ReadOnly: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Text: String; read write;<br /> &nbsp;&nbsp;&nbsp; property OnChange: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnClick: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDblClick: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnEnter: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnExit: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnKeyDown: TKeyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnKeyPress: TKeyPressEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnKeyUp: TKeyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property Ctl3D: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property DragCursor: Longint; read write;<br /> &nbsp;&nbsp;&nbsp; property DragMode: TDragMode; read write;<br /> &nbsp;&nbsp;&nbsp; property OEMConvert: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property ParentCtl3D: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property PopupMenu: TPopupMenu; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDragDrop: TDragDropEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDragOver: TDragOverEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnEndDrag: TEndDragEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseDown: TMouseEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseMove: TMouseMoveEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseUp: TMouseEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnStartDrag: TStartDragEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseEnter: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseLeave: TNotifyEvent; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TNewEdit = class(TEdit)<br /> &nbsp; end;<br /> <br /> &nbsp; TCustomMemo = class(TCustomEdit)<br /> &nbsp;&nbsp;&nbsp; property Lines: TStrings; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TScrollStyle = (ssNone, ssHorizontal, ssVertical, ssBoth);<br /> <br /> &nbsp; TMemo = class(TCustomMemo)<br /> &nbsp;&nbsp;&nbsp; property Alignment: TAlignment; read write;<br /> &nbsp;&nbsp;&nbsp; property BorderStyle: TBorderStyle; read write;<br /> &nbsp;&nbsp;&nbsp; property Color: TColor; read write;<br /> &nbsp;&nbsp;&nbsp; property Font: TFont; read write;<br /> &nbsp;&nbsp;&nbsp; property HideSelection: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property MaxLength: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property ParentColor: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property ParentFont: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property ReadOnly: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property ScrollBars: TScrollStyle; read write;<br /> &nbsp;&nbsp;&nbsp; property WantReturns: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property WantTabs: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property WordWrap: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property OnChange: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnClick: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDblClick: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnEnter: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnExit: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnKeyDown: TKeyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnKeyPress: TKeyPressEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnKeyUp: TKeyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property Ctl3D: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property DragCursor: Longint; read write;<br /> &nbsp;&nbsp;&nbsp; property DragMode: TDragMode; read write;<br /> &nbsp;&nbsp;&nbsp; property OEMConvert: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property ParentCtl3D: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property PopupMenu: TPopupMenu; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDragDrop: TDragDropEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDragOver: TDragOverEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnEndDrag: TEndDragEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseDown: TMouseEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseMove: TMouseMoveEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseUp: TMouseEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnStartDrag: TStartDragEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseEnter: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseLeave: TNotifyEvent; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TNewMemo = class(TMemo)<br /> &nbsp; end;<br /> <br /> &nbsp; TCustomComboBox = class(TWinControl)<br /> &nbsp;&nbsp;&nbsp; property DroppedDown: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Items: TStrings; read write;<br /> &nbsp;&nbsp;&nbsp; property ItemIndex: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; procedure Clear;<br /> &nbsp;&nbsp;&nbsp; procedure SelectAll;<br /> &nbsp;&nbsp;&nbsp; property Canvas: TCanvas; read;<br /> &nbsp;&nbsp;&nbsp; property SelLength: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property SelStart: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property SelText: String; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TComboBoxStyle = (csDropDown, csSimple, csDropDownList, csOwnerDrawFixed, csOwnerDrawVariable);<br /> <br /> &nbsp; TDrawItemEvent = procedure(Control: TWinControl; Index: Integer; Rect: TRect; State: Byte);<br /> <br /> &nbsp; TMeasureItemEvent = procedure(Control: TWinControl; Index: Integer; var Height: Integer);<br /> <br /> &nbsp; TComboBox = class(TCustomComboBox)<br /> &nbsp;&nbsp;&nbsp; property Style: TComboBoxStyle; read write;<br /> &nbsp;&nbsp;&nbsp; property Color: TColor; read write;<br /> &nbsp;&nbsp;&nbsp; property DropDownCount: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property Font: TFont; read write;<br /> &nbsp;&nbsp;&nbsp; property MaxLength: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property ParentColor: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property ParentFont: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Sorted: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Text: String; read write;<br /> &nbsp;&nbsp;&nbsp; property OnChange: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnClick: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDblClick: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDropDown: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnEnter: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnExit: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnKeyDown: TKeyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnKeyPress: TKeyPressEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnKeyUp: TKeyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property Ctl3D: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property DragMode: TDragMode; read write;<br /> &nbsp;&nbsp;&nbsp; property DragCursor: Longint; read write;<br /> &nbsp;&nbsp;&nbsp; property ItemHeight: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property ParentCtl3D: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property PopupMenu: TPopupMenu; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDragDrop: TDragDropEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDragOver: TDragOverEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDrawItem: TDrawItemEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnEndDrag: TEndDragEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMeasureItem: TMeasureItemEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnStartDrag: TStartDragEvent; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TNewComboBox = class(TComboBox)<br /> &nbsp; end;<br /> <br /> &nbsp; TButtonControl = class(TWinControl)<br /> &nbsp; end;<br /> <br /> &nbsp; TButton = class(TButtonControl)<br /> &nbsp;&nbsp;&nbsp; procedure Click;<br /> &nbsp;&nbsp;&nbsp; property Cancel: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Caption: String; read write;<br /> &nbsp;&nbsp;&nbsp; property Default: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Font: TFont; read write;<br /> &nbsp;&nbsp;&nbsp; property ModalResult: Longint; read write;<br /> &nbsp;&nbsp;&nbsp; property ParentFont: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property OnClick: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnEnter: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnExit: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property DragCursor: Longint; read write;<br /> &nbsp;&nbsp;&nbsp; property DragMode: TDragMode; read write;<br /> &nbsp;&nbsp;&nbsp; property PopupMenu: TPopupMenu; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDragDrop: TDragDropEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDragOver: TDragOverEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnEndDrag: TEndDragEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnKeyDown: TKeyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnKeyPress: TKeyPressEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnKeyUp: TKeyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseDown: TMouseEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseMove: TMouseMoveEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseUp: TMouseEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnStartDrag: TStartDragEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseEnter: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseLeave: TNotifyEvent; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TNewButton = class(TButton)<br /> &nbsp; end;<br /> <br /> &nbsp; TCustomCheckBox = class(TButtonControl)<br /> &nbsp; end;<br /> <br /> &nbsp; TCheckBoxState = (cbUnchecked, cbChecked, cbGrayed);<br /> <br /> &nbsp; TCheckBox = class(TCustomCheckBox)<br /> &nbsp;&nbsp;&nbsp; property Alignment: TAlignment; read write;<br /> &nbsp;&nbsp;&nbsp; property AllowGrayed: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Caption: String; read write;<br /> &nbsp;&nbsp;&nbsp; property Checked: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Color: TColor; read write;<br /> &nbsp;&nbsp;&nbsp; property Font: TFont; read write;<br /> &nbsp;&nbsp;&nbsp; property ParentColor: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property ParentFont: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property State: TCheckBoxState; read write;<br /> &nbsp;&nbsp;&nbsp; property OnClick: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnEnter: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnExit: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property Ctl3D: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property DragCursor: Longint; read write;<br /> &nbsp;&nbsp;&nbsp; property DragMode: TDragMode; read write;<br /> &nbsp;&nbsp;&nbsp; property ParentCtl3D: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property PopupMenu: TPopupMenu; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDragDrop: TDragDropEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDragOver: TDragOverEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnEndDrag: TEndDragEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnKeyDown: TKeyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnKeyPress: TKeyPressEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnKeyUp: TKeyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseDown: TMouseEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseMove: TMouseMoveEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseUp: TMouseEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnStartDrag: TStartDragEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseEnter: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseLeave: TNotifyEvent; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TNewCheckBox = class(TCheckBox)<br /> &nbsp;&nbsp;&nbsp; property ParentBackground: Boolean; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TRadioButton = class(TButtonControl)<br /> &nbsp;&nbsp;&nbsp; property Alignment: TAlignment; read write;<br /> &nbsp;&nbsp;&nbsp; property Caption: String; read write;<br /> &nbsp;&nbsp;&nbsp; property Checked: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Color: TColor; read write;<br /> &nbsp;&nbsp;&nbsp; property Font: TFont; read write;<br /> &nbsp;&nbsp;&nbsp; property ParentColor: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property ParentFont: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property OnClick: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDblClick: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnEnter: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnExit: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property Ctl3D: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property DragCursor: Longint; read write;<br /> &nbsp;&nbsp;&nbsp; property DragMode: TDragMode; read write;<br /> &nbsp;&nbsp;&nbsp; property ParentCtl3D: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property PopupMenu: TPopupMenu; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDragDrop: TDragDropEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDragOver: TDragOverEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnEndDrag: TEndDragEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnKeyDown: TKeyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnKeyPress: TKeyPressEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnKeyUp: TKeyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseDown: TMouseEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseMove: TMouseMoveEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseUp: TMouseEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnStartDrag: TStartDragEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseEnter: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseLeave: TNotifyEvent; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TNewRadioButton = class(TRadioButton)<br /> &nbsp;&nbsp;&nbsp; property ParentBackground: Boolean; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TCustomListBox = class(TWinControl)<br /> &nbsp;&nbsp;&nbsp; property Items: TStrings; read write;<br /> &nbsp;&nbsp;&nbsp; property ItemIndex: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property SelCount: Integer; read;<br /> &nbsp;&nbsp;&nbsp; property Selected[Index: Integer]: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; procedure Clear;<br /> &nbsp;&nbsp;&nbsp; function ItemAtPos(Pos: TPoint; Existing: Boolean): Integer;<br /> &nbsp;&nbsp;&nbsp; function ItemRect(Index: Integer): TRect;<br /> &nbsp;&nbsp;&nbsp; property Canvas: TCanvas; read;<br /> &nbsp;&nbsp;&nbsp; property TopIndex: Integer; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TListBoxStyle = (lbStandard, lbOwnerDrawFixed, lbOwnerDrawVariable);<br /> <br /> &nbsp; TScrollCode = (scLineUp, scLineDown, scPageUp, scPageDown, scPosition, scTrack, scTop, scBottom, scEndScroll);<br /> <br /> &nbsp; TScrollEvent = procedure(Sender: TObject; ScrollCode: TScrollCode;var ScrollPos: Integer);<br /> <br /> &nbsp; TEOwnerDrawState = (odSelected, odGrayed, odDisabled, odChecked, odFocused, odDefault, odHotLight, odInactive, odNoAccel, odNoFocusRect, odReserved1, odReserved2, odComboBoxEdit);<br /> <br /> &nbsp; TOwnerDrawState = set of TEOwnerDrawState;<br /> &nbsp; <br /> &nbsp; TListBox = class(TCustomListBox)<br /> &nbsp;&nbsp;&nbsp; property BorderStyle: TBorderStyle; read write;<br /> &nbsp;&nbsp;&nbsp; property Color: TColor; read write;<br /> &nbsp;&nbsp;&nbsp; property Font: TFont; read write;<br /> &nbsp;&nbsp;&nbsp; property MultiSelect: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property ParentColor: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property ParentFont: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Sorted: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Style: TListBoxStyle; read write;<br /> &nbsp;&nbsp;&nbsp; property OnClick: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDblClick: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnEnter: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnExit: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnKeyDown: TKeyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnKeyPress: TKeyPressEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnKeyUp: TKeyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property Columns: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property Ctl3D: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property DragCursor: Longint; read write;<br /> &nbsp;&nbsp;&nbsp; property DragMode: TDragMode; read write;<br /> &nbsp;&nbsp;&nbsp; property ExtendedSelect: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property IntegralHeight: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property ItemHeight: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property ParentCtl3D: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property PopupMenu: TPopupMenu; read write;<br /> &nbsp;&nbsp;&nbsp; property TabWidth: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDragDrop: TDragDropEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDragOver: TDragOverEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDrawItem: TDrawItemEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnEndDrag: TEndDragEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMeasureItem: TMeasureItemEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseDown: TMouseEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseMove: TMouseMoveEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseUp: TMouseEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnStartDrag: TStartDragEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseEnter: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseLeave: TNotifyEvent; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TNewListBox = class(TListBox)<br /> &nbsp; end;<br /> <br /> &nbsp; TScrollBar = class(TWinControl)<br /> &nbsp;&nbsp;&nbsp; property Kind: TScrollBarKind; read write;<br /> &nbsp;&nbsp;&nbsp; property Max: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property Min: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property Position: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property OnChange: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnEnter: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnExit: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; procedure SetParams(APosition, AMin, AMax: Integer);<br /> &nbsp;&nbsp;&nbsp; property Ctl3D: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property DragCursor: Longint; read write;<br /> &nbsp;&nbsp;&nbsp; property DragMode: TDragMode; read write;<br /> &nbsp;&nbsp;&nbsp; property LargeChange: TScrollBarInc; read write;<br /> &nbsp;&nbsp;&nbsp; property ParentCtl3D: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property PopupMenu: TPopupMenu; read write;<br /> &nbsp;&nbsp;&nbsp; property SmallChange: TScrollBarInc; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDragDrop: TDragDropEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDragOver: TDragOverEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnEndDrag: TEndDragEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnKeyDown: TKeyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnKeyPress: TKeyPressEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnKeyUp: TKeyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnScroll: TScrollEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnStartDrag: TStartDragEvent; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TTrackBarOrientation = (trHorizontal, trVertical);<br /> <br /> &nbsp; TTickMark = (tmBottomRight, tmTopLeft, tmBoth);<br /> <br /> &nbsp; TTickStyle = (tsNone, tsAuto, tsManual);<br /> <br /> &nbsp; TTrackBar = class(TWinControl)<br /> &nbsp;&nbsp;&nbsp; procedure SetTick(Value: Integer);<br /> &nbsp;&nbsp;&nbsp; property LineSize: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property Max: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property Min: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property Orientation: TTrackBarOrientation; read write;<br /> &nbsp;&nbsp;&nbsp; property PageSize: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property Frequency: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property Position: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property SelEnd: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property SelStart: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property ThumbLength: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property TickMarks: TTickMark; read write;<br /> &nbsp;&nbsp;&nbsp; property TickStyle: TTickStyle; read write;<br /> &nbsp;&nbsp;&nbsp; property OnChange: TNotifyEvent; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TUDAlignButton = (udLeft, udRight);<br /> <br /> &nbsp; TUDOrientation = (udHorizontal, udVertical);<br /> <br /> &nbsp; TUDBtnType = (btNext, btPrev);<br /> <br /> &nbsp; TUDClickEvent = procedure(Sender: TObject; Button: TUDBtnType);<br /> <br /> &nbsp; TUDChangingEvent = procedure(Sender: TObject; var AllowChange: Boolean);<br /> <br /> &nbsp; TCustomUpDown = class(TWinControl)<br /> &nbsp; end;<br /> <br /> &nbsp; TUpDown = class(TCustomUpDown)<br /> &nbsp;&nbsp;&nbsp; property AlignButton: TUDAlignButton; read write;<br /> &nbsp;&nbsp;&nbsp; property Associate: TWinControl; read write;<br /> &nbsp;&nbsp;&nbsp; property ArrowKeys: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Min: SmallInt; read write;<br /> &nbsp;&nbsp;&nbsp; property Max: SmallInt; read write;<br /> &nbsp;&nbsp;&nbsp; property Increment: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property Orientation: TUDOrientation; read write;<br /> &nbsp;&nbsp;&nbsp; property Position: SmallInt; read write;<br /> &nbsp;&nbsp;&nbsp; property Thousands: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Wrap: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property OnChanging: TUDChangingEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnClick: TUDClickEvent; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; THKModifier = (hkShift, hkCtrl, hkAlt, hkExt);<br /> <br /> &nbsp; THKModifiers = set of THKModifier;<br /> <br /> &nbsp; THKInvalidKey = (hcNone, hcShift, hcCtrl, hcAlt, hcShiftCtrl, hcShiftAlt, hcCtrlAlt, hcShiftCtrlAlt);<br /> <br /> &nbsp; THKInvalidKeys = set of THKInvalidKey;<br /> <br /> &nbsp; TCustomHotKey = class(TWinControl)<br /> &nbsp; end;<br /> <br /> &nbsp; THotKey = class(TCustomHotKey)<br /> &nbsp;&nbsp;&nbsp; property Color: TColor; read write;<br /> &nbsp;&nbsp;&nbsp; property Font: TFont; read write;<br /> &nbsp;&nbsp;&nbsp; property ParentColor: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property ParentFont: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property AutoSize: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property HotKey: TShortCut; read write;<br /> &nbsp;&nbsp;&nbsp; property InvalidKeys: THKInvalidKeys; read write;<br /> &nbsp;&nbsp;&nbsp; property Modifiers: THKModifiers; read write;<br /> &nbsp;&nbsp;&nbsp; property PopupMenu: TPopupMenu; read write;<br /> &nbsp;&nbsp;&nbsp; property OnEnter: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnExit: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseDown: TMouseEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseMove: TMouseMoveEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseUp: TMouseEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseEnter: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseLeave: TNotifyEvent; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TCustomTabControl = class(TWinControl)<br /> &nbsp; end;<br /> <br /> &nbsp; TTabChangingEvent = procedure(Sender: TObject; var AllowChange: Boolean);<br /> <br /> &nbsp; TTabControl = class(TCustomTabControl)<br /> &nbsp;&nbsp;&nbsp; property ParentFont: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Font: TFont; read write;<br /> &nbsp;&nbsp;&nbsp; property DisplayRect: TRect; read;<br /> &nbsp;&nbsp;&nbsp; property MultiLine: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property TabHeight: Smallint; read write;<br /> &nbsp;&nbsp;&nbsp; property TabIndex: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property Tabs: TStrings; read write;<br /> &nbsp;&nbsp;&nbsp; property TabWidth: Smallint; read write;<br /> &nbsp;&nbsp;&nbsp; property OnChange: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnChanging: TTabChangingEvent; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TTabSheet = class(TWinControl)<br /> &nbsp;&nbsp;&nbsp; property ParentFont: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Font: TFont; read write;<br /> &nbsp;&nbsp;&nbsp; property PageControl: TPageControl; read write;<br /> &nbsp;&nbsp;&nbsp; property Caption: String; read write;<br /> &nbsp;&nbsp;&nbsp; property TabIndex: Integer; read;<br /> &nbsp;&nbsp;&nbsp; property PageIndex: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property TabVisible: Boolean; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TPageControl = class(TCustomTabControl)<br /> &nbsp;&nbsp;&nbsp; property ParentFont: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Font: TFont; read write;<br /> &nbsp;&nbsp;&nbsp; function FindNextPage(CurPage: TTabSheet; GoForward, CheckTabVisible: Boolean): TTabSheet;<br /> &nbsp;&nbsp;&nbsp; procedure SelectNextPage(GoForward: Boolean);<br /> &nbsp;&nbsp;&nbsp; property PageCount: Integer; read;<br /> &nbsp;&nbsp;&nbsp; property Pages[Index: Integer]: TTabSheet; read;<br /> &nbsp;&nbsp;&nbsp; property ActivePage: TTabSheet; read write;<br /> &nbsp;&nbsp;&nbsp; property MultiLine: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property TabHeight: Smallint; read write;<br /> &nbsp;&nbsp;&nbsp; property TabWidth: Smallint; read write;<br /> &nbsp;&nbsp;&nbsp; property OnChange: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnChanging: TTabChangingEvent; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TShapeType = (stRectangle, stSquare, stRoundRect, stRoundSquare, stEllipse, stCircle);<br /> <br /> &nbsp; TBevelShape = (bsBox, bsFrame, bsTopLine, bsBottomLine, bsLeftLine, bsRightLine, bsSpacer);<br /> <br /> &nbsp; TBevelStyle = (bsLowered, bsRaised);<br /> <br /> &nbsp; TBevel = class(TGraphicControl)<br /> &nbsp;&nbsp;&nbsp; property Shape: TBevelShape; read write;<br /> &nbsp;&nbsp;&nbsp; property Style: TBevelStyle; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TShape = class(TGraphicControl)<br /> &nbsp;&nbsp;&nbsp; property Brush: TBrush; read write;<br /> &nbsp;&nbsp;&nbsp; property Pen: TPen; read write;<br /> &nbsp;&nbsp;&nbsp; property Shape: TShapeType; read write;<br /> &nbsp;&nbsp;&nbsp; property DragCursor: Longint; read write;<br /> &nbsp;&nbsp;&nbsp; property DragMode: TDragMode; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDragDrop: TDragDropEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDragOver: TDragOverEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnEndDrag: TEndDragEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseDown: TMouseEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseMove: TMouseMoveEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseUp: TMouseEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnStartDrag: TStartDragEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseEnter: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseLeave: TNotifyEvent; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TPaintBox = class(TGraphicControl)<br /> &nbsp;&nbsp;&nbsp; property Canvas: TCanvas; read;<br /> &nbsp;&nbsp;&nbsp; property Color: TColor; read write;<br /> &nbsp;&nbsp;&nbsp; property Font: TFont; read write;<br /> &nbsp;&nbsp;&nbsp; property ParentColor: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property ParentFont: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property OnClick: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDblClick: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnPaint: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property DragCursor: Longint; read write;<br /> &nbsp;&nbsp;&nbsp; property DragMode: TDragMode; read write;<br /> &nbsp;&nbsp;&nbsp; property PopupMenu: TPopupMenu; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDragDrop: TDragDropEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDragOver: TDragOverEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnEndDrag: TEndDragEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseDown: TMouseEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseMove: TMouseMoveEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseUp: TMouseEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnStartDrag: TStartDragEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseEnter: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseLeave: TNotifyEvent; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TCustomPanel = class(TCustomControl)<br /> &nbsp; end;<br /> <br /> &nbsp; TPanelBevel = (bvNone, bvLowered, bvRaised, bvSpace);<br /> <br /> &nbsp; TBevelWidth = Longint;<br /> <br /> &nbsp; TBorderWidth = Longint;<br /> <br /> &nbsp; TSectionEvent = procedure(Sender: TObject; ASection, AWidth: Integer);<br /> <br /> &nbsp; TPanel = class(TCustomPanel)<br /> &nbsp;&nbsp;&nbsp; property Alignment: TAlignment; read write;<br /> &nbsp;&nbsp;&nbsp; property BevelInner: TPanelBevel; read write;<br /> &nbsp;&nbsp;&nbsp; property BevelOuter: TPanelBevel; read write;<br /> &nbsp;&nbsp;&nbsp; property BevelWidth: TBevelWidth; read write;<br /> &nbsp;&nbsp;&nbsp; property BorderWidth: TBorderWidth; read write;<br /> &nbsp;&nbsp;&nbsp; property BorderStyle: TBorderStyle; read write;<br /> &nbsp;&nbsp;&nbsp; property Caption: String; read write;<br /> &nbsp;&nbsp;&nbsp; property Color: TColor; read write;<br /> &nbsp;&nbsp;&nbsp; property Font: TFont; read write;<br /> &nbsp;&nbsp;&nbsp; property ParentColor: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property ParentFont: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property OnClick: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDblClick: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnEnter: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnExit: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property DragCursor: Longint; read write;<br /> &nbsp;&nbsp;&nbsp; property DragMode: TDragMode; read write;<br /> &nbsp;&nbsp;&nbsp; property Ctl3D: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Locked: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property ParentCtl3D: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property PopupMenu: TPopupMenu; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDragDrop: TDragDropEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDragOver: TDragOverEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnEndDrag: TEndDragEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseDown: TMouseEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseMove: TMouseMoveEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseUp: TMouseEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnResize: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnStartDrag: TStartDragEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property ParentBackground: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseEnter: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseLeave: TNotifyEvent; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; THeaderSectionStyle = (hsText, hsOwnerDraw);<br /> <br /> &nbsp; THeaderSection = class(TCollectionItem)<br /> &nbsp;&nbsp;&nbsp; property Left: Integer; read;<br /> &nbsp;&nbsp;&nbsp; property Right: Integer; read;<br /> &nbsp;&nbsp;&nbsp; property Alignment: TAlignment; read write;<br /> &nbsp;&nbsp;&nbsp; property AllowClick: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property MaxWidth: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property MinWidth: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property Style: THeaderSectionStyle; read write;<br /> &nbsp;&nbsp;&nbsp; property Text: string; read write;<br /> &nbsp;&nbsp;&nbsp; property Width: Integer; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; THeaderSections = class(TCollection)<br /> &nbsp;&nbsp;&nbsp; constructor Create(HeaderControl: THeaderControl);<br /> &nbsp;&nbsp;&nbsp; function Add: THeaderSection;<br /> &nbsp;&nbsp;&nbsp; Property Items[Index: Integer]: THeaderSection; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TSectionTrackState = (tsTrackBegin, tsTrackMove, tsTrackEnd);<br /> <br /> &nbsp; TDrawSectionEvent = procedure(HeaderControl: THeaderControl; Section: THeaderSection; const Rect: TRect; Pressed: Boolean);<br /> <br /> &nbsp; TSectionNotifyEvent = procedure(HeaderControl: THeaderControl; Section: THeaderSection);<br /> <br /> &nbsp; TSectionTrackEvent = procedure(HeaderControl: THeaderControl; Section: THeaderSection; Width: Integer; State: TSectionTrackState);<br /> <br /> &nbsp; THeaderControl = class(TWinControl)<br /> &nbsp;&nbsp;&nbsp; property Canvas: TCanvas; read;<br /> &nbsp;&nbsp;&nbsp; property Sections: THeaderSections; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDrawSection: TDrawSectionEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnResize: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnSectionClick: TSectionNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnSectionResize: TSectionNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnSectionTrack: TSectionTrackEvent; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; HTreeItem = Longword;<br /> <br /> &nbsp; TTVCompare = function(lParam1, lParam2, lParamSort: Longint): Integer;<br /> <br /> &nbsp; TNodeAttachMode = (naAdd, naAddFirst, naAddChild, naAddChildFirst, naInsert);<br /> <br /> &nbsp; THitTest = (htAbove, htBelow, htNowhere, htOnItem, htOnButton, htOnIcon, htOnIndent, <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; htOnLabel, htOnRight, htOnStateIcon, htToLeft, htToRight);<br /> <br /> &nbsp; THitTests = set of THitTest;<br /> <br /> &nbsp; TSortType = (stNone, stData, stText, stBoth);&nbsp;&nbsp;&nbsp; <br /> <br /> &nbsp; TResType = (rtBitmap, rtCursor, rtIcon);<br /> <br /> &nbsp; HImageList = THandle;<br /> <br /> &nbsp; TDrawingStyle = (dsFocus, dsSelected, dsNormal, dsTransparent);<br /> <br /> &nbsp; TImageType = (itImage, itMask);<br /> <br /> &nbsp; TTreeNode = class(TPersistent)<br /> &nbsp;&nbsp;&nbsp; constructor Create(AOwner: TTreeNodes);<br /> &nbsp;&nbsp;&nbsp; function AlphaSort: Boolean;<br /> &nbsp;&nbsp;&nbsp; procedure Collapse(Recurse: Boolean);<br /> &nbsp;&nbsp;&nbsp; function CustomSort(SortProc: TTVCompare; Data: Longint): Boolean;<br /> &nbsp;&nbsp;&nbsp; procedure Delete;<br /> &nbsp;&nbsp;&nbsp; procedure DeleteChildren;<br /> &nbsp;&nbsp;&nbsp; function DisplayRect(TextOnly: Boolean): TRect;<br /> &nbsp;&nbsp;&nbsp; function EditText: Boolean;<br /> &nbsp;&nbsp;&nbsp; procedure EndEdit(Cancel: Boolean);<br /> &nbsp;&nbsp;&nbsp; procedure Expand(Recurse: Boolean);<br /> &nbsp;&nbsp;&nbsp; function GetFirstChild: TTreeNode;<br /> &nbsp;&nbsp;&nbsp; function GetHandle: HWND;<br /> &nbsp;&nbsp;&nbsp; function GetLastChild: TTreeNode;<br /> &nbsp;&nbsp;&nbsp; function GetNext: TTreeNode;<br /> &nbsp;&nbsp;&nbsp; function GetNextChild(Value: TTreeNode): TTreeNode;<br /> &nbsp;&nbsp;&nbsp; function GetNextSibling: TTreeNode;<br /> &nbsp;&nbsp;&nbsp; function GetNextVisible: TTreeNode;<br /> &nbsp;&nbsp;&nbsp; function GetPrev: TTreeNode;<br /> &nbsp;&nbsp;&nbsp; function GetPrevChild(Value: TTreeNode): TTreeNode;<br /> &nbsp;&nbsp;&nbsp; function GetPrevSibling: TTreeNode;<br /> &nbsp;&nbsp;&nbsp; function GetPrevVisible: TTreeNode;<br /> &nbsp;&nbsp;&nbsp; function HasAsParent(Value: TTreeNode): Boolean;<br /> &nbsp;&nbsp;&nbsp; function IndexOf(Value: TTreeNode): Integer;<br /> &nbsp;&nbsp;&nbsp; procedure MakeVisible;<br /> &nbsp;&nbsp;&nbsp; procedure MoveTo(Destination: TTreeNode; Mode: TNodeAttachMode);<br /> &nbsp;&nbsp;&nbsp; property AbsoluteIndex: Integer; read;<br /> &nbsp;&nbsp;&nbsp; property Count: Integer; read;<br /> &nbsp;&nbsp;&nbsp; property Cut: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Data: TObject; read write;<br /> &nbsp;&nbsp;&nbsp; property Deleting: Boolean; read;<br /> &nbsp;&nbsp;&nbsp; property Focused: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property DropTarget: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Selected: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Expanded: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Handle: HWND; read;<br /> &nbsp;&nbsp;&nbsp; property HasChildren: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property ImageIndex: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property Index: Integer; read;<br /> &nbsp;&nbsp;&nbsp; property IsVisible: Boolean; read;<br /> &nbsp;&nbsp;&nbsp; property Item[Index: Integer]: TTreeNode; read write;<br /> &nbsp;&nbsp;&nbsp; property ItemId: HTreeItem; read;<br /> &nbsp;&nbsp;&nbsp; property Level: Integer; read;<br /> &nbsp;&nbsp;&nbsp; property OverlayIndex: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property Parent: TTreeNode; read;<br /> &nbsp;&nbsp;&nbsp; property SelectedIndex: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property StateIndex: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property Text: String; read write;<br /> &nbsp;&nbsp;&nbsp; property Owner: TTreeNodes; read;<br /> &nbsp;&nbsp;&nbsp; property TreeView: TCustomTreeView; read;<br /> &nbsp; end;<br /> <br /> &nbsp; TTreeNodes = class(TPersistent)<br /> &nbsp;&nbsp;&nbsp; constructor Create(AOwner: TCustomTreeView);<br /> &nbsp;&nbsp;&nbsp; function AddChildFirst(Node: TTreeNode; const S: String): TTreeNode;<br /> &nbsp;&nbsp;&nbsp; function AddChild(Node: TTreeNode; const S: String): TTreeNode;<br /> &nbsp;&nbsp;&nbsp; function AddChildObjectFirst(Node: TTreeNode; const S: String; Obj: TObject): TTreeNode;<br /> &nbsp;&nbsp;&nbsp; function AddChildObject(Node: TTreeNode; const S: String; Obj: TObject): TTreeNode;<br /> &nbsp;&nbsp;&nbsp; function AddFirst(Node: TTreeNode; const S: String): TTreeNode;<br /> &nbsp;&nbsp;&nbsp; function Add(Node: TTreeNode; const S: String): TTreeNode;<br /> &nbsp;&nbsp;&nbsp; function AddObjectFirst(Node: TTreeNode; const S: String; Obj: TObject): TTreeNode;<br /> &nbsp;&nbsp;&nbsp; function AddObject(Node: TTreeNode; const S: String; Obj: TObject): TTreeNode;<br /> &nbsp;&nbsp;&nbsp; procedure BeginUpdate;<br /> &nbsp;&nbsp;&nbsp; procedure Clear;<br /> &nbsp;&nbsp;&nbsp; procedure Delete(Node: TTreeNode);<br /> &nbsp;&nbsp;&nbsp; procedure EndUpdate;<br /> &nbsp;&nbsp;&nbsp; function GetFirstNode: TTreeNode;<br /> &nbsp;&nbsp;&nbsp; function GetNode(ItemId: HTreeItem): TTreeNode;<br /> &nbsp;&nbsp;&nbsp; function Insert(Node: TTreeNode; const S: String): TTreeNode;<br /> &nbsp;&nbsp;&nbsp; function InsertObject(Node: TTreeNode; const S: String; Obj: TObject): TTreeNode;<br /> &nbsp;&nbsp;&nbsp; property Count: Integer; read;<br /> &nbsp;&nbsp;&nbsp; property Handle: HWND; read;<br /> &nbsp;&nbsp;&nbsp; property Item[Index: Integer]: TTreeNode; read;<br /> &nbsp;&nbsp;&nbsp; property Owner: TCustomTreeView; read;<br /> &nbsp; end;<br /> <br /> &nbsp; TTVChangingEvent = procedure(Sender: TObject; Node: TTreeNode; var AllowChange: Boolean);<br /> <br /> &nbsp; TTVChangedEvent = procedure(Sender: TObject; Node: TTreeNode);<br /> <br /> &nbsp; TTVEditingEven = procedure(Sender: TObject; Node: TTreeNode; var AllowEdit: Boolean);<br /> <br /> &nbsp; TTVEditedEvent = procedure(Sender: TObject; Node: TTreeNode; var S: String);<br /> <br /> &nbsp; TTVExpandingEvent = procedure(Sender: TObject; Node: TTreeNode; var AllowExpansion: Boolean);<br /> <br /> &nbsp; TTVCollapsingEvent = procedure(Sender: TObject; Node: TTreeNode; var AllowCollapse: Boolean);<br /> <br /> &nbsp; TTVExpandedEvent = procedure(Sender: TObject; Node: TTreeNode);<br /> <br /> &nbsp; TTVCompareEvent = procedure(Sender: TObject; Node1, Node2: TTreeNode; Data: Integer; var Compare: Integer);<br /> <br /> &nbsp; TCustomImageList = class(TComponent)<br /> &nbsp;&nbsp;&nbsp; Constructor CreateSize(AWidth, AHeight: Integer);<br /> &nbsp;&nbsp;&nbsp; function Add(Image, Mask: TBitmap): Integer;<br /> &nbsp;&nbsp;&nbsp; function AddIcon(Image: TIcon): Integer;<br /> &nbsp;&nbsp;&nbsp; procedure AddImages(Value: TCustomImageList);<br /> &nbsp;&nbsp;&nbsp; function AddMasked(Image: TBitmap; MaskColor: TColor): Integer;<br /> &nbsp;&nbsp;&nbsp; procedure Clear;<br /> &nbsp;&nbsp;&nbsp; procedure Delete(Index: Integer);<br /> &nbsp;&nbsp;&nbsp; procedure Draw(Canvas: TCanvas; X, Y, Index: Integer);<br /> &nbsp;&nbsp;&nbsp; procedure DrawOverlay(Canvas: TCanvas; X, Y: Integer; ImageIndex: Integer; Overlay: Byte);<br /> &nbsp;&nbsp;&nbsp; function FileLoad(ResType: TResType; Name: String; MaskColor: TColor): Boolean;<br /> &nbsp;&nbsp;&nbsp; procedure GetBitmap(Index: Integer; Image: TBitmap);<br /> &nbsp;&nbsp;&nbsp; function GetHotSpot: TPoint;<br /> &nbsp;&nbsp;&nbsp; procedure GetIcon(Index: Integer; Image: TIcon);<br /> &nbsp;&nbsp;&nbsp; function GetImageBitmap: HBITMAP;<br /> &nbsp;&nbsp;&nbsp; function GetMaskBitmap: HBITMAP;<br /> &nbsp;&nbsp;&nbsp; function GetResource(ResType: TResType; Name: String; Width: Integer; LoadFlags: TLoadResources; MaskColor: TColor): Boolean;<br /> &nbsp;&nbsp;&nbsp; function HandleAllocated: Boolean;<br /> &nbsp;&nbsp;&nbsp; procedure Insert(Index: Integer; Image, Mask: TBitmap);<br /> &nbsp;&nbsp;&nbsp; procedure InsertIcon(Index: Integer; Image: TIcon);<br /> &nbsp;&nbsp;&nbsp; procedure InsertMasked(Index: Integer; Image: TBitmap; MaskColor: TColor);<br /> &nbsp;&nbsp;&nbsp; procedure Move(CurIndex, NewIndex: Integer);<br /> &nbsp;&nbsp;&nbsp; function Overlay(ImageIndex: Integer; Overlay: TOverlay): Boolean;<br /> &nbsp;&nbsp;&nbsp; function ResourceLoad(ResType: TResType; Name: String; MaskColor: TColor): Boolean;<br /> &nbsp;&nbsp;&nbsp; procedure Replace(Index: Integer; Image, Mask: TBitmap);<br /> &nbsp;&nbsp;&nbsp; procedure ReplaceIcon(Index: Integer; Image: TIcon);<br /> &nbsp;&nbsp;&nbsp; procedure ReplaceMasked(Index: Integer; NewImage: TBitmap; MaskColor: TColor);<br /> &nbsp;&nbsp;&nbsp; property Count: Integer; read;<br /> &nbsp;&nbsp;&nbsp; property Handle: HImageList; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TImageList = class(TCustomImageList)<br /> &nbsp;&nbsp;&nbsp; property BlendColor: TColor; read write;<br /> &nbsp;&nbsp;&nbsp; property BkColor: TColor; read write;<br /> &nbsp;&nbsp;&nbsp; property AllocBy: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property DrawingStyle: TDrawingStyle; read write;<br /> &nbsp;&nbsp;&nbsp; property Height: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property ImageType: TImageType; read write;<br /> &nbsp;&nbsp;&nbsp; property Masked: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property OnChange: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property ShareImages: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Width: Integer; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TCustomTreeView = class(TWinControl)<br /> &nbsp;&nbsp;&nbsp; function AlphaSort: Boolean;<br /> &nbsp;&nbsp;&nbsp; function CustomSort(SortProc: TTVCompare; Data: Longint): Boolean;<br /> &nbsp;&nbsp;&nbsp; procedure FullCollapse;<br /> &nbsp;&nbsp;&nbsp; procedure FullExpand;<br /> &nbsp;&nbsp;&nbsp; function GetHitTestInfoAt(X, Y: Integer): THitTests;<br /> &nbsp;&nbsp;&nbsp; function GetNodeAt(X, Y: Integer): TTreeNode;<br /> &nbsp;&nbsp;&nbsp; function IsEditing: Boolean;<br /> &nbsp;&nbsp;&nbsp; procedure LoadFromFile(const FileName: String);<br /> &nbsp;&nbsp;&nbsp; procedure LoadFromStream(Stream: TStream);<br /> &nbsp;&nbsp;&nbsp; procedure SaveToFile(const FileName: String);<br /> &nbsp;&nbsp;&nbsp; procedure SaveToStream(Stream: TStream);<br /> &nbsp;&nbsp;&nbsp; property DropTarget: TTreeNode; read write;<br /> &nbsp;&nbsp;&nbsp; property Selected: TTreeNode; read write;<br /> &nbsp;&nbsp;&nbsp; property TopItem: TTreeNode; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TTreeView = class(TCustomTreeView)<br /> &nbsp;&nbsp;&nbsp; property ShowButtons: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property BorderStyle: TBorderStyle; read write;<br /> &nbsp;&nbsp;&nbsp; property DragCursor: TCursor; read write;<br /> &nbsp;&nbsp;&nbsp; property ShowLines: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property ShowRoot: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property ReadOnly: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property DragMode: TDragMode; read write;<br /> &nbsp;&nbsp;&nbsp; property HideSelection: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Indent: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property Items: TTreeNodes; read write;<br /> &nbsp;&nbsp;&nbsp; property OnEditing: TTVEditingEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnEdited: TTVEditedEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnExpanding: TTVExpandingEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnExpanded: TTVExpandedEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnCollapsing: TTVCollapsingEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnCompare: TTVCompareEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnCollapsed: TTVExpandedEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnChanging: TTVChangingEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnChange: TTVChangedEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDeletion: TTVExpandedEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnGetImageIndex: TTVExpandedEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnGetSelectedIndex: TTVExpandedEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property Font: TFont; read write;<br /> &nbsp;&nbsp;&nbsp; property Color: TColor; read write;<br /> &nbsp;&nbsp;&nbsp; property ParentColor: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property ParentCtl3D: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Ctl3D: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property SortType: TSortType; read write;<br /> &nbsp;&nbsp;&nbsp; property OnClick: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnEnter: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnExit: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDragDrop: TDragDropEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDragOver: TDragOverEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnStartDrag: TStartDragEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnEndDrag: TEndDragEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseDown: TMouseEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseMove: TMouseMoveEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseUp: TMouseEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDblClick: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnKeyDown: TKeyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnKeyPress: TKeyPressEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnKeyUp: TKeyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property PopupMenu: TPopupMenu; read write;<br /> &nbsp;&nbsp;&nbsp; property ParentFont: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Images: TImageList; read write;<br /> &nbsp;&nbsp;&nbsp; property StateImages: TImageList; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseEnter: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseLeave: TNotifyEvent; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TDisplayCode = (drBounds, drIcon, drLabel, drSelectBounds);<br /> <br /> &nbsp; TListItem = class(TPersistent)<br /> &nbsp;&nbsp;&nbsp; constructor Create(AOwner: TListItems);<br /> &nbsp;&nbsp;&nbsp; procedure CancelEdit;<br /> &nbsp;&nbsp;&nbsp; procedure Delete;<br /> &nbsp;&nbsp;&nbsp; function DisplayRect(Code: TDisplayCode): TRect;<br /> &nbsp;&nbsp;&nbsp; function EditCaption: Boolean;<br /> &nbsp;&nbsp;&nbsp; function GetPosition: TPoint;<br /> &nbsp;&nbsp;&nbsp; procedure MakeVisible(PartialOK: Boolean);<br /> &nbsp;&nbsp;&nbsp; procedure Update;<br /> &nbsp;&nbsp;&nbsp; procedure SetPosition(const Value: TPoint);<br /> &nbsp;&nbsp;&nbsp; property Caption: String; read write;<br /> &nbsp;&nbsp;&nbsp; property Cut: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Data: TObject; read write;<br /> &nbsp;&nbsp;&nbsp; property DropTarget: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Focused: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Handle: HWND; read;<br /> &nbsp;&nbsp;&nbsp; property ImageIndex: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property Index: Integer; read;<br /> &nbsp;&nbsp;&nbsp; property Left: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property OverlayIndex: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property Selected: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property StateIndex: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property SubItems: TStrings; read write;<br /> &nbsp;&nbsp;&nbsp; property Top: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property Owner: TListItems; read;<br /> &nbsp;&nbsp;&nbsp; property ListView: TCustomListView; read;<br /> &nbsp; end;<br /> <br /> &nbsp; TListItems = class(TPersistent)<br /> &nbsp;&nbsp;&nbsp; constructor Create(AOwner: TCustomListView);<br /> &nbsp;&nbsp;&nbsp; function Add: TListItem;<br /> &nbsp;&nbsp;&nbsp; procedure BeginUpdate;<br /> &nbsp;&nbsp;&nbsp; procedure Clear;<br /> &nbsp;&nbsp;&nbsp; procedure Delete(Index: Integer);<br /> &nbsp;&nbsp;&nbsp; procedure EndUpdate;<br /> &nbsp;&nbsp;&nbsp; function IndexOf(Value: TListItem): Integer;<br /> &nbsp;&nbsp;&nbsp; function Insert(Index: Integer): TListItem;<br /> &nbsp;&nbsp;&nbsp; property Count: Integer; read;<br /> &nbsp;&nbsp;&nbsp; property Handle: HWND; read;<br /> &nbsp;&nbsp;&nbsp; property Item[Index: Integer]: TListItem; read write;<br /> &nbsp;&nbsp;&nbsp; property Owner: TCustomListView; read;<br /> &nbsp; end;<br /> <br /> &nbsp; TListColumn = class(TCollectionItem)<br /> &nbsp;&nbsp;&nbsp; property WidthType: Integer; read;<br /> &nbsp;&nbsp;&nbsp; property Alignment: TAlignment; read write;<br /> &nbsp;&nbsp;&nbsp; property Caption: String; read write;<br /> &nbsp;&nbsp;&nbsp; property Width: Integer; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TListColumns = class(TCollection)<br /> &nbsp;&nbsp;&nbsp; constructor Create(AOwner: TCustomListView);<br /> &nbsp;&nbsp;&nbsp; function Add: TListColumn;<br /> &nbsp;&nbsp;&nbsp; property Items[Index: Integer]: TListColumn; read write;<br /> &nbsp;&nbsp;&nbsp; property Owner: TCustomListView; read;<br /> &nbsp; end;<br /> <br /> &nbsp; TIconArrangement = (iaTop, iaLeft);<br /> <br /> &nbsp; TIconOptions = class(TPersistent)<br /> &nbsp;&nbsp;&nbsp; constructor Create(AOwner: TCustomListView);<br /> &nbsp;&nbsp;&nbsp; property Arrangement: TIconArrangement; read write;<br /> &nbsp;&nbsp;&nbsp; property AutoArrange: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property WrapText: Boolean; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TListArrangement = (arAlignBottom, arAlignLeft, arAlignRight, arAlignTop, arDefault, arSnapToGrid);<br /> <br /> &nbsp; TSearchDirection = (sdLeft, sdRight, sdAbove, sdBelow, sdAll);<br /> <br /> &nbsp; TViewStyle = (vsIcon, vsSmallIcon, vsList, vsReport);<br /> <br /> &nbsp; TItemState = (isNone, isCut, isDropHilited, isFocused, isSelected);<br /> <br /> &nbsp; TItemStates = set of TItemState;<br /> <br /> &nbsp; TItemChange = (ctText, ctImage, ctState);<br /> <br /> &nbsp; TLVCompare = function(lParam1, lParam2, lParamSort: Integer): Integer;<br /> <br /> &nbsp; TLVDeletedEvent = procedure(Sender: TObject; Item: TListItem);<br /> <br /> &nbsp; TLVEditingEvent = procedure(Sender: TObject; Item: TListItem; var AllowEdit: Boolean);<br /> <br /> &nbsp; TLVEditedEvent = procedure(Sender: TObject; Item: TListItem; var S: String);<br /> <br /> &nbsp; TLVChangeEvent = procedure(Sender: TObject; Item: TListItem; Change: TItemChange);<br /> <br /> &nbsp; TLVChangingEvent = procedure(Sender: TObject; Item: TListItem; Change: TItemChange; var AllowChange: Boolean);<br /> <br /> &nbsp; TLVColumnClickEvent = procedure(Sender: TObject; Column: TListColumn);<br /> <br /> &nbsp; TLVCompareEvent = procedure(Sender: TObject; Item1, Item2: TListItem; Data: Integer; var Compare: Integer);<br /> <br /> &nbsp; TCustomListView = class(TWinControl)<br /> &nbsp;&nbsp;&nbsp; function AlphaSort: Boolean;<br /> &nbsp;&nbsp;&nbsp; procedure Arrange(Code: TListArrangement);<br /> &nbsp;&nbsp;&nbsp; function FindCaption(StartIndex: Integer; Value: String; Partial, Inclusive, Wrap: Boolean): TListItem;<br /> &nbsp;&nbsp;&nbsp; function FindData(StartIndex: Integer; Value: TObject; Inclusive, Wrap: Boolean): TListItem;<br /> &nbsp;&nbsp;&nbsp; function GetItemAt(X, Y: Integer): TListItem;<br /> &nbsp;&nbsp;&nbsp; function GetNearestItem(Point: TPoint; Direction: TSearchDirection): TListItem;<br /> &nbsp;&nbsp;&nbsp; function GetNextItem(StartItem: TListItem; Direction: TSearchDirection; States: TItemStates): TListItem;<br /> &nbsp;&nbsp;&nbsp; function GetSearchString: String;<br /> &nbsp;&nbsp;&nbsp; function IsEditing: Boolean;<br /> &nbsp;&nbsp;&nbsp; procedure Scroll(DX, DY: Integer);<br /> &nbsp;&nbsp;&nbsp; property Column[Index: Integer]: TListColumn; read;<br /> &nbsp;&nbsp;&nbsp; property DropTarget: TListItem; read write;<br /> &nbsp;&nbsp;&nbsp; property ItemFocused: TListItem; read write;<br /> &nbsp;&nbsp;&nbsp; property SelCount: Integer; read;<br /> &nbsp;&nbsp;&nbsp; property Selected: TListItem; read write;<br /> &nbsp;&nbsp;&nbsp; function CustomSort(SortProc: TLVCompare; lParam: Longint): Boolean;<br /> &nbsp;&nbsp;&nbsp; function StringWidth(S: String): Integer;<br /> &nbsp;&nbsp;&nbsp; procedure UpdateItems(FirstIndex, LastIndex: Integer);<br /> &nbsp;&nbsp;&nbsp; property TopItem: TListItem; read;<br /> &nbsp;&nbsp;&nbsp; property ViewOrigin: TPoint; read;<br /> &nbsp;&nbsp;&nbsp; property VisibleRowCount: Integer; read;<br /> &nbsp;&nbsp;&nbsp; property BoundingRect: TRect; read;<br /> &nbsp; end;<br /> <br /> &nbsp; TListView = class(TCustomListView)<br /> &nbsp;&nbsp;&nbsp; property BorderStyle: TBorderStyle; read write;<br /> &nbsp;&nbsp;&nbsp; property Color: TColor; read write;<br /> &nbsp;&nbsp;&nbsp; property ColumnClick: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property OnClick: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDblClick: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property Columns: TListColumns; read write;<br /> &nbsp;&nbsp;&nbsp; property Ctl3D: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property DragMode: TDragMode; read write;<br /> &nbsp;&nbsp;&nbsp; property ReadOnly: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Font: TFont; read write;<br /> &nbsp;&nbsp;&nbsp; property HideSelection: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property IconOptions: TIconOptions; read write;<br /> &nbsp;&nbsp;&nbsp; property Items: TListItems; read write;<br /> &nbsp;&nbsp;&nbsp; property AllocBy: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property MultiSelect: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property OnChange: TLVChangeEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnChanging: TLVChangingEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnColumnClick: TLVColumnClickEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnCompare: TLVCompareEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDeletion: TLVDeletedEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnEdited: TLVEditedEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnEditing: TLVEditingEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnEnter: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnExit: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnInsert: TLVDeletedEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDragDrop: TDragDropEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDragOver: TDragOverEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property DragCursor: TCursor; read write;<br /> &nbsp;&nbsp;&nbsp; property OnStartDrag: TStartDragEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnEndDrag: TEndDragEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseDown: TMouseEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseMove: TMouseMoveEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseUp: TMouseEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property PopupMenu: TPopupMenu; read write;<br /> &nbsp;&nbsp;&nbsp; property ShowColumnHeaders: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property SortType: TSortType; read write;<br /> &nbsp;&nbsp;&nbsp; property ViewStyle: TViewStyle; read write;<br /> &nbsp;&nbsp;&nbsp; property OnKeyDown: TKeyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnKeyPress: TKeyPressEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnKeyUp: TKeyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property LargeImages: TImageList; read write;<br /> &nbsp;&nbsp;&nbsp; property SmallImages: TImageList; read write;<br /> &nbsp;&nbsp;&nbsp; property StateImages: TImageList; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseEnter: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseLeave: TNotifyEvent; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TStatusPanelStyle = (psText, psOwnerDraw);<br /> <br /> &nbsp; TStatusPanelBevel = (pbNone, pbLowered, pbRaised);<br /> <br /> &nbsp; TStatusPanel = class(TCollectionItem)<br /> &nbsp;&nbsp;&nbsp; property Alignment: TAlignment; read write;<br /> &nbsp;&nbsp;&nbsp; property Bevel: TStatusPanelBevel; read write;<br /> &nbsp;&nbsp;&nbsp; property Style: TStatusPanelStyle; read write;<br /> &nbsp;&nbsp;&nbsp; property Text: string; read write;<br /> &nbsp;&nbsp;&nbsp; property Width: Integer; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TStatusPanels = class(TCollection)<br /> &nbsp;&nbsp;&nbsp; constructor Create(StatusBar: TStatusBar);<br /> &nbsp;&nbsp;&nbsp; function Add: TStatusPanel;<br /> &nbsp;&nbsp;&nbsp; property Items[Index: Integer]: TStatusPanel; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TDrawPanelEvent = procedure(StatusBar: TStatusBar; Panel: TStatusPanel; const Rect: TRect);<br /> <br /> &nbsp; TStatusBar = class(TWinControl)<br /> &nbsp;&nbsp;&nbsp; property Canvas: TCanvas; read;<br /> &nbsp;&nbsp;&nbsp; property Panels: TStatusPanels; read write;<br /> &nbsp;&nbsp;&nbsp; property SimplePanel: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property SimpleText: string; read write;<br /> &nbsp;&nbsp;&nbsp; property SizeGrip: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDrawPanel: TDrawPanelEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnResize: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseDown: TMouseEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseMove: TMouseMoveEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseUp: TMouseEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDragDrop: TDragDropEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDragOver: TDragOverEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property DragCursor: TCursor; read write;<br /> &nbsp;&nbsp;&nbsp; property OnStartDrag: TStartDragEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnEndDrag: TEndDragEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnClick: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDblClick: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property Font: TFont; read write;<br /> &nbsp;&nbsp;&nbsp; property Color: TColor; read write;<br /> &nbsp;&nbsp;&nbsp; property ParentColor: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property ParentFont: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property PopupMenu: TPopupMenu; read write;<br /> &nbsp;&nbsp;&nbsp; property DragMode: TDragMode; read write;<br /> &nbsp;&nbsp;&nbsp; property ThemeBackground: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseEnter: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseLeave: TNotifyEvent; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TNewStaticText = class(TWinControl)<br /> &nbsp;&nbsp;&nbsp; function AdjustHeight: Integer;<br /> &nbsp;&nbsp;&nbsp; property AutoSize: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Caption: String; read write;<br /> &nbsp;&nbsp;&nbsp; property Color: TColor; read write;<br /> &nbsp;&nbsp;&nbsp; property FocusControl: TWinControl; read write;<br /> &nbsp;&nbsp;&nbsp; property Font: TFont; read write;<br /> &nbsp;&nbsp;&nbsp; property ParentColor: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property ParentFont: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property ShowAccelChar: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property WordWrap: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property OnClick: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDblClick: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property DragCursor: Longint; read write;<br /> &nbsp;&nbsp;&nbsp; property DragMode: TDragMode; read write;<br /> &nbsp;&nbsp;&nbsp; property PopupMenu: TPopupMenu; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDragDrop: TDragDropEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDragOver: TDragOverEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnEndDrag: TEndDragEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseDown: TMouseEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseMove: TMouseMoveEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseUp: TMouseEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnStartDrag: TStartDragEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseEnter: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseLeave: TNotifyEvent; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TCheckItemOperation = (coUncheck, coCheck, coCheckWithChildren);<br /> <br /> &nbsp; TItemArea = (iaOther, iaButton, iaCheckmark, iaItem, iaSubItem);<br /> &nbsp; TItemMouseMoveEvent = procedure(Sender: TObject; X, Y: Integer; Index: Integer; Area: TItemArea);<br /> <br /> &nbsp; TNewCheckListBox = class(TCustomListBox)<br /> &nbsp;&nbsp;&nbsp; function AddCheckBox(const ACaption, ASubItem: String; ALevel: Byte; AChecked, AEnabled, AHasInternalChildren, ACheckWhenParentChecked: Boolean; AObject: TObject): Integer;<br /> &nbsp;&nbsp;&nbsp; function AddGroup(ACaption, ASubItem: String; ALevel: Byte; AObject: TObject): Integer;<br /> &nbsp;&nbsp;&nbsp; function AddRadioButton(const ACaption, ASubItem: String; ALevel: Byte; AChecked, AEnabled: Boolean; AObject: TObject): Integer;<br /> &nbsp;&nbsp;&nbsp; function AddCheckBoxEx(const ACaption, ASubItem: String; ALevel: Byte; AChecked, AEnabled, AHasInternalChildren, ACheckWhenParentChecked: Boolean; AObject: TObject; AExpanded: Boolean): Integer;<br /> &nbsp;&nbsp;&nbsp; function AddGroupEx(ACaption, ASubItem: String; ALevel: Byte; AObject: TObject; AExpanded: Boolean): Integer;<br /> &nbsp;&nbsp;&nbsp; function AddRadioButtonEx(const ACaption, ASubItem: String; ALevel: Byte; AChecked, AEnabled: Boolean; AObject: TObject; AExpanded: Boolean): Integer;<br /> &nbsp;&nbsp;&nbsp; procedure LoadBtnBmpFromBitmap(Bmp: TBitmap);<br /> &nbsp;&nbsp;&nbsp; procedure LoadBtnBmpFromFile(FileName: String);<br /> &nbsp;&nbsp;&nbsp; procedure LoadBGBmpFromBitmap(Bmp: TBitmap; OffsetX, OffsetY: Integer);<br /> &nbsp;&nbsp;&nbsp; procedure LoadBGBmpFromFile(FileName: String; OffsetX, OffsetY: Integer);<br /> &nbsp;&nbsp;&nbsp; property SubItemFontStyle[Index: Integer]: TFontStyles; read write;<br /> &nbsp;&nbsp;&nbsp; property ItemFontStyle[Index: Integer]: TFontStyles; read write;<br /> &nbsp;&nbsp;&nbsp; property TreeViewStyle: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Showroot: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property ItemCount: Integer; read;<br /> &nbsp;&nbsp;&nbsp; property ItemHeightFixed: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property OnItemMouseMove: TItemMouseMoveEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property AbsItemIndex: Integer; read;<br /> &nbsp;&nbsp;&nbsp; property ItemExpanded[Index: Integer]: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property HideSelection: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; function CheckItem(const Index: Integer; const AOperation: TCheckItemOperation): Boolean;<br /> &nbsp;&nbsp;&nbsp; property Checked[Index: Integer]: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property State[Index: Integer]: TCheckBoxState; read;<br /> &nbsp;&nbsp;&nbsp; property ItemCaption[Index: Integer]: String; read write;<br /> &nbsp;&nbsp;&nbsp; property ItemEnabled[Index: Integer]: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property ItemLevel[Index: Integer]: Byte; read;<br /> &nbsp;&nbsp;&nbsp; property ItemObject[Index: Integer]: TObject; read write;<br /> &nbsp;&nbsp;&nbsp; property ItemSubItem[Index: Integer]: String; read write;<br /> &nbsp;&nbsp;&nbsp; property AllowGrayed: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Flat: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property MinItemHeight: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property Offset: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property OnClickCheck: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property BorderStyle: TBorderStyle; read write;<br /> &nbsp;&nbsp;&nbsp; property Color: TColor; read write;<br /> &nbsp;&nbsp;&nbsp; property Font: TFont; read write;<br /> &nbsp;&nbsp;&nbsp; property ParentColor: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property ParentFont: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Sorted: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property OnClick: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDblClick: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnKeyDown: TKeyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnKeyPress: TKeyPressEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnKeyUp: TKeyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property ShowLines: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property WantTabs: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property OnEnter: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnExit: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property Ctl3D: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property DragCursor: Longint; read write;<br /> &nbsp;&nbsp;&nbsp; property DragMode: TDragMode; read write;<br /> &nbsp;&nbsp;&nbsp; property ParentCtl3D: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property PopupMenu: TPopupMenu; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDragDrop: TDragDropEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDragOver: TDragOverEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnEndDrag: TEndDragEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseDown: TMouseEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseMove: TMouseMoveEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseUp: TMouseEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnStartDrag: TStartDragEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseEnter: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseLeave: TNotifyEvent; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TNewProgressBarState = (npbsNormal, npbsError, npbsPaused);<br /> <br /> &nbsp; TNewProgressBarStyle = (npbstNormal, npbstMarquee);<br /> <br /> &nbsp; TNewProgressBar = class(TWinControl)<br /> &nbsp;&nbsp;&nbsp; property Min: Longint; read write;<br /> &nbsp;&nbsp;&nbsp; property Max: Longint; read write;<br /> &nbsp;&nbsp;&nbsp; property Position: Longint; read write;<br /> &nbsp;&nbsp;&nbsp; property State: TNewProgressBarState; read write;<br /> &nbsp;&nbsp;&nbsp; property Style: TNewProgressBarStyle; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TRichEditViewer = class(TMemo)<br /> &nbsp;&nbsp;&nbsp; property RTFText: AnsiString; write;<br /> &nbsp;&nbsp;&nbsp; property UseRichEdit: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property ThemeBorder: Boolean; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TPasswordEdit = class(TCustomEdit)<br /> &nbsp;&nbsp;&nbsp; property AutoSelect: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property AutoSize: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property BorderStyle: TBorderStyle; read write;<br /> &nbsp;&nbsp;&nbsp; property Color: TColor; read write;<br /> &nbsp;&nbsp;&nbsp; property Font: TFont; read write;<br /> &nbsp;&nbsp;&nbsp; property HideSelection: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property MaxLength: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property ParentColor: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property ParentFont: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Password: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property ReadOnly: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Text: String; read write;<br /> &nbsp;&nbsp;&nbsp; property OnChange: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnClick: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDblClick: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnKeyDown: TKeyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnKeyPress: TKeyPressEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnKeyUp: TKeyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnEnter: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnExit: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property CharCase: TEditCharCase; read write;<br /> &nbsp;&nbsp;&nbsp; property Ctl3D: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property DragCursor: Longint; read write;<br /> &nbsp;&nbsp;&nbsp; property DragMode: TDragMode; read write;<br /> &nbsp;&nbsp;&nbsp; property OEMConvert: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property ParentCtl3D: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property PopupMenu: TPopupMenu; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDragDrop: TDragDropEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDragOver: TDragOverEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnEndDrag: TEndDragEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseDown: TMouseEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseMove: TMouseMoveEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseUp: TMouseEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnStartDrag: TStartDragEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseEnter: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseLeave: TNotifyEvent; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TCustomFolderTreeView = class(TWinControl)<br /> &nbsp;&nbsp;&nbsp; procedure ChangeDirectory(const Value: String; const CreateNewItems: Boolean);<br /> &nbsp;&nbsp;&nbsp; procedure CreateNewDirectory(const ADefaultName: String);<br /> &nbsp;&nbsp;&nbsp; property Directory: String; read write;<br /> &nbsp;&nbsp;&nbsp; property ShowAllFolders: Boolean; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TFolderRenameEvent = procedure(Sender: TCustomFolderTreeView; var NewName: String; var Accept: Boolean);<br /> <br /> &nbsp; TFolderTreeView = class(TCustomFolderTreeView)<br /> &nbsp;&nbsp;&nbsp; property OnChange: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnRename: TFolderRenameEvent; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TStartMenuFolderTreeView = class(TCustomFolderTreeView)<br /> &nbsp;&nbsp;&nbsp; procedure SetPaths(const AUserPrograms, ACommonPrograms, AUserStartup, ACommonStartup: String);<br /> &nbsp;&nbsp;&nbsp; property OnChange: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnRename: TFolderRenameEvent; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TBitmapImage = class(TGraphicControl)<br /> &nbsp;&nbsp;&nbsp; property AutoSize: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property BackColor: TColor; read write;<br /> &nbsp;&nbsp;&nbsp; property Center: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Bitmap: TBitmap; read write;<br /> &nbsp;&nbsp;&nbsp; property ReplaceColor: TColor; read write;<br /> &nbsp;&nbsp;&nbsp; property ReplaceWithColor: TColor; read write;<br /> &nbsp;&nbsp;&nbsp; property Stretch: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property DragCursor: Longint; read write;<br /> &nbsp;&nbsp;&nbsp; property DragMode: TDragMode; read write;<br /> &nbsp;&nbsp;&nbsp; property PopupMenu: TPopupMenu; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDragDrop: TDragDropEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDragOver: TDragOverEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnEndDrag: TEndDragEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnClick: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDblClick: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseDown: TMouseEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseMove: TMouseMoveEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseUp: TMouseEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnStartDrag: TStartDragEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseEnter: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseLeave: TNotifyEvent; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TNewIconImage = class(TGraphicControl)<br /> &nbsp;&nbsp;&nbsp; property AutoSize: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property BackColor: TColor; read write;<br /> &nbsp;&nbsp;&nbsp; property Center: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Icon: TNewIcon; read write;<br /> &nbsp;&nbsp;&nbsp; property DragCursor: Longint; read write;<br /> &nbsp;&nbsp;&nbsp; property DragMode: TDragMode; read write;<br /> &nbsp;&nbsp;&nbsp; property PopupMenu: TPopupMenu; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDragDrop: TDragDropEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDragOver: TDragOverEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnEndDrag: TEndDragEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnClick: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDblClick: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseDown: TMouseEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseMove: TMouseMoveEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseUp: TMouseEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnStartDrag: TStartDragEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseEnter: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseLeave: TNotifyEvent; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TNewSpeedButtonLayout = (blGlyphLeft, blGlyphRight, blGlyphTop, blGlyphBottom);<br /> <br /> &nbsp; TNewSpeedButtonStyle = (nsbButton, nsbDropDown);<br /> <br /> &nbsp; TNewSpeedButton = class(TGraphicControl)<br /> &nbsp;&nbsp;&nbsp; property AllowAllUp: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property GroupIndex: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property Down: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Caption: String; read write;<br /> &nbsp;&nbsp;&nbsp; property Enabled: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Flat: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Font: TFont; read write;<br /> &nbsp;&nbsp;&nbsp; property ParentFont: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property FocusControl: TWinControl; read write;<br /> &nbsp;&nbsp;&nbsp; property Glyph: TBitmap; read write;<br /> &nbsp;&nbsp;&nbsp; property Layout: TNewSpeedButtonLayout; read write;<br /> &nbsp;&nbsp;&nbsp; property Margin: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property NumGlyphs: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property ParentShowHint: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Style: TNewSpeedButtonStyle; read write;<br /> &nbsp;&nbsp;&nbsp; property ThemeEnabled: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Spacing: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property Transparent: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property DragCursor: Longint; read write;<br /> &nbsp;&nbsp;&nbsp; property DragMode: TDragMode; read write;<br /> &nbsp;&nbsp;&nbsp; property PopupMenu: TPopupMenu; read write;<br /> &nbsp;&nbsp;&nbsp; property DropdownMenu: TPopupMenu; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDragDrop: TDragDropEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDragOver: TDragOverEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnEndDrag: TEndDragEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnStartDrag: TStartDragEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnClick: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDblClick: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseDown: TMouseEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseMove: TMouseMoveEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseUp: TMouseEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseEnter: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnMouseLeave: TNotifyEvent; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TNewNotebookPage = class(TCustomControl)<br /> &nbsp;&nbsp;&nbsp; property Color: TColor; read write;<br /> &nbsp;&nbsp;&nbsp; property Notebook: TNewNotebook; read write;<br /> &nbsp;&nbsp;&nbsp; property PageIndex: Integer; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TNewNotebook = class(TWinControl)<br /> &nbsp;&nbsp;&nbsp; function FindNextPage(CurPage: TNewNotebookPage; GoForward: Boolean): TNewNotebookPage;<br /> &nbsp;&nbsp;&nbsp; property PageCount: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property Pages[Index: Integer]: TNewNotebookPage; read;<br /> &nbsp;&nbsp;&nbsp; property ActivePage: TNewNotebookPage; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TWizardPage = class(TComponent)<br /> &nbsp;&nbsp;&nbsp; property ID: Integer; read;<br /> &nbsp;&nbsp;&nbsp; property Caption: String; read write;<br /> &nbsp;&nbsp;&nbsp; property Description: String; read write;<br /> &nbsp;&nbsp;&nbsp; property Surface: TNewNotebookPage; read write;<br /> &nbsp;&nbsp;&nbsp; property SurfaceHeight: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property SurfaceWidth: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property OnActivate: TWizardPageNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnBackButtonClick: TWizardPageButtonEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnCancelButtonClick: TWizardPageCancelEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnNextButtonClick: TWizardPageButtonEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnShouldSkipPage: TWizardPageShouldSkipEvent; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TWizardPageNotifyEvent = procedure(Sender: TWizardPage);<br /> <br /> &nbsp; TWizardPageButtonEvent = function(Sender: TWizardPage): Boolean;<br /> <br /> &nbsp; TWizardPageCancelEvent = procedure(Sender: TWizardPage; var ACancel, AConfirm: Boolean);<br /> <br /> &nbsp; TWizardPageShouldSkipEvent = function(Sender: TWizardPage): Boolean;<br /> <br /> &nbsp; TInputQueryWizardPage = class(TWizardPage)<br /> &nbsp;&nbsp;&nbsp; function Add(const APrompt: String; const APassword: Boolean): Integer;<br /> &nbsp;&nbsp;&nbsp; property Edits[Index: Integer]: TPasswordEdit; read;<br /> &nbsp;&nbsp;&nbsp; property PromptLabels[Index: Integer]: TNewStaticText; read;<br /> &nbsp;&nbsp;&nbsp; property SubCaptionLabel: TNewStaticText; read;<br /> &nbsp;&nbsp;&nbsp; property Values[Index: Integer]: String; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TInputOptionWizardPage = class(TWizardPage)<br /> &nbsp;&nbsp;&nbsp; function Add(const ACaption: String): Integer;<br /> &nbsp;&nbsp;&nbsp; function AddEx(const ACaption: String; const ALevel: Byte; const AExclusive: Boolean): Integer;<br /> &nbsp;&nbsp;&nbsp; property CheckListBox: TNewCheckListBox; read;<br /> &nbsp;&nbsp;&nbsp; property SelectedValueIndex: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property SubCaptionLabel: TNewStaticText; read;<br /> &nbsp;&nbsp;&nbsp; property Values[Index: Integer]: Boolean; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TInputDirWizardPage = class(TWizardPage)<br /> &nbsp;&nbsp;&nbsp; function Add(const APrompt: String): Integer;<br /> &nbsp;&nbsp;&nbsp; property Buttons[Index: Integer]: TNewButton; read;<br /> &nbsp;&nbsp;&nbsp; property Edits[Index: Integer]: TEdit; read;<br /> &nbsp;&nbsp;&nbsp; property PromptLabels[Index: Integer]: TNewStaticText; read;<br /> &nbsp;&nbsp;&nbsp; property SubCaptionLabel: TNewStaticText; read;<br /> &nbsp;&nbsp;&nbsp; property Values[Index: Integer]: String; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TInputFileWizardPage = class(TWizardPage)<br /> &nbsp;&nbsp;&nbsp; function Add(const APrompt, AFilter, ADefaultExtension: String): Integer;<br /> &nbsp;&nbsp;&nbsp; property Buttons[Index: Integer]: TNewButton; read;<br /> &nbsp;&nbsp;&nbsp; property Edits[Index: Integer]: TEdit; read;<br /> &nbsp;&nbsp;&nbsp; property PromptLabels[Index: Integer]: TNewStaticText; read;<br /> &nbsp;&nbsp;&nbsp; property SubCaptionLabel: TNewStaticText; read;<br /> &nbsp;&nbsp;&nbsp; property Values[Index: Integer]: String; read write;<br /> &nbsp;&nbsp;&nbsp; property IsSaveButton[Index: Integer]: Boolean; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TOutputMsgWizardPage = class(TWizardPage)<br /> &nbsp;&nbsp;&nbsp; property MsgLabel: TNewStaticText; read;<br /> &nbsp; end;<br /> <br /> &nbsp; TOutputMsgMemoWizardPage = class(TWizardPage)<br /> &nbsp;&nbsp;&nbsp; property RichEditViewer: TRichEditViewer; read;<br /> &nbsp;&nbsp;&nbsp; property SubCaptionLabel: TNewStaticText; read;<br /> &nbsp; end;<br /> <br /> &nbsp; TOutputProgressWizardPage = class(TWizardPage)<br /> &nbsp;&nbsp;&nbsp; procedure Hide;<br /> &nbsp;&nbsp;&nbsp; property Msg1Label: TNewStaticText; read;<br /> &nbsp;&nbsp;&nbsp; property Msg2Label: TNewStaticText; read;<br /> &nbsp;&nbsp;&nbsp; property ProgressBar: TNewProgressBar; read;<br /> &nbsp;&nbsp;&nbsp; procedure SetProgress(const Position, Max: Longint);<br /> &nbsp;&nbsp;&nbsp; procedure SetText(const Msg1, Msg2: String);<br /> &nbsp;&nbsp;&nbsp; procedure Show;<br /> &nbsp; end;<br /> <br /> &nbsp; TUIStateForm = class(TForm)<br /> &nbsp; end;<br /> <br /> &nbsp; TSetupForm = class(TUIStateForm)<br /> &nbsp;&nbsp;&nbsp; procedure Center;<br /> &nbsp;&nbsp;&nbsp; procedure CenterInsideControl(const Ctl: TWinControl; const InsideClientArea: Boolean);<br /> &nbsp;&nbsp;&nbsp; property ControlsFlipped: Boolean; read;<br /> &nbsp;&nbsp;&nbsp; property FlipControlsOnShow: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property RightToLeft: Boolean; read;<br /> &nbsp; end;<br /> <br /> &nbsp; TMainForm = class(TSetupForm)<br /> &nbsp;&nbsp;&nbsp; procedure ShowAboutBox;<br /> &nbsp; end;<br /> <br /> &nbsp; TWizardForm = class(TSetupForm)<br /> &nbsp;&nbsp;&nbsp; property CancelButton: TNewButton; read;<br /> &nbsp;&nbsp;&nbsp; property NextButton: TNewButton; read;<br /> &nbsp;&nbsp;&nbsp; property BackButton: TNewButton; read;<br /> &nbsp;&nbsp;&nbsp; property OuterNotebook: TNewNotebook; read;<br /> &nbsp;&nbsp;&nbsp; property InnerNotebook: TNewNotebook; read;<br /> &nbsp;&nbsp;&nbsp; property WelcomePage: TNewNotebookPage; read;<br /> &nbsp;&nbsp;&nbsp; property InnerPage: TNewNotebookPage; read;<br /> &nbsp;&nbsp;&nbsp; property FinishedPage: TNewNotebookPage; read;<br /> &nbsp;&nbsp;&nbsp; property LicensePage: TNewNotebookPage; read;<br /> &nbsp;&nbsp;&nbsp; property PasswordPage: TNewNotebookPage; read;<br /> &nbsp;&nbsp;&nbsp; property InfoBeforePage: TNewNotebookPage; read;<br /> &nbsp;&nbsp;&nbsp; property UserInfoPage: TNewNotebookPage; read;<br /> &nbsp;&nbsp;&nbsp; property SelectDirPage: TNewNotebookPage; read;<br /> &nbsp;&nbsp;&nbsp; property SelectComponentsPage: TNewNotebookPage; read;<br /> &nbsp;&nbsp;&nbsp; property SelectProgramGroupPage: TNewNotebookPage; read;<br /> &nbsp;&nbsp;&nbsp; property SelectTasksPage: TNewNotebookPage; read;<br /> &nbsp;&nbsp;&nbsp; property ReadyPage: TNewNotebookPage; read;<br /> &nbsp;&nbsp;&nbsp; property PreparingPage: TNewNotebookPage; read;<br /> &nbsp;&nbsp;&nbsp; property InstallingPage: TNewNotebookPage; read;<br /> &nbsp;&nbsp;&nbsp; property InfoAfterPage: TNewNotebookPage; read;<br /> &nbsp;&nbsp;&nbsp; property DiskSpaceLabel: TNewStaticText; read;<br /> &nbsp;&nbsp;&nbsp; property DirEdit: TEdit; read;<br /> &nbsp;&nbsp;&nbsp; property GroupEdit: TNewEdit; read;<br /> &nbsp;&nbsp;&nbsp; property NoIconsCheck: TNewCheckBox; read;<br /> &nbsp;&nbsp;&nbsp; property PasswordLabel: TNewStaticText; read;<br /> &nbsp;&nbsp;&nbsp; property PasswordEdit: TPasswordEdit; read;<br /> &nbsp;&nbsp;&nbsp; property PasswordEditLabel: TNewStaticText; read;<br /> &nbsp;&nbsp;&nbsp; property ReadyMemo: TNewMemo; read;<br /> &nbsp;&nbsp;&nbsp; property TypesCombo: TNewComboBox; read;<br /> &nbsp;&nbsp;&nbsp; property Bevel: TBevel; read;<br /> &nbsp;&nbsp;&nbsp; property WizardBitmapImage: TBitmapImage; read;<br /> &nbsp;&nbsp;&nbsp; property WelcomeLabel1: TNewStaticText; read;<br /> &nbsp;&nbsp;&nbsp; property InfoBeforeMemo: TRichEditViewer; read;<br /> &nbsp;&nbsp;&nbsp; property InfoBeforeClickLabel: TNewStaticText; read;<br /> &nbsp;&nbsp;&nbsp; property MainPanel: TPanel; read;<br /> &nbsp;&nbsp;&nbsp; property Bevel1: TBevel; read;<br /> &nbsp;&nbsp;&nbsp; property PageNameLabel: TNewStaticText; read;<br /> &nbsp;&nbsp;&nbsp; property PageDescriptionLabel: TNewStaticText; read;<br /> &nbsp;&nbsp;&nbsp; property WizardSmallBitmapImage: TBitmapImage; read;<br /> &nbsp;&nbsp;&nbsp; property ReadyLabel: TNewStaticText; read;<br /> &nbsp;&nbsp;&nbsp; property FinishedLabel: TNewStaticText; read;<br /> &nbsp;&nbsp;&nbsp; property YesRadio: TNewRadioButton; read;<br /> &nbsp;&nbsp;&nbsp; property NoRadio: TNewRadioButton; read;<br /> &nbsp;&nbsp;&nbsp; property WizardBitmapImage2: TBitmapImage; read;<br /> &nbsp;&nbsp;&nbsp; property WelcomeLabel2: TNewStaticText; read;<br /> &nbsp;&nbsp;&nbsp; property LicenseLabel1: TNewStaticText; read;<br /> &nbsp;&nbsp;&nbsp; property LicenseMemo: TRichEditViewer; read;<br /> &nbsp;&nbsp;&nbsp; property InfoAfterMemo: TRichEditViewer; read;<br /> &nbsp;&nbsp;&nbsp; property InfoAfterClickLabel: TNewStaticText; read;<br /> &nbsp;&nbsp;&nbsp; property ComponentsList: TNewCheckListBox; read;<br /> &nbsp;&nbsp;&nbsp; property ComponentsDiskSpaceLabel: TNewStaticText; read;<br /> &nbsp;&nbsp;&nbsp; property BeveledLabel: TNewStaticText; read;<br /> &nbsp;&nbsp;&nbsp; property StatusLabel: TNewStaticText; read;<br /> &nbsp;&nbsp;&nbsp; property FilenameLabel: TNewStaticText; read;<br /> &nbsp;&nbsp;&nbsp; property ProgressGauge: TNewProgressBar; read;<br /> &nbsp;&nbsp;&nbsp; property SelectDirLabel: TNewStaticText; read;<br /> &nbsp;&nbsp;&nbsp; property SelectStartMenuFolderLabel: TNewStaticText; read;<br /> &nbsp;&nbsp;&nbsp; property SelectComponentsLabel: TNewStaticText; read;<br /> &nbsp;&nbsp;&nbsp; property SelectTasksLabel: TNewStaticText; read;<br /> &nbsp;&nbsp;&nbsp; property LicenseAcceptedRadio: TNewRadioButton; read;<br /> &nbsp;&nbsp;&nbsp; property LicenseNotAcceptedRadio: TNewRadioButton; read;<br /> &nbsp;&nbsp;&nbsp; property UserInfoNameLabel: TNewStaticText; read;<br /> &nbsp;&nbsp;&nbsp; property UserInfoNameEdit: TNewEdit; read;<br /> &nbsp;&nbsp;&nbsp; property UserInfoOrgLabel: TNewStaticText; read;<br /> &nbsp;&nbsp;&nbsp; property UserInfoOrgEdit: TNewEdit; read;<br /> &nbsp;&nbsp;&nbsp; property PreparingErrorBitmapImage: TBitmapImage; read;<br /> &nbsp;&nbsp;&nbsp; property PreparingLabel: TNewStaticText; read;<br /> &nbsp;&nbsp;&nbsp; property FinishedHeadingLabel: TNewStaticText; read;<br /> &nbsp;&nbsp;&nbsp; property UserInfoSerialLabel: TNewStaticText; read;<br /> &nbsp;&nbsp;&nbsp; property UserInfoSerialEdit: TNewEdit; read;<br /> &nbsp;&nbsp;&nbsp; property TasksList: TNewCheckListBox; read;<br /> &nbsp;&nbsp;&nbsp; property RunList: TNewCheckListBox; read;<br /> &nbsp;&nbsp;&nbsp; property DirBrowseButton: TNewButton; read;<br /> &nbsp;&nbsp;&nbsp; property GroupBrowseButton: TNewButton; read;<br /> &nbsp;&nbsp;&nbsp; property SelectDirBitmapImage: TBitmapImage; read;<br /> &nbsp;&nbsp;&nbsp; property SelectGroupBitmapImage: TBitmapImage; read;<br /> &nbsp;&nbsp;&nbsp; property SelectDirBrowseLabel: TNewStaticText; read;<br /> &nbsp;&nbsp;&nbsp; property SelectStartMenuFolderBrowseLabel: TNewStaticText; read;<br /> &nbsp;&nbsp;&nbsp; property PreparingYesRadio: TNewRadioButton; read;<br /> &nbsp;&nbsp;&nbsp; property PreparingNoRadio: TNewRadioButton; read;<br /> &nbsp;&nbsp;&nbsp; property CurPageID: Integer; read;<br /> &nbsp;&nbsp;&nbsp; function AdjustLabelHeight(ALabel: TNewStaticText): Integer;<br /> &nbsp;&nbsp;&nbsp; procedure IncTopDecHeight(AControl: TControl; Amount: Integer);<br /> &nbsp;&nbsp;&nbsp; property PrevAppDir: String; read;<br /> &nbsp; end;<br /> <br /> &nbsp; TUninstallProgressForm = class(TSetupForm)<br /> &nbsp;&nbsp;&nbsp; property OuterNotebook: TNewNotebook; read;<br /> &nbsp;&nbsp;&nbsp; property InnerPage: TNewNotebookPage; read;<br /> &nbsp;&nbsp;&nbsp; property InnerNotebook: TNewNotebook; read;<br /> &nbsp;&nbsp;&nbsp; property InstallingPage: TNewNotebookPage; read;<br /> &nbsp;&nbsp;&nbsp; property MainPanel: TPanel; read;<br /> &nbsp;&nbsp;&nbsp; property PageNameLabel: TNewStaticText; read;<br /> &nbsp;&nbsp;&nbsp; property PageDescriptionLabel: TNewStaticText; read;<br /> &nbsp;&nbsp;&nbsp; property WizardSmallBitmapImage: TBitmapImage; read;<br /> &nbsp;&nbsp;&nbsp; property Bevel1: TBevel; read;<br /> &nbsp;&nbsp;&nbsp; property StatusLabel: TNewStaticText; read;<br /> &nbsp;&nbsp;&nbsp; property ProgressBar: TNewProgressBar; read;<br /> &nbsp;&nbsp;&nbsp; property BeveledLabel: TNewStaticText; read;<br /> &nbsp;&nbsp;&nbsp; property Bevel: TBevel; read;<br /> &nbsp;&nbsp;&nbsp; property CancelButton: TNewButton; read;<br /> &nbsp; end;<br /> <br /> &nbsp; TArrayOfString = array of String;<br /> <br /> &nbsp; TArrayOfChar = array of Char;<br /> <br /> &nbsp; TArrayOfBoolean = array of Boolean;<br /> <br /> &nbsp; TArrayOfInteger = array of Integer;<br /> <br /> &nbsp; DWORD = LongWord;<br /> <br /> &nbsp; UINT = LongWord;<br /> <br /> &nbsp; BOOL = LongBool;<br /> &nbsp; <br /> &nbsp; DWORD_PTR = LongWord;<br /> <br /> &nbsp; UINT_PTR = LongWord;<br /> <br /> &nbsp; INT_PTR = Longint;<br /> <br /> &nbsp; TMsgBoxType = (mbInformation, mbConfirmation, mbError, mbCriticalError);<br /> <br /> &nbsp; TShellFolderID = (sfDesktop, sfStartMenu, sfPrograms, sfStartup, sfSendTo,<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sfFonts, sfAppData, sfDocs, sfTemplates, sfFavorites, sfLocalAppData);<br /> <br /> &nbsp; TSetupMessageID = (<br /> &nbsp;&nbsp;&nbsp; msgAboutSetupMenuItem,<br /> &nbsp;&nbsp;&nbsp; msgAboutSetupMessage,<br /> &nbsp;&nbsp;&nbsp; msgAboutSetupNote,<br /> &nbsp;&nbsp;&nbsp; msgAboutSetupTitle,<br /> &nbsp;&nbsp;&nbsp; msgAdminPrivilegesRequired,<br /> &nbsp;&nbsp;&nbsp; msgBadDirName32,<br /> &nbsp;&nbsp;&nbsp; msgBadGroupName,<br /> &nbsp;&nbsp;&nbsp; msgBeveledLabel,<br /> &nbsp;&nbsp;&nbsp; msgBrowseDialogLabel,<br /> &nbsp;&nbsp;&nbsp; msgBrowseDialogTitle,<br /> &nbsp;&nbsp;&nbsp; msgButtonBack,<br /> &nbsp;&nbsp;&nbsp; msgButtonBrowse,<br /> &nbsp;&nbsp;&nbsp; msgButtonCancel,<br /> &nbsp;&nbsp;&nbsp; msgButtonFinish,<br /> &nbsp;&nbsp;&nbsp; msgButtonInstall,<br /> &nbsp;&nbsp;&nbsp; msgButtonNewFolder,<br /> &nbsp;&nbsp;&nbsp; msgButtonNext,<br /> &nbsp;&nbsp;&nbsp; msgButtonNo,<br /> &nbsp;&nbsp;&nbsp; msgButtonNoToAll,<br /> &nbsp;&nbsp;&nbsp; msgButtonOK,<br /> &nbsp;&nbsp;&nbsp; msgButtonWizardBrowse,<br /> &nbsp;&nbsp;&nbsp; msgButtonYes,<br /> &nbsp;&nbsp;&nbsp; msgButtonYesToAll,<br /> &nbsp;&nbsp;&nbsp; msgCannotContinue,<br /> &nbsp;&nbsp;&nbsp; msgChangeDiskTitle,<br /> &nbsp;&nbsp;&nbsp; msgClickFinish,<br /> &nbsp;&nbsp;&nbsp; msgClickNext,<br /> &nbsp;&nbsp;&nbsp; msgCompactInstallation,<br /> &nbsp;&nbsp;&nbsp; msgComponentSize1,<br /> &nbsp;&nbsp;&nbsp; msgComponentSize2,<br /> &nbsp;&nbsp;&nbsp; msgComponentsDiskSpaceMBLabel,<br /> &nbsp;&nbsp;&nbsp; msgConfirmDeleteSharedFile2,<br /> &nbsp;&nbsp;&nbsp; msgConfirmDeleteSharedFileTitle,<br /> &nbsp;&nbsp;&nbsp; msgConfirmTitle,<br /> &nbsp;&nbsp;&nbsp; msgConfirmUninstall,<br /> &nbsp;&nbsp;&nbsp; msgCustomInstallation,<br /> &nbsp;&nbsp;&nbsp; msgDirDoesntExist,<br /> &nbsp;&nbsp;&nbsp; msgDirDoesntExistTitle,<br /> &nbsp;&nbsp;&nbsp; msgDirExists,<br /> &nbsp;&nbsp;&nbsp; msgDirExistsTitle,<br /> &nbsp;&nbsp;&nbsp; msgDirNameTooLong,<br /> &nbsp;&nbsp;&nbsp; msgDiskSpaceMBLabel,<br /> &nbsp;&nbsp;&nbsp; msgDiskSpaceWarning,<br /> &nbsp;&nbsp;&nbsp; msgDiskSpaceWarningTitle,<br /> &nbsp;&nbsp;&nbsp; msgEntryAbortRetryIgnore,<br /> &nbsp;&nbsp;&nbsp; msgErrorChangingAttr,<br /> &nbsp;&nbsp;&nbsp; msgErrorCopying,<br /> &nbsp;&nbsp;&nbsp; msgErrorCreatingDir,<br /> &nbsp;&nbsp;&nbsp; msgErrorCreatingTemp,<br /> &nbsp;&nbsp;&nbsp; msgErrorExecutingProgram,<br /> &nbsp;&nbsp;&nbsp; msgErrorFunctionFailed,<br /> &nbsp;&nbsp;&nbsp; msgErrorFunctionFailedNoCode,<br /> &nbsp;&nbsp;&nbsp; msgErrorFunctionFailedWithMessage,<br /> &nbsp;&nbsp;&nbsp; msgErrorIniEntry,<br /> &nbsp;&nbsp;&nbsp; msgErrorInternal2,<br /> &nbsp;&nbsp;&nbsp; msgErrorOpeningReadme,<br /> &nbsp;&nbsp;&nbsp; msgErrorReadingExistingDest,<br /> &nbsp;&nbsp;&nbsp; msgErrorReadingSource,<br /> &nbsp;&nbsp;&nbsp; msgErrorRegCreateKey,<br /> &nbsp;&nbsp;&nbsp; msgErrorRegisterServer,<br /> &nbsp;&nbsp;&nbsp; msgErrorRegisterServerMissingExport,<br /> &nbsp;&nbsp;&nbsp; msgErrorRegisterTypeLib,<br /> &nbsp;&nbsp;&nbsp; msgErrorRegOpenKey,<br /> &nbsp;&nbsp;&nbsp; msgErrorRegWriteKey,<br /> &nbsp;&nbsp;&nbsp; msgErrorRenamingTemp,<br /> &nbsp;&nbsp;&nbsp; msgErrorReplacingExistingFile,<br /> &nbsp;&nbsp;&nbsp; msgErrorRestartingComputer,<br /> &nbsp;&nbsp;&nbsp; msgErrorRestartReplace,<br /> &nbsp;&nbsp;&nbsp; msgErrorTitle,<br /> &nbsp;&nbsp;&nbsp; msgErrorTooManyFilesInDir,<br /> &nbsp;&nbsp;&nbsp; msgExistingFileNewer,<br /> &nbsp;&nbsp;&nbsp; msgExistingFileReadOnly,<br /> &nbsp;&nbsp;&nbsp; msgExitSetupMessage,<br /> &nbsp;&nbsp;&nbsp; msgExitSetupTitle,<br /> &nbsp;&nbsp;&nbsp; msgFileAbortRetryIgnore,<br /> &nbsp;&nbsp;&nbsp; msgFileAbortRetryIgnore2,<br /> &nbsp;&nbsp;&nbsp; msgFileExists,<br /> &nbsp;&nbsp;&nbsp; msgFileNotInDir2,<br /> &nbsp;&nbsp;&nbsp; msgFinishedHeadingLabel,<br /> &nbsp;&nbsp;&nbsp; msgFinishedLabel,<br /> &nbsp;&nbsp;&nbsp; msgFinishedLabelNoIcons,<br /> &nbsp;&nbsp;&nbsp; msgFinishedRestartLabel,<br /> &nbsp;&nbsp;&nbsp; msgFinishedRestartMessage, <br /> &nbsp;&nbsp;&nbsp; msgFullInstallation,<br /> &nbsp;&nbsp;&nbsp; msgGroupNameTooLong,<br /> &nbsp;&nbsp;&nbsp; msgIncorrectPassword,<br /> &nbsp;&nbsp;&nbsp; msgInfoAfterClickLabel,<br /> &nbsp;&nbsp;&nbsp; msgInfoAfterLabel,<br /> &nbsp;&nbsp;&nbsp; msgInfoBeforeClickLabel,<br /> &nbsp;&nbsp;&nbsp; msgInfoBeforeLabel,<br /> &nbsp;&nbsp;&nbsp; msgInformationTitle,<br /> &nbsp;&nbsp;&nbsp; msgInstallingLabel,<br /> &nbsp;&nbsp;&nbsp; msgInvalidDirName,<br /> &nbsp;&nbsp;&nbsp; msgInvalidDrive,<br /> &nbsp;&nbsp;&nbsp; msgInvalidGroupName,<br /> &nbsp;&nbsp;&nbsp; msgInvalidPath,<br /> &nbsp;&nbsp;&nbsp; msgLastErrorMessage,<br /> &nbsp;&nbsp;&nbsp; msgLdrCannotCreateTemp,<br /> &nbsp;&nbsp;&nbsp; msgLdrCannotExecTemp,<br /> &nbsp;&nbsp;&nbsp; msgLicenseAccepted,<br /> &nbsp;&nbsp;&nbsp; msgLicenseLabel,<br /> &nbsp;&nbsp;&nbsp; msgLicenseLabel3,<br /> &nbsp;&nbsp;&nbsp; msgLicenseNotAccepted,<br /> &nbsp;&nbsp;&nbsp; msgMissingWOW64APIs,<br /> &nbsp;&nbsp;&nbsp; msgMustEnterGroupName,<br /> &nbsp;&nbsp;&nbsp; msgNewFolderName,<br /> &nbsp;&nbsp;&nbsp; msgNoProgramGroupCheck2,<br /> &nbsp;&nbsp;&nbsp; msgNoRadio,<br /> &nbsp;&nbsp;&nbsp; msgNotOnThisPlatform,<br /> &nbsp;&nbsp;&nbsp; msgNoUninstallWarning,<br /> &nbsp;&nbsp;&nbsp; msgNoUninstallWarningTitle, <br /> &nbsp;&nbsp;&nbsp; msgOnlyAdminCanUninstall,<br /> &nbsp;&nbsp;&nbsp; msgOnlyOnTheseArchitectures,<br /> &nbsp;&nbsp;&nbsp; msgOnlyOnThisPlatform,<br /> &nbsp;&nbsp;&nbsp; msgPasswordEditLabel,<br /> &nbsp;&nbsp;&nbsp; msgPasswordLabel1,<br /> &nbsp;&nbsp;&nbsp; msgPasswordLabel3,<br /> &nbsp;&nbsp;&nbsp; msgPathLabel,<br /> &nbsp;&nbsp;&nbsp; msgPowerUserPrivilegesRequired,<br /> &nbsp;&nbsp;&nbsp; msgPreparingDesc,<br /> &nbsp;&nbsp;&nbsp; msgPreviousInstallNotCompleted,<br /> &nbsp;&nbsp;&nbsp; msgReadyLabel1,<br /> &nbsp;&nbsp;&nbsp; msgReadyLabel2a,<br /> &nbsp;&nbsp;&nbsp; msgReadyLabel2b,<br /> &nbsp;&nbsp;&nbsp; msgReadyMemoComponents, <br /> &nbsp;&nbsp;&nbsp; msgReadyMemoDir, <br /> &nbsp;&nbsp;&nbsp; msgReadyMemoGroup,<br /> &nbsp;&nbsp;&nbsp; msgReadyMemoTasks,<br /> &nbsp;&nbsp;&nbsp; msgReadyMemoType,<br /> &nbsp;&nbsp;&nbsp; msgReadyMemoUserInfo,<br /> &nbsp;&nbsp;&nbsp; msgRunEntryExec,<br /> &nbsp;&nbsp;&nbsp; msgRunEntryShellExec,<br /> &nbsp;&nbsp;&nbsp; msgSelectComponentsDesc,<br /> &nbsp;&nbsp;&nbsp; msgSelectComponentsLabel2,<br /> &nbsp;&nbsp;&nbsp; msgSelectDirBrowseLabel,<br /> &nbsp;&nbsp;&nbsp; msgSelectDirDesc,<br /> &nbsp;&nbsp;&nbsp; msgSelectDirectoryLabel,<br /> &nbsp;&nbsp;&nbsp; msgSelectDirLabel3,<br /> &nbsp;&nbsp;&nbsp; msgSelectDiskLabel2,<br /> &nbsp;&nbsp;&nbsp; msgSelectLanguageLabel,<br /> &nbsp;&nbsp;&nbsp; msgSelectLanguageTitle,<br /> &nbsp;&nbsp;&nbsp; msgSelectStartMenuFolderBrowseLabel,<br /> &nbsp;&nbsp;&nbsp; msgSelectStartMenuFolderDesc,<br /> &nbsp;&nbsp;&nbsp; msgSelectStartMenuFolderLabel3,<br /> &nbsp;&nbsp;&nbsp; msgSelectTasksDesc,<br /> &nbsp;&nbsp;&nbsp; msgSelectTasksLabel2,<br /> &nbsp;&nbsp;&nbsp; msgSetupAborted,<br /> &nbsp;&nbsp;&nbsp; msgSetupAppRunningError,<br /> &nbsp;&nbsp;&nbsp; msgSetupAppTitle,<br /> &nbsp;&nbsp;&nbsp; msgSetupFileCorrupt,<br /> &nbsp;&nbsp;&nbsp; msgSetupFileCorruptOrWrongVer,<br /> &nbsp;&nbsp;&nbsp; msgSetupFileMissing,<br /> &nbsp;&nbsp;&nbsp; msgSetupLdrStartupMessage,<br /> &nbsp;&nbsp;&nbsp; msgSetupWindowTitle,<br /> &nbsp;&nbsp;&nbsp; msgSharedFileNameLabel,<br /> &nbsp;&nbsp;&nbsp; msgSharedFileLocationLabel,<br /> &nbsp;&nbsp;&nbsp; msgShowReadmeCheck,<br /> &nbsp;&nbsp;&nbsp; msgSourceDoesntExist,<br /> &nbsp;&nbsp;&nbsp; msgSourceIsCorrupted,<br /> &nbsp;&nbsp;&nbsp; msgStatusCreateDirs,<br /> &nbsp;&nbsp;&nbsp; msgStatusCreateIcons,<br /> &nbsp;&nbsp;&nbsp; msgStatusCreateIniEntries,<br /> &nbsp;&nbsp;&nbsp; msgStatusCreateRegistryEntries,<br /> &nbsp;&nbsp;&nbsp; msgStatusExtractFiles,<br /> &nbsp;&nbsp;&nbsp; msgStatusRegisterFiles,<br /> &nbsp;&nbsp;&nbsp; msgStatusRollback,<br /> &nbsp;&nbsp;&nbsp; msgStatusSavingUninstall,<br /> &nbsp;&nbsp;&nbsp; msgStatusRunProgram,<br /> &nbsp;&nbsp;&nbsp; msgStatusUninstalling,<br /> &nbsp;&nbsp;&nbsp; msgToUNCPathname,<br /> &nbsp;&nbsp;&nbsp; msgTranslatorNote,<br /> &nbsp;&nbsp;&nbsp; msgUninstallAppFullTitle,<br /> &nbsp;&nbsp;&nbsp; msgUninstallAppTitle,<br /> &nbsp;&nbsp;&nbsp; msgUninstallDataCorrupted,<br /> &nbsp;&nbsp;&nbsp; msgUninstalledAll,<br /> &nbsp;&nbsp;&nbsp; msgUninstalledAndNeedsRestart,<br /> &nbsp;&nbsp;&nbsp; msgUninstalledMost,<br /> &nbsp;&nbsp;&nbsp; msgUninstallAppRunningError,<br /> &nbsp;&nbsp;&nbsp; msgUninstallNotFound,<br /> &nbsp;&nbsp;&nbsp; msgUninstallOnlyOnWin64,<br /> &nbsp;&nbsp;&nbsp; msgUninstallOpenError,<br /> &nbsp;&nbsp;&nbsp; msgUninstallStatusLabel,<br /> &nbsp;&nbsp;&nbsp; msgUninstallUnknownEntry,<br /> &nbsp;&nbsp;&nbsp; msgUninstallUnsupportedVer,<br /> &nbsp;&nbsp;&nbsp; msgUserInfoDesc,<br /> &nbsp;&nbsp;&nbsp; msgUserInfoName,<br /> &nbsp;&nbsp;&nbsp; msgUserInfoNameRequired,<br /> &nbsp;&nbsp;&nbsp; msgUserInfoOrg,<br /> &nbsp;&nbsp;&nbsp; msgUserInfoSerial,<br /> &nbsp;&nbsp;&nbsp; msgWelcomeLabel1,<br /> &nbsp;&nbsp;&nbsp; msgWelcomeLabel2,<br /> &nbsp;&nbsp;&nbsp; msgWinVersionTooHighError,<br /> &nbsp;&nbsp;&nbsp; msgWinVersionTooLowError,<br /> &nbsp;&nbsp;&nbsp; msgWizardInfoAfter,<br /> &nbsp;&nbsp;&nbsp; msgWizardInfoBefore,<br /> &nbsp;&nbsp;&nbsp; msgWizardInstalling,<br /> &nbsp;&nbsp;&nbsp; msgWizardLicense,<br /> &nbsp;&nbsp;&nbsp; msgWizardPassword,<br /> &nbsp;&nbsp;&nbsp; msgWizardPreparing,<br /> &nbsp;&nbsp;&nbsp; msgWizardReady,<br /> &nbsp;&nbsp;&nbsp; msgWizardSelectDir,<br /> &nbsp;&nbsp;&nbsp; msgWizardSelectComponents,<br /> &nbsp;&nbsp;&nbsp; msgWizardSelectProgramGroup,<br /> &nbsp;&nbsp;&nbsp; msgWizardSelectTasks,<br /> &nbsp;&nbsp;&nbsp; msgWizardUninstalling,<br /> &nbsp;&nbsp;&nbsp; msgWizardUserInfo,<br /> &nbsp;&nbsp;&nbsp; msgYesRadio);<br /> &nbsp;&nbsp;&nbsp; <br /> &nbsp; TSetupStep = (ssPreInstall, ssInstall, ssPostInstall, ssDone);<br /> <br /> &nbsp; TUninstallStep = (usAppMutexCheck, usUninstall, usPostUninstall, usDone);<br /> <br /> &nbsp; TExecWait = (ewNoWait, ewWaitUntilTerminated, ewWaitUntilIdle);<br /> &nbsp; <br /> &nbsp; TSetupProcessorArchitecture = (paUnknown, paX86, paX64, paIA64);<br /> &nbsp; <br /> &nbsp; TFileTime = record<br /> &nbsp;&nbsp;&nbsp; dwLowDateTime: DWORD;<br /> &nbsp;&nbsp;&nbsp; dwHighDateTime: DWORD;<br /> &nbsp; end;<br /> <br /> &nbsp; TFindRec = record<br /> &nbsp;&nbsp;&nbsp; Name: String;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // имя найденного файла (без пути)<br /> &nbsp;&nbsp;&nbsp; Attributes: LongWord;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // атрибуты файлов<br /> &nbsp;&nbsp;&nbsp; SizeHigh: LongWord;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // размер файла, больше 32 битов<br /> &nbsp;&nbsp;&nbsp; SizeLow: LongWord;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp;размер файла, меньше 32&nbsp;битов<br /> &nbsp; CreationTime: TFileTime;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // время создания файла<br /> &nbsp;&nbsp;&nbsp; LastAccessTime: TFileTime;&nbsp; // время последнего доступа к файлу<br /> &nbsp;&nbsp;&nbsp; LastWriteTime: TFileTime;&nbsp;&nbsp; // время изменения файла<br /> &nbsp;&nbsp;&nbsp; AlternateName: String;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // короткое имя файла (пуст, если отсутствует)<br /> &nbsp;&nbsp;&nbsp; FindHandle: THandle;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // используется внутренно<br /> &nbsp; end;<br /> <br /> &nbsp; TWindowsVersion = record<br /> &nbsp;&nbsp;&nbsp; Major: Cardinal;<br /> &nbsp;&nbsp;&nbsp; Minor: Cardinal;<br /> &nbsp;&nbsp;&nbsp; Build: Cardinal;<br /> &nbsp;&nbsp;&nbsp; ServicePackMajor: Cardinal;<br /> &nbsp;&nbsp;&nbsp; ServicePackMinor: Cardinal;<br /> &nbsp;&nbsp;&nbsp; NTPlatform: Boolean;<br /> &nbsp;&nbsp;&nbsp; ProductType: Byte;<br /> &nbsp;&nbsp;&nbsp; SuiteMask: Word;<br /> &nbsp; end;<br /> <br /> &nbsp; TVarType = Word;<br /> <br /> &nbsp; TIFException = (ErNoError, erCannotImport, erInvalidType, ErInternalError,<br /> &nbsp;&nbsp;&nbsp; erInvalidHeader, erInvalidOpcode, erInvalidOpcodeParameter, erNoMainProc,<br /> &nbsp;&nbsp;&nbsp; erOutOfGlobalVarsRange, erOutOfProcRange, ErOutOfRange, erOutOfStackRange,<br /> &nbsp;&nbsp;&nbsp; ErTypeMismatch, erUnexpectedEof, erVersionError, ErDivideByZero, ErMathError,<br /> &nbsp;&nbsp;&nbsp; erCouldNotCallProc, erOutofRecordRange, erOutOfMemory, erException,<br /> &nbsp;&nbsp;&nbsp; erNullPointerException, erNullVariantError, erInterfaceNotSupported,<br /> &nbsp;&nbsp;&nbsp; erCustomError);<br /> <br /> &nbsp; TArrayOfLongWord = array of LongWord;<br /> <br /> &nbsp; TNewCommonCalendar = class(TWinControl)<br /> &nbsp;&nbsp;&nbsp; procedure BoldDays(Days: TArrayLongWord; var MonthBoldInfo: LongWord);<br /> &nbsp; end;<br /> <br /> &nbsp; TNewMonthCalColors = class(TPersistent)<br /> &nbsp;&nbsp;&nbsp; constructor Create(AOwner: TNewCommonCalendar);<br /> &nbsp;&nbsp;&nbsp; property BackColor: TColor; read write;<br /> &nbsp;&nbsp;&nbsp; property TextColor: TColor; read write;<br /> &nbsp;&nbsp;&nbsp; property TitleBackColor: TColor; read write;<br /> &nbsp;&nbsp;&nbsp; property TitleTextColor: TColor; read write;<br /> &nbsp;&nbsp;&nbsp; property MonthBackColor: TColor; read write;<br /> &nbsp;&nbsp;&nbsp; property TrailingTextColor: TColor; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TDateTime = Double;<br /> <br /> &nbsp; TDate = TDateTime;<br /> <br /> &nbsp; TTime = TDateTime;<br /> <br /> &nbsp; TDateTimeKind = (dtkDate, dtkTime);<br /> <br /> &nbsp; TDTDateMode = (dmComboBox, dmUpDown);<br /> <br /> &nbsp; TDTDateFormat = (dfShort, dfLong);<br /> <br /> &nbsp; TDTCalAlignment = (dtaLeft, dtaRight);<br /> <br /> &nbsp; TDTParseInputEvent = procedure(Sender: TObject; const UserString: string; var DateAndTime: TDateTime; var AllowChange: Boolean);<br /> <br /> &nbsp; TNewDateTimePicker = class(TNewCommonCalendar)<br /> &nbsp;&nbsp;&nbsp; property DateTime: TDateTime; read write;<br /> &nbsp;&nbsp;&nbsp; property DroppedDown: Boolean; read;<br /> &nbsp;&nbsp;&nbsp; property CalAlignment: TDTCalAlignment; read write;<br /> &nbsp;&nbsp;&nbsp; property CalColors: TNewMonthCalColors; read write;<br /> &nbsp;&nbsp;&nbsp; property Date: TDate; read write;<br /> &nbsp;&nbsp;&nbsp; property Format: String; read write;<br /> &nbsp;&nbsp;&nbsp; property Time: TTime; read write;<br /> &nbsp;&nbsp;&nbsp; property ShowCheckbox: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Checked: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property DateFormat: TDTDateFormat; read write;<br /> &nbsp;&nbsp;&nbsp; property DateMode: TDTDateMode; read write;<br /> &nbsp;&nbsp;&nbsp; property Kind: TDateTimeKind; read write;<br /> &nbsp;&nbsp;&nbsp; property MaxDate: TDate; read write;<br /> &nbsp;&nbsp;&nbsp; property MinDate: TDate; read write;<br /> &nbsp;&nbsp;&nbsp; property ParseInput: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property OnCloseUp: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnChange: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDropDown: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnUserInput: TDTParseInputEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property Color: TColor; read write;<br /> &nbsp;&nbsp;&nbsp; property Font: TFont; read write;<br /> &nbsp;&nbsp;&nbsp; property ParentColor: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property ParentFont: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property OnChange: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnClick: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDblClick: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnEnter: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnExit: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnKeyDown: TKeyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnKeyPress: TKeyPressEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnKeyUp: TKeyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property DragCursor: Longint; read write;<br /> &nbsp;&nbsp;&nbsp; property DragMode: TDragMode; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDragDrop: TDragDropEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDragOver: TDragOverEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnEndDrag: TEndDragEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnStartDrag: TStartDragEvent; read write;<br /> &nbsp; end;<br /> <br /> &nbsp; TCalDayOfWeek = (dowMonday, dowTuesday, dowWednesday, dowThursday, dowFriday, dowSaturday, dowSunday, dowLocaleDefault);<br /> <br /> &nbsp; TOnGetMonthInfoEvent = procedure(Sender: TObject; Month: LongWord; var MonthBoldInfo: LongWord);<br /> <br /> &nbsp; TNewMonthCalendar = class(TNewCommonCalendar)<br /> &nbsp;&nbsp;&nbsp; property AutoSize: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property CalColors: TNewMonthCalColors; read write;<br /> &nbsp;&nbsp;&nbsp; property MultiSelect: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property Date: TDate; read write;<br /> &nbsp;&nbsp;&nbsp; property FirstDayOfWeek: TCalDayOfWeek; read write;<br /> &nbsp;&nbsp;&nbsp; property MaxDate: TDate; read write;<br /> &nbsp;&nbsp;&nbsp; property MaxSelectRange: Integer; read write;<br /> &nbsp;&nbsp;&nbsp; property MinDate: TDate; read write;<br /> &nbsp;&nbsp;&nbsp; property ShowToday: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property ShowTodayCircle: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property WeekNumbers: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property OnGetMonthInfo: TOnGetMonthInfoEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property Font: TFont; read write;<br /> &nbsp;&nbsp;&nbsp; property ParentFont: Boolean; read write;<br /> &nbsp;&nbsp;&nbsp; property OnClick: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDblClick: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnEnter: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnExit: TNotifyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnKeyDown: TKeyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnKeyPress: TKeyPressEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnKeyUp: TKeyEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property DragCursor: Longint; read write;<br /> &nbsp;&nbsp;&nbsp; property DragMode: TDragMode; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDragDrop: TDragDropEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnDragOver: TDragOverEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnEndDrag: TEndDragEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnStartDrag: TStartDragEvent; read write;<br /> &nbsp;&nbsp;&nbsp; property OnChange: TNotifyEvent; read write;<br /> &nbsp; end;<br /><br /> (********************************************************)<br /> (*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *)<br /> (* Here's the list of constants used by these functions *)<br /> (*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *)<br /> (********************************************************)<br /> <br /> const<br /> &nbsp; wpWelcome = 1;<br /> &nbsp; wpLicense = 2;<br /> &nbsp; wpPassword = 3;<br /> &nbsp; wpInfoBefore = 4;<br /> &nbsp; wpUserInfo = 5;<br /> &nbsp; wpSelectDir = 6;<br /> &nbsp; wpSelectComponents = 7;<br /> &nbsp; wpSelectProgramGroup = 8;<br /> &nbsp; wpSelectTasks = 9;<br /> &nbsp; wpReady = 10;<br /> &nbsp; wpPreparing = 11;<br /> &nbsp; wpInstalling = 12;<br /> &nbsp; wpInfoAfter = 13;<br /> &nbsp; wpFinished = 14;<br /> <br /> &nbsp; mrNone = 0;<br /> &nbsp; mrOk = 1;<br /> &nbsp; mrCancel = 2;<br /> &nbsp; mrAbort = 3;<br /> &nbsp; mrRetry = 4;<br /> &nbsp; mrIgnore = 5;<br /> &nbsp; mrYes = 6;<br /> &nbsp; mrNo = 7;<br /> &nbsp; mrAll = 8;<br /> &nbsp; mrNoToAll = 9;<br /> &nbsp; mrYesToAll = 10;<br /> &nbsp; crDefault = 0;<br /> &nbsp; crNone = -1;<br /> &nbsp; crArrow = -2;<br /> &nbsp; crCross = -3;<br /> &nbsp; crIBeam = -4;<br /> &nbsp; crSizeNESW = -6;<br /> &nbsp; crSizeNS = -7;<br /> &nbsp; crSizeNWSE = -8;<br /> &nbsp; crSizeWE = -9;<br /> &nbsp; crUpArrow = -10;<br /> &nbsp; crHourGlass = -11;<br /> &nbsp; crDrag = -12;<br /> &nbsp; crNoDrop = -13;<br /> &nbsp; crHSplit = -14;<br /> &nbsp; crVSplit = -15;<br /> &nbsp; crMultiDrag = -16;<br /> &nbsp; crSQLWait = -17;<br /> &nbsp; crNo = -18;<br /> &nbsp; crAppStart = -19;<br /> &nbsp; crHelp = -20;<br /> &nbsp; crHand = 1;<br /> <br /> &nbsp; MB_OK = $00000000;<br /> &nbsp; MB_OKCANCEL = $00000001;<br /> &nbsp; MB_ABORTRETRYIGNORE = $00000002;<br /> &nbsp; MB_YESNOCANCEL = $00000003;<br /> &nbsp; MB_YESNO = $00000004;<br /> &nbsp; MB_RETRYCANCEL = $00000005;<br /> &nbsp; MB_DEFBUTTON1 = $00000000;<br /> &nbsp; MB_DEFBUTTON2 = $00000100;<br /> &nbsp; MB_DEFBUTTON3 = $00000200;<br /> &nbsp; MB_SETFOREGROUND = $00010000;<br /> &nbsp; MB_ICONWARNING = $00000030;<br /> &nbsp; MB_ICONERROR = $00000010;<br /> &nbsp; MB_ICONINFORMATION = $00000040;<br /> &nbsp; MB_ICONQUESTION = $00000020;<br /> <br /> &nbsp; IDOK = 1;<br /> &nbsp; IDCANCEL = 2;<br /> &nbsp; IDABORT = 3;<br /> &nbsp; IDRETRY = 4;<br /> &nbsp; IDIGNORE = 5;<br /> &nbsp; IDYES = 6;<br /> &nbsp; IDNO = 7;<br /> <br /> &nbsp; MaxInt = $7FFFFFFF;<br /> <br /> &nbsp; HWND_BROADCAST = $FFFF;<br /> <br /> &nbsp; CodeRootKeyFlag32Bit = $01000000;<br /> &nbsp; CodeRootKeyFlag64Bit = $02000000;<br /> <br /> &nbsp; HKEY_CLASSES_ROOT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = $80000000;<br /> &nbsp; HKEY_CLASSES_ROOT_32&nbsp;&nbsp; = HKEY_CLASSES_ROOT or CodeRootKeyFlag32Bit;<br /> &nbsp; HKEY_CLASSES_ROOT_64&nbsp;&nbsp; = HKEY_CLASSES_ROOT or CodeRootKeyFlag64Bit;<br /> &nbsp; HKEY_CURRENT_USER&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = $80000001;<br /> &nbsp; HKEY_CURRENT_USER_32&nbsp;&nbsp; = HKEY_CURRENT_USER or CodeRootKeyFlag32Bit;<br /> &nbsp; HKEY_CURRENT_USER_64&nbsp;&nbsp; = HKEY_CURRENT_USER or CodeRootKeyFlag64Bit;<br /> &nbsp; HKEY_LOCAL_MACHINE&nbsp;&nbsp;&nbsp;&nbsp; = $80000002;<br /> &nbsp; HKEY_LOCAL_MACHINE_32&nbsp; = HKEY_LOCAL_MACHINE or CodeRootKeyFlag32Bit;<br /> &nbsp; HKEY_LOCAL_MACHINE_64&nbsp; = HKEY_LOCAL_MACHINE or CodeRootKeyFlag64Bit;<br /> &nbsp; HKEY_USERS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = $80000003;<br /> &nbsp; HKEY_USERS_32&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = HKEY_USERS or CodeRootKeyFlag32Bit;<br /> &nbsp; HKEY_USERS_64&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = HKEY_USERS or CodeRootKeyFlag64Bit;<br /> &nbsp; HKEY_PERFORMANCE_DATA&nbsp; = $80000004;<br /> &nbsp; HKEY_CURRENT_CONFIG&nbsp;&nbsp;&nbsp; = $80000005;<br /> &nbsp; HKEY_CURRENT_CONFIG_32 = HKEY_CURRENT_CONFIG or CodeRootKeyFlag32Bit;<br /> &nbsp; HKEY_CURRENT_CONFIG_64 = HKEY_CURRENT_CONFIG or CodeRootKeyFlag64Bit;<br /> &nbsp; HKEY_DYN_DATA&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = $80000006;<br /> <br /> &nbsp; HKCR&nbsp;&nbsp; = HKEY_CLASSES_ROOT;<br /> &nbsp; HKCR32 = HKEY_CLASSES_ROOT or CodeRootKeyFlag32Bit;<br /> &nbsp; HKCR64 = HKEY_CLASSES_ROOT or CodeRootKeyFlag64Bit;<br /> &nbsp; HKCU&nbsp;&nbsp; = HKEY_CURRENT_USER;<br /> &nbsp; HKCU32 = HKEY_CURRENT_USER or CodeRootKeyFlag32Bit;<br /> &nbsp; HKCU64 = HKEY_CURRENT_USER or CodeRootKeyFlag64Bit;<br /> &nbsp; HKLM&nbsp;&nbsp; = HKEY_LOCAL_MACHINE;<br /> &nbsp; HKLM32 = HKEY_LOCAL_MACHINE or CodeRootKeyFlag32Bit;<br /> &nbsp; HKLM64 = HKEY_LOCAL_MACHINE or CodeRootKeyFlag64Bit;<br /> &nbsp; HKU&nbsp;&nbsp;&nbsp; = HKEY_USERS;<br /> &nbsp; HKU32&nbsp; = HKEY_USERS or CodeRootKeyFlag32Bit;<br /> &nbsp; HKU64&nbsp; = HKEY_USERS or CodeRootKeyFlag64Bit;<br /> &nbsp; HKCC&nbsp;&nbsp; = HKEY_CURRENT_CONFIG;<br /> &nbsp; HKCC32 = HKEY_CURRENT_CONFIG or CodeRootKeyFlag32Bit;<br /> &nbsp; HKCC64 = HKEY_CURRENT_CONFIG or CodeRootKeyFlag64Bit;<br /> <br /> &nbsp; SW_HIDE = 0;<br /> &nbsp; SW_SHOWNORMAL = 1;<br /> &nbsp; SW_SHOWMINIMIZED = 2;<br /> &nbsp; SW_SHOWMAXIMIZED = 3;<br /> &nbsp; SW_SHOW = 5;<br /> &nbsp; SW_SHOWMINNOACTIVE = 7;<br /> <br /> &nbsp; FILE_ATTRIBUTE_READONLY&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = $00000001;<br /> &nbsp; FILE_ATTRIBUTE_HIDDEN&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = $00000002;<br /> &nbsp; FILE_ATTRIBUTE_SYSTEM&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = $00000004;<br /> &nbsp; FILE_ATTRIBUTE_DIRECTORY&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = $00000010;<br /> &nbsp; FILE_ATTRIBUTE_ARCHIVE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = $00000020;<br /> &nbsp; FILE_ATTRIBUTE_DEVICE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = $00000040;<br /> &nbsp; FILE_ATTRIBUTE_NORMAL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = $00000080;<br /> &nbsp; FILE_ATTRIBUTE_TEMPORARY&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = $00000100;<br /> &nbsp; FILE_ATTRIBUTE_SPARSE_FILE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = $00000200;<br /> &nbsp; FILE_ATTRIBUTE_REPARSE_POINT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = $00000400;<br /> &nbsp; FILE_ATTRIBUTE_COMPRESSED&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = $00000800;<br /> &nbsp; FILE_ATTRIBUTE_OFFLINE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = $00001000;<br /> &nbsp; FILE_ATTRIBUTE_NOT_CONTENT_INDEXED = $00002000;<br /> &nbsp; FILE_ATTRIBUTE_ENCRYPTED&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = $00004000;<br /> <br /> &nbsp; VER_NT_WORKSTATION&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = $0000001;<br /> &nbsp; VER_NT_DOMAIN_CONTROLLER = $0000002;<br /> &nbsp; VER_NT_SERVER&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = $0000003;<br /> <br /> &nbsp; VER_SUITE_SMALLBUSINESS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = $00000001;<br /> &nbsp; VER_SUITE_ENTERPRISE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = $00000002;<br /> &nbsp; VER_SUITE_BACKOFFICE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = $00000004;<br /> &nbsp; VER_SUITE_COMMUNICATIONS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = $00000008;<br /> &nbsp; VER_SUITE_TERMINAL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = $00000010;<br /> &nbsp; VER_SUITE_SMALLBUSINESS_RESTRICTED = $00000020;<br /> &nbsp; VER_SUITE_EMBEDDEDNT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = $00000040;<br /> &nbsp; VER_SUITE_DATACENTER&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = $00000080;<br /> &nbsp; VER_SUITE_SINGLEUSERTS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = $00000100;<br /> &nbsp; VER_SUITE_PERSONAL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = $00000200;<br /> &nbsp; VER_SUITE_BLADE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = $00000400;<br /> &nbsp; VER_SUITE_EMBEDDED_RESTRICTED&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = $00000800;<br /> &nbsp; VER_SUITE_SECURITY_APPLIANCE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = $00001000;<br /> <br /> &nbsp; soFromBeginning = 0;<br /> &nbsp; soFromCurrent = 1;<br /> &nbsp; soFromEnd = 2;<br /> &nbsp; toEOF = #0;<br /> &nbsp; toSymbol = #1;<br /> &nbsp; toString = #2;<br /> &nbsp; toInteger = #3;<br /> &nbsp; toFloat = #4;<br /> &nbsp; fmCreate = $FFFF;<br /> &nbsp; fmOpenRead = 0;<br /> &nbsp; fmOpenWrite = 1;<br /> &nbsp; fmOpenReadWrite = 2;<br /> &nbsp; fmShareCompat = 0;<br /> &nbsp; fmShareExclusive = $10;<br /> &nbsp; fmShareDenyWrite = $20;<br /> &nbsp; fmShareDenyRead = $30;<br /> &nbsp; fmShareDenyNone = $40;<br /> &nbsp; SecsPerDay = 86400;<br /> &nbsp; MSecPerDay = 86400000;<br /> &nbsp; DateDelta = 693594;<br /> <br /> &nbsp; clScrollBar&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = $80000000;<br /> &nbsp; clBackground&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = $80000001;<br /> &nbsp; clActiveCaption&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = $80000002;<br /> &nbsp; clInactiveCaption&nbsp;&nbsp;&nbsp;&nbsp; = $80000003;<br /> &nbsp; clMenu&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = $80000004;<br /> &nbsp; clWindow&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = $80000005;<br /> &nbsp; clWindowFrame&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = $80000006;<br /> &nbsp; clMenuText&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = $80000007;<br /> &nbsp; clWindowText&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = $80000008;<br /> &nbsp; clCaptionText&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = $80000009;<br /> &nbsp; clActiveBorder&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = $8000000A;<br /> &nbsp; clInactiveBorder&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = $8000000B;<br /> &nbsp; clAppWorkSpace&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = $8000000C;<br /> &nbsp; clHighlight&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = $8000000D;<br /> &nbsp; clHighlightText&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = $8000000E;<br /> &nbsp; clBtnFace&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = $8000000F;<br /> &nbsp; clBtnShadow&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = $80000010;<br /> &nbsp; clGrayText&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = $80000011;<br /> &nbsp; clBtnText&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = $80000012;<br /> &nbsp; clInactiveCaptionText = $80000013;<br /> &nbsp; clBtnHighlight&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = $80000014;<br /> &nbsp; cl3DDkShadow&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = $80000015;<br /> &nbsp; cl3DLight&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = $80000016;<br /> &nbsp; clInfoText&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = $80000017;<br /> &nbsp; clInfoBk&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = $80000018;<br /> &nbsp; clHotLight&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = $8000001A;<br /> <br /> &nbsp; clBlack&nbsp;&nbsp; = $000000;<br /> &nbsp; clMaroon&nbsp; = $000080;<br /> &nbsp; clGreen&nbsp;&nbsp; = $008000;<br /> &nbsp; clOlive&nbsp;&nbsp; = $008080;<br /> &nbsp; clNavy&nbsp;&nbsp;&nbsp; = $800000;<br /> &nbsp; clPurple&nbsp; = $800080;<br /> &nbsp; clTeal&nbsp;&nbsp;&nbsp; = $808000;<br /> &nbsp; clGray&nbsp;&nbsp;&nbsp; = $808080;<br /> &nbsp; clSilver&nbsp; = $C0C0C0;<br /> &nbsp; clRed&nbsp;&nbsp;&nbsp;&nbsp; = $0000FF;<br /> &nbsp; clLime&nbsp;&nbsp;&nbsp; = $00FF00;<br /> &nbsp; clYellow&nbsp; = $00FFFF;<br /> &nbsp; clBlue&nbsp;&nbsp;&nbsp; = $FF0000;<br /> &nbsp; clFuchsia = $FF00FF;<br /> &nbsp; clAqua&nbsp;&nbsp;&nbsp; = $FFFF00;<br /> &nbsp; clLtGray&nbsp; = $C0C0C0;<br /> &nbsp; clDkGray&nbsp; = $808080;<br /> &nbsp; clWhite&nbsp;&nbsp; = $FFFFFF;<br /> &nbsp; clNone&nbsp;&nbsp;&nbsp; = $1FFFFFFF;<br /> &nbsp; clDefault = $20000000;<br /> <br /> &nbsp; irInstall&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 0;<br /> &nbsp; irNotOnThisPlatform = 1;<br /> &nbsp; irVerTooLow&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 2;<br /> &nbsp; irVerTooHigh&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 3;<br /> &nbsp; irInvalid&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 4; <script language="javascript" type="text/javascript">highlightSyntax('delphi_Tc4NTM','delphi');</script></code></div></body></html>