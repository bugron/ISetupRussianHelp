<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251" />
<meta http-equiv="X-UA-Compatible" content="IE=8" />
<title>Pascal Scripting: Поддерживаемые классы</title>
<!--[if IE 6]><style type="text/css">html{overflow-y:scroll}</style><![endif]-->
<link rel="stylesheet" type="text/css" href="styles.css" />
<script type="text/javascript" src="Inno Faq 1.4/core.js"></script><script type="text/javascript" src="Inno Faq 1.4/delphi.js"></script><script type="text/javascript" src="Inno Faq 1.4/includer.js"></script><script type="text/javascript" src="topic.js"></script>
</head>
<body>
<h1 class="topicheading">Pascal Scripting: Поддерживаемые классы</h1>
<div class="topicbody">
  <p>Ниже приведен список поддерживаемых классов, которые можно использовать в Pascal-скрипте. Также доступны два объекта: <tt>MainForm</tt> of type <tt>TMainForm</tt>, <tt>WizardForm</tt> типа <tt>TWizardForm</tt> и <tt>UninstallProgressForm</tt> типа <tt>TUninstallProgressForm</tt>, и одна специальная константа: <tt>crHand</tt> типа <tt>TControl.Cursor</tt>. Обратите внимание: <tt>MainForm</tt> отображается только если <a href="topic_setup_windowvisible.htm">WindowVisible</a>=<tt>yes</tt>.</p>
  <p>Также полезно воспользоваться библиотекой визуальных компонентов Delphi (Delphi Visual Component Library (VCL)). Справка от Borland для представленных ниже классов наиболее доступно описывает классы VCL, с которыми работает Inno Setup. Обратитесь к <a href="http://docs.embarcadero.com/products/rad_studio/" target="_blank" title="http://docs.embarcadero.com/products/rad_studio"/></a>http://docs.embarcadero.com/products/rad_studio/</a><img src="images/extlink.gif" alt=" [external link]" />.</p>
  <script language="javascript" type="text/javascript">includeSyntax('delphi');</script>
  <code id="delphi_Tc4NTM"><br />
  <p><br />
    <tt><a name="TObject" id="TObject">TObject</a> = class<br />
      &nbsp;&nbsp;constructor Create;<br />
      &nbsp;&nbsp;procedure Free;<br />
      end;<br />
      <br />
      <a name="TPersistent" id="TPersistent">TPersistent</a> = class(<a href="#TObject">TObject</a>)<br />
      &nbsp;&nbsp;procedure Assign(Source: <a href="#TPersistent">TPersistent</a>);<br />
      end;<br />
      <br />
      <a name="TComponent" id="TComponent">TComponent</a> = class(<a href="#TPersistent">TPersistent</a>)<br />
      &nbsp;&nbsp;function FindComponent(AName: String): <a href="#TComponent">TComponent</a>;<br />
      &nbsp;&nbsp;constructor Create(AOwner: <a href="#TComponent">TComponent</a>);<br />
      &nbsp;&nbsp;property Owner: <a href="#TComponent">TComponent</a>; read write;<br />
      &nbsp;&nbsp;procedure DestroyComponents;<br />
      &nbsp;&nbsp;procedure Destroying;<br />
      &nbsp;&nbsp;procedure FreeNotification(AComponent: <a href="#TComponent">TComponent</a>);<br />
      &nbsp;&nbsp;procedure InsertComponent(AComponent: <a href="#TComponent">TComponent</a>);<br />
      &nbsp;&nbsp;procedure RemoveComponent(AComponent: <a href="#TComponent">TComponent</a>);<br />
      &nbsp;&nbsp;property Components[Index: Integer]: <a href="#TComponent">TComponent</a>; read;<br />
      &nbsp;&nbsp;property ComponentCount: Integer; read;<br />
      &nbsp;&nbsp;property ComponentIndex: Integer; read write;<br />
      &nbsp;&nbsp;property ComponentState: Byte; read;<br />
      &nbsp;&nbsp;property DesignInfo: Longint; read write;<br />
      &nbsp;&nbsp;property Name: String; read write;<br />
      &nbsp;&nbsp;property Tag: Longint; read write;<br />
      end;<br />
      <br />
      <a name="TStrings" id="TStrings">TStrings</a> = class(<a href="#TPersistent">TPersistent</a>)<br />
      &nbsp;&nbsp;function Add(S: String): Integer;<br />
      &nbsp;&nbsp;procedure Append(S: String);<br />
      &nbsp;&nbsp;procedure AddStrings(Strings: <a href="#TStrings">TStrings</a>);<br />
      &nbsp;&nbsp;procedure Clear;<br />
      &nbsp;&nbsp;procedure Delete(Index: Integer);<br />
      &nbsp;&nbsp;function IndexOf(const S: String): Integer;<br />
      &nbsp;&nbsp;procedure Insert(Index: Integer; S: String);<br />
      &nbsp;&nbsp;property Count: Integer; read;<br />
      &nbsp;&nbsp;property Text: String; read write;<br />
      &nbsp;&nbsp;property CommaText: String; read write;<br />
      &nbsp;&nbsp;procedure LoadFromFile(FileName: String);<br />
      &nbsp;&nbsp;procedure SaveToFile(FileName: String);<br />
      &nbsp;&nbsp;property Strings[Index: Integer]: String; read write;<br />
      &nbsp;&nbsp;property Objects[Index: Integer]: <a href="#TObject">TObject</a>; read write;<br />
      end;<br />
      <br />
      <a name="TNotifyEvent" id="TNotifyEvent">TNotifyEvent</a> = procedure(Sender: <a href="#TObject">TObject</a>);<br />
      <br />
      <a name="TStringList" id="TStringList">TStringList</a> = class(<a href="#TStrings">TStrings</a>)<br />
      &nbsp;&nbsp;function Find(S: String; var Index: Integer): Boolean;<br />
      &nbsp;&nbsp;procedure Sort;<br />
      &nbsp;&nbsp;property Duplicates: TDuplicates; read write;<br />
      &nbsp;&nbsp;property Sorted: Boolean; read write;<br />
      &nbsp;&nbsp;property OnChange: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
      &nbsp;&nbsp;property OnChanging: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
      end;<br />
      <br />
      <a name="TStream" id="TStream">TStream</a> = class(<a href="#TObject">TObject</a>)<br />
      &nbsp;&nbsp;function Read(Buffer: String; Count: Longint): Longint;<br />
      &nbsp;&nbsp;function Write(Buffer: String; Count: Longint): Longint;<br />
      &nbsp;&nbsp;function Seek(Offset: Longint; Origin: Word): Longint;<br />
      &nbsp;&nbsp;procedure ReadBuffer(Buffer: String; Count: Longint);<br />
      &nbsp;&nbsp;procedure WriteBuffer(Buffer: String; Count: Longint);<br />
      &nbsp;&nbsp;function CopyFrom(Source: <a href="#TStream">TStream</a>; Count: Longint): Longint;<br />
      &nbsp;&nbsp;property Position: Longint; read write;<br />
      &nbsp;&nbsp;property Size: Longint; read write;<br />
      end;<br />
      <br />
      <a name="THandleStream" id="THandleStream">THandleStream</a> = class(<a href="#TStream">TStream</a>)<br />
      &nbsp;&nbsp;constructor Create(AHandle: Integer);<br />
      &nbsp;&nbsp;property Handle: Integer; read;<br />
      end;<br />
      <br />
      <a name="TFileStream" id="TFileStream">TFileStream</a> = class(<a href="#THandleStream">THandleStream</a>)<br />
      &nbsp;&nbsp;constructor Create(Filename: String; Mode: Word);<br />
      end;<br />
      <br />
	  <a name="TStringStream">TStringStream</a> = class(<a href="#TStream">TStream</a>)<br/>
	  &nbsp;&nbsp;constructor Create(AString: String);<br/>
	  end;<br/>
	  <br/>
      <a name="TGraphicsObject" id="TGraphicsObject">TGraphicsObject</a> = class(<a href="#TPersistent">TPersistent</a>)<br />
      &nbsp;&nbsp;property OnChange: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
      end;<br />
      <br />
      <a name="TFontStyle" id="TFontStyle">TFontStyle</a> = (fsBold, fsItalic, fsUnderline, fsStrikeOut);<br />
      <br />
      <a name="TFontStyles" id="TFontStyles">TFontStyles</a> = set of <a href="#TFontStyle">TFontStyle</a>;<br />
      <br />
      <a name="TFont" id="TFont">TFont</a> = class(<a href="#TGraphicsObject">TGraphicsObject</a>)<br />
      &nbsp;&nbsp;constructor Create;<br />
      &nbsp;&nbsp;property Handle: Integer; read;<br />
      &nbsp;&nbsp;property Color: Integer; read write;<br />
      &nbsp;&nbsp;property Height: Integer; read write;<br />
      &nbsp;&nbsp;property Name: String; read write;<br />
      &nbsp;&nbsp;property Pitch: Byte; read write;<br />
      &nbsp;&nbsp;property Size: Integer; read write;<br />
      &nbsp;&nbsp;property PixelsPerInch: Integer; read write;<br />
      &nbsp;&nbsp;property Style: <a href="#TFontStyles">TFontStyles</a>; read write;<br />
      end;<br />
      <br />
      <a name="TCanvas" id="TCanvas">TCanvas</a> = class(<a href="#TPersistent">TPersistent</a>)<br />
      &nbsp;&nbsp;procedure Arc(X1, Y1, X2, Y2, X3, Y3, X4, Y4: Integer);<br />
      &nbsp;&nbsp;procedure Chord(X1, Y1, X2, Y2, X3, Y3, X4, Y4: Integer);<br />
      &nbsp;&nbsp;procedure Draw(X, Y: Integer; Graphic: <a href="#TGraphic">TGraphic</a>);<br />
      &nbsp;&nbsp;procedure Ellipse(X1, Y1, X2, Y2: Integer);<br />
      &nbsp;&nbsp;procedure FloodFill(X, Y: Integer; Color: TColor; FillStyle: Byte);<br />
      &nbsp;&nbsp;procedure LineTo(X, Y: Integer);<br />
      &nbsp;&nbsp;procedure MoveTo(X, Y: Integer);<br />
      &nbsp;&nbsp;procedure Pie(X1, Y1, X2, Y2, X3, Y3, X4, Y4: Integer);<br />
      &nbsp;&nbsp;procedure Rectangle(X1, Y1, X2, Y2: Integer);<br />
      &nbsp;&nbsp;procedure Refresh;<br />
      &nbsp;&nbsp;procedure RoundRect(X1, Y1, X2, Y2, X3, Y3: Integer);<br />
      &nbsp;&nbsp;function TextHeight(Text: String): Integer;<br />
      &nbsp;&nbsp;procedure TextOut(X, Y: Integer; Text: String);<br />
      &nbsp;&nbsp;function TextWidth(Text: String): Integer;<br />
      &nbsp;&nbsp;property Handle: Integer; read write;<br />
      &nbsp;&nbsp;property Pixels: Integer Integer Integer; read write;<br />
      &nbsp;&nbsp;property Brush: <a href="#TBrush">TBrush</a>; read;<br />
      &nbsp;&nbsp;property CopyMode: Byte; read write;<br />
      &nbsp;&nbsp;property Font: <a href="#TFont">TFont</a>; read;<br />
      &nbsp;&nbsp;property Pen: <a href="#TPen">TPen</a>; read;<br />
      end;<br />
      <br />
      <a name="TPenMode" id="TPenMode">TPenMode</a> = (pmBlack, pmWhite, pmNop, pmNot, pmCopy, pmNotCopy, pmMergePenNot, pmMaskPenNot, pmMergeNotPen, pmMaskNotPen, pmMerge, pmNotMerge, pmMask, pmNotMask, pmXor, pmNotXor);<br />
      <br />
      <a name="TPenStyle" id="TPenStyle">TPenStyle</a> = (psSolid, psDash, psDot, psDashDot, psDashDotDot, psClear, psInsideFrame);<br />
      <br />
      <a name="TPen" id="TPen">TPen</a> = class(<a href="#TGraphicsObject">TGraphicsObject</a>)<br />
      &nbsp;&nbsp;constructor Create;<br />
      &nbsp;&nbsp;property Color: TColor; read write;<br />
      &nbsp;&nbsp;property Mode: <a href="#TPenMode">TPenMode</a>; read write;<br />
      &nbsp;&nbsp;property Style: <a href="#TPenStyle">TPenStyle</a>; read write;<br />
      &nbsp;&nbsp;property Width: Integer; read write;<br />
      end;<br />
      <br />
      <a name="TBrushStyle" id="TBrushStyle">TBrushStyle</a> = (bsSolid, bsClear, bsHorizontal, bsVertical, bsFDiagonal, bsBDiagonal, bsCross, bsDiagCross);<br />
      <br />
      <a name="TBrush" id="TBrush">TBrush</a> = class(<a href="#TGraphicsObject">TGraphicsObject</a>)<br />
      &nbsp;&nbsp;constructor Create;<br />
      &nbsp;&nbsp;property Color: TColor; read write;<br />
      &nbsp;&nbsp;property Style: <a href="#TBrushStyle">TBrushStyle</a>; read write;<br />
      end;<br />
      <br />
      <a name="TGraphic" id="TGraphic">TGraphic</a> = class(<a href="#TPersistent">TPersistent</a>)<br />
      &nbsp;&nbsp;procedure LoadFromFile(const Filename: String);<br />
      &nbsp;&nbsp;procedure SaveToFile(const Filename: String);<br />
      &nbsp;&nbsp;property Empty: Boolean; read write;<br />
      &nbsp;&nbsp;property Height: Integer; read write;<br />
      &nbsp;&nbsp;property Modified: Boolean; read write;<br />
      &nbsp;&nbsp;property Width: Integer; read write;<br />
      &nbsp;&nbsp;property OnChange: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
      end;<br />
      <br />
      <a name="TBitmap" id="TBitmap">TBitmap</a> = class(<a href="#TGraphic">TGraphic</a>)<br />
      &nbsp;&nbsp;procedure LoadFromStream(Stream: <a href="#TStream">TStream</a>);<br />
      &nbsp;&nbsp;procedure SaveToStream(Stream: <a href="#TStream">TStream</a>);<br />
      &nbsp;&nbsp;property Canvas: <a href="#TCanvas">TCanvas</a>; read write;<br />
      &nbsp;&nbsp;property Handle: HBITMAP; read write;<br />
      end;<br />
      <br />
      <a name="TAlign" id="TAlign">TAlign</a> = (alNone, alTop, alBottom, alLeft, alRight, alClient);<br />
      <br />
      <a name="TControl" id="TControl">TControl</a> = class(<a href="#TComponent">TComponent</a>)<br />
      &nbsp;&nbsp;constructor Create(AOwner: <a href="#TComponent">TComponent</a>);<br />
      &nbsp;&nbsp;procedure BringToFront;<br />
      &nbsp;&nbsp;procedure Hide;<br />
      &nbsp;&nbsp;procedure Invalidate;<br />
      &nbsp;&nbsp;procedure Refresh;<br />
      &nbsp;&nbsp;procedure Repaint;<br />
      &nbsp;&nbsp;procedure SendToBack;<br />
      &nbsp;&nbsp;procedure Show;<br />
      &nbsp;&nbsp;procedure Update;<br />
      &nbsp;&nbsp;procedure SetBounds(ALeft, ATop, AWidth, AHeight: Integer);<br />
      &nbsp;&nbsp;property Left: Integer; read write;<br />
      &nbsp;&nbsp;property Top: Integer; read write;<br />
      &nbsp;&nbsp;property Width: Integer; read write;<br />
      &nbsp;&nbsp;property Height: Integer; read write;<br />
      &nbsp;&nbsp;property Hint: String; read write;<br />
      &nbsp;&nbsp;property Align: <a href="#TAlign">TAlign</a>; read write;<br />
      &nbsp;&nbsp;property ClientHeight: Longint; read write;<br />
      &nbsp;&nbsp;property ClientWidth: Longint; read write;<br />
      &nbsp;&nbsp;property ShowHint: Boolean; read write;<br />
      &nbsp;&nbsp;property Visible: Boolean; read write;<br />
      &nbsp;&nbsp;property Hint: String; read write;<br />
      &nbsp;&nbsp;property Cursor: Integer; read write;<br />
      end;<br />
      <br />
      <a name="TWinControl" id="TWinControl">TWinControl</a> = class(<a href="#TControl">TControl</a>)<br />
      &nbsp;&nbsp;property Parent: <a href="#TWinControl">TWinControl</a>; read write;<br />
      &nbsp;&nbsp;property ParentBackground: Boolean; read write;<br />
      &nbsp;&nbsp;property Handle: Longint; read write;<br />
      &nbsp;&nbsp;property Showing: Boolean; read;<br />
      &nbsp;&nbsp;property TabOrder: Integer; read write;<br />
      &nbsp;&nbsp;property TabStop: Boolean; read write;<br />
      &nbsp;&nbsp;function CanFocus: Boolean;<br />
      &nbsp;&nbsp;function Focused: Boolean;<br />
      &nbsp;&nbsp;property Controls[Index: Integer]: <a href="#TControl">TControl</a>; read;<br />
      &nbsp;&nbsp;property ControlCount: Integer; read;<br />
      end;<br />
      <br />
      <a name="TGraphicControl" id="TGraphicControl">TGraphicControl</a> = class(<a href="#TControl">TControl</a>)<br />
      end;<br />
      <br />
      <a name="TCustomControl" id="TCustomControl">TCustomControl</a> = class(<a href="#TWinControl">TWinControl</a>)<br />
      end;<br />
      <br />
      <a name="TScrollBarKind" id="TScrollBarKind">TScrollBarKind</a> = (sbHorizontal, sbVertical);<br />
      <br />
      <a name="TScrollBarInc" id="TScrollBarInc">TScrollBarInc</a> = SmallInt;<br />
      <br />
    </tt><tt><a name="TScrollingWinControl" id="TScrollingWinControl">TScrollingWinControl</a> = class(<a href="topic_scriptclasses.htm#TWinControl">TWinControl</a>)<br />
        &nbsp;&nbsp;procedure ScrollInView(AControl: <a href="topic_scriptclasses.htm#TControl">TControl</a>);<br />
        end;<br />
        <br />
        <a name="TFormBorderStyle" id="TFormBorderStyle">TFormBorderStyle</a> = (bsNone, bsSingle, bsSizeable, bsDialog, bsToolWindow, bsSizeToolWin);<br />
        <br />
        <a name="TBorderIcon" id="TBorderIcon">TBorderIcon</a> = (biSystemMenu, biMinimize, biMaximize, biHelp);<br />
        <br />
        <a name="TBorderIcons" id="TBorderIcons">TBorderIcons</a> = set of <a href="topic_scriptclasses.htm#TBorderIcon">TBorderIcon</a>;<br />
        <br />
        <a name="TPosition" id="TPosition">TPosition</a> = (poDesigned, poDefault, poDefaultPosOnly, poDefaultSizeOnly, poScreenCenter, poDesktopCenter, poMainFormCenter, poOwnerFormCenter);<br />
        <br />
        <a name="TCloseAction" id="TCloseAction">TCloseAction</a> = (caNone, caHide, caFree, caMinimize);<br />
        <br />
        <a name="TCloseEvent" id="TCloseEvent">TCloseEvent</a> = procedure(Sender: <a href="topic_scriptclasses.htm#TObject">TObject</a>; var Action: <a href="topic_scriptclasses.htm#TCloseAction">TCloseAction</a>);<br />
        <br />
        <a name="TCloseQueryEvent" id="TCloseQueryEvent">TCloseQueryEvent</a> = procedure(Sender: <a href="topic_scriptclasses.htm#TObject">TObject</a>; var CanClose: Boolean);<br />
        <br />
        <a name="TEShiftState" id="TEShiftState">TEShiftState</a> = (ssShift, ssAlt, ssCtrl, ssLeft, ssRight, ssMiddle, ssDouble);<br />
        <br />
        <a name="TShiftState" id="TShiftState">TShiftState</a> = set of <a href="topic_scriptclasses.htm#TEShiftState">TEShiftState</a>;<br />
        <br />
        <a name="TKeyEvent" id="TKeyEvent">TKeyEvent</a> = procedure(Sender: <a href="topic_scriptclasses.htm#TObject">TObject</a>; var Key: Word; Shift: <a href="topic_scriptclasses.htm#TShiftState">TShiftState</a>);<br />
        <br />
        <a name="TKeyPressEvent" id="TKeyPressEvent">TKeyPressEvent</a> = procedure(Sender: <a href="topic_scriptclasses.htm#TObject">TObject</a>; var Key: Char);<br />
        </tt><tt><br />
          <br />
          <a name="TForm" id="TForm">TForm</a> = class(<a href="#TScrollingWinControl">TScrollingWinControl</a>)<br />
          &nbsp;&nbsp;constructor CreateNew(AOwner: <a href="#TComponent">TComponent</a>);<br />
          &nbsp;&nbsp;procedure Close;<br />
          &nbsp;&nbsp;procedure Hide;<br />
          &nbsp;&nbsp;procedure Show;<br />
          &nbsp;&nbsp;function ShowModal: Integer;<br />
          &nbsp;&nbsp;procedure Release;<br />
          &nbsp;&nbsp;property Active: Boolean; read;<br />
          &nbsp;&nbsp;property ActiveControl: <a href="#TWinControl">TWinControl</a>; read write;<br />
          &nbsp;&nbsp;property BorderIcons: <a href="#TBorderIcons">TBorderIcons</a>; read write;<br />
          &nbsp;&nbsp;property BorderStyle: <a href="#TFormBorderStyle">TFormBorderStyle</a>; read write;<br />
          &nbsp;&nbsp;property Caption: String; read write;<br />
          &nbsp;&nbsp;property AutoScroll: Boolean; read write;<br />
          &nbsp;&nbsp;property Color: TColor; read write;<br />
          &nbsp;&nbsp;property Font: <a href="#TFont">TFont</a>; read write;<br />
          &nbsp;&nbsp;property FormStyle: TFormStyle; read write;<br />
          &nbsp;&nbsp;property KeyPreview: Boolean; read write;<br />
          &nbsp;&nbsp;property Position: <a href="#TPosition">TPosition</a>; read write;<br />
          &nbsp;&nbsp;property OnActivate: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnClick: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnDblClick: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnClose: <a href="#TCloseEvent">TCloseEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnCloseQuery: <a href="#TCloseQueryEvent">TCloseQueryEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnCreate: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnDestroy: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnDeactivate: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnHide: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnKeyDown: <a href="#TKeyEvent">TKeyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnKeyPress: <a href="#TKeyPressEvent">TKeyPressEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnKeyUp: <a href="#TKeyEvent">TKeyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnResize: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnShow: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          end;<br />
          <br />
          <a name="TCustomLabel" id="TCustomLabel">TCustomLabel</a> = class(<a href="#TGraphicControl">TGraphicControl</a>)<br />
          end;<br />
          <br />
          <a name="TAlignment" id="TAlignment">TAlignment</a> = (taLeftJustify, taRightJustify, taCenter);<br />
          <br />
          <a name="TLabel" id="TLabel">TLabel</a> = class(<a href="#TCustomLabel">TCustomLabel</a>)<br />
          &nbsp;&nbsp;property Alignment: <a href="#TAlignment">TAlignment</a>; read write;<br />
          &nbsp;&nbsp;property AutoSize: Boolean; read write;<br />
          &nbsp;&nbsp;property Caption: String; read write;<br />
          &nbsp;&nbsp;property Color: TColor; read write;<br />
          &nbsp;&nbsp;property FocusControl: <a href="#TWinControl">TWinControl</a>; read write;<br />
          &nbsp;&nbsp;property Font: <a href="#TFont">TFont</a>; read write;<br />
          &nbsp;&nbsp;property WordWrap: Boolean; read write;<br />
          &nbsp;&nbsp;property OnClick: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnDblClick: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          end;<br />
          <br />
          <a name="TCustomEdit" id="TCustomEdit">TCustomEdit</a> = class(<a href="#TWinControl">TWinControl</a>)<br />
          &nbsp;&nbsp;procedure Clear;<br />
          &nbsp;&nbsp;procedure ClearSelection;<br />
          &nbsp;&nbsp;procedure SelectAll;<br />
          &nbsp;&nbsp;property Modified: Boolean; read write;<br />
          &nbsp;&nbsp;property SelLength: Integer; read write;<br />
          &nbsp;&nbsp;property SelStart: Integer; read write;<br />
          &nbsp;&nbsp;property SelText: String; read write;<br />
          &nbsp;&nbsp;property Text: String; read write;<br />
          end;<br />
          <br />
          <a name="TBorderStyle" id="TBorderStyle">TBorderStyle</a> = <a href="#TFormBorderStyle">TFormBorderStyle</a>;<br />
          <br />
          <a name="TEditCharCase" id="TEditCharCase">TEditCharCase</a> = (ecNormal, ecUpperCase, ecLowerCase);<br />
          <br />
          <a name="TEdit" id="TEdit">TEdit</a> = class(<a href="#TCustomEdit">TCustomEdit</a>)<br />
          &nbsp;&nbsp;property AutoSelect: Boolean; read write;<br />
          &nbsp;&nbsp;property AutoSize: Boolean; read write;<br />
          &nbsp;&nbsp;property BorderStyle: <a href="#TBorderStyle">TBorderStyle</a>; read write;<br />
          &nbsp;&nbsp;property CharCase: <a href="#TEditCharCase">TEditCharCase</a>; read write;<br />
          &nbsp;&nbsp;property Color: TColor; read write;<br />
          &nbsp;&nbsp;property Font: <a href="#TFont">TFont</a>; read write;<br />
          &nbsp;&nbsp;property HideSelection: Boolean; read write;<br />
          &nbsp;&nbsp;property MaxLength: Integer; read write;<br />
          &nbsp;&nbsp;property PasswordChar: Char; read write;<br />
          &nbsp;&nbsp;property ReadOnly: Boolean; read write;<br />
          &nbsp;&nbsp;property Text: String; read write;<br />
          &nbsp;&nbsp;property OnChange: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnClick: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnDblClick: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnKeyDown: <a href="#TKeyEvent">TKeyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnKeyPress: <a href="#TKeyPressEvent">TKeyPressEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnKeyUp: <a href="#TKeyEvent">TKeyEvent</a>; read write;<br />
          end;<br />
          <br />
          <a name="TNewEdit" id="TNewEdit">TNewEdit</a> = class(<a href="#TEdit">TEdit</a>)<br />
          end;<br />
          <br />
          <a name="TCustomMemo" id="TCustomMemo">TCustomMemo</a> = class(<a href="#TCustomEdit">TCustomEdit</a>)<br />
          &nbsp;&nbsp;property Lines: <a href="#TStrings">TStrings</a>; read write;<br />
          end;<br />
          <br />
          <a name="TScrollStyle" id="TScrollStyle">TScrollStyle</a> = (ssNone, ssHorizontal, ssVertical, ssBoth);<br />
          <br />
          <a name="TMemo" id="TMemo">TMemo</a> = class(<a href="#TCustomMemo">TCustomMemo</a>)<br />
          &nbsp;&nbsp;property Lines: <a href="#TStrings">TStrings</a>; read write;<br />
          &nbsp;&nbsp;property Alignment: <a href="#TAlignment">TAlignment</a>; read write;<br />
          &nbsp;&nbsp;property BorderStyle: <a href="#TBorderStyle">TBorderStyle</a>; read write;<br />
          &nbsp;&nbsp;property Color: TColor; read write;<br />
          &nbsp;&nbsp;property Font: <a href="#TFont">TFont</a>; read write;<br />
          &nbsp;&nbsp;property HideSelection: Boolean; read write;<br />
          &nbsp;&nbsp;property MaxLength: Integer; read write;<br />
          &nbsp;&nbsp;property ReadOnly: Boolean; read write;<br />
          &nbsp;&nbsp;property ScrollBars: <a href="#TScrollStyle">TScrollStyle</a>; read write;<br />
          &nbsp;&nbsp;property WantReturns: Boolean; read write;<br />
          &nbsp;&nbsp;property WantTabs: Boolean; read write;<br />
          &nbsp;&nbsp;property WordWrap: Boolean; read write;<br />
          &nbsp;&nbsp;property OnChange: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnClick: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnDblClick: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnKeyDown: <a href="#TKeyEvent">TKeyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnKeyPress: <a href="#TKeyPressEvent">TKeyPressEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnKeyUp: <a href="#TKeyEvent">TKeyEvent</a>; read write;<br />
          end;<br />
          <br />
          <a name="TNewMemo" id="TNewMemo">TNewMemo</a> = class(<a href="#TMemo">TMemo</a>)<br />
          end;<br />
          <br />
          <a name="TCustomComboBox" id="TCustomComboBox">TCustomComboBox</a> = class(<a href="#TWinControl">TWinControl</a>)<br />
          &nbsp;&nbsp;property DroppedDown: Boolean; read write;<br />
          &nbsp;&nbsp;property Items: <a href="#TStrings">TStrings</a>; read write;<br />
          &nbsp;&nbsp;property ItemIndex: Integer; read write;<br />
          end;<br />
          <br />
          <a name="TComboBoxStyle" id="TComboBoxStyle">TComboBoxStyle</a> = (csDropDown, csSimple, csDropDownList, csOwnerDrawFixed, csOwnerDrawVariable);<br />
          <br />
          <a name="TComboBox" id="TComboBox">TComboBox</a> = class(<a href="#TCustomComboBox">TCustomComboBox</a>)<br />
          &nbsp;&nbsp;property Style: <a href="#TComboBoxStyle">TComboBoxStyle</a>; read write;<br />
          &nbsp;&nbsp;property Color: TColor; read write;<br />
          &nbsp;&nbsp;property DropDownCount: Integer; read write;<br />
          &nbsp;&nbsp;property Font: <a href="#TFont">TFont</a>; read write;<br />
          &nbsp;&nbsp;property MaxLength: Integer; read write;<br />
          &nbsp;&nbsp;property Sorted: Boolean; read write;<br />
          &nbsp;&nbsp;property Text: String; read write;<br />
          &nbsp;&nbsp;property OnChange: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnClick: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnDblClick: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnDropDown: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnKeyDown: <a href="#TKeyEvent">TKeyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnKeyPress: <a href="#TKeyPressEvent">TKeyPressEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnKeyUp: <a href="#TKeyEvent">TKeyEvent</a>; read write;<br />
          end;<br />
          <br />
          <a name="TNewComboBox" id="TNewComboBox">TNewComboBox</a> = class(<a href="#TComboBox">TComboBox</a>)<br />
          end;<br />
          <br />
          <a name="TButtonControl" id="TButtonControl">TButtonControl</a> = class(<a href="#TWinControl">TWinControl</a>)<br />
          end;<br />
          <br />
          <a name="TButton" id="TButton">TButton</a> = class(<a href="#TButtonControl">TButtonControl</a>)<br />
          &nbsp;&nbsp;property Cancel: Boolean; read write;<br />
          &nbsp;&nbsp;property Caption: String; read write;<br />
          &nbsp;&nbsp;property Default: Boolean; read write;<br />
          &nbsp;&nbsp;property Font: <a href="#TFont">TFont</a>; read write;<br />
          &nbsp;&nbsp;property ModalResult: Longint; read write;<br />
          &nbsp;&nbsp;property OnClick: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          end;<br />
          <br />
          <a name="TNewButton" id="TNewButton">TNewButton</a> = class(<a href="#TButton">TButton</a>)<br />
          end;<br />
          <br />
          <a name="TCustomCheckBox" id="TCustomCheckBox">TCustomCheckBox</a> = class(<a href="#TButtonControl">TButtonControl</a>)<br />
          end;<br />
          <br />
          <a name="TCheckBoxState" id="TCheckBoxState">TCheckBoxState</a> = (cbUnchecked, cbChecked, cbGrayed);<br />
          <br />
          <a name="TCheckBox" id="TCheckBox">TCheckBox</a> = class(<a href="#TCustomCheckBox">TCustomCheckBox</a>)<br />
          &nbsp;&nbsp;property Alignment: <a href="#TAlignment">TAlignment</a>; read write;<br />
          &nbsp;&nbsp;property AllowGrayed: Boolean; read write;<br />
          &nbsp;&nbsp;property Caption: String; read write;<br />
          &nbsp;&nbsp;property Checked: Boolean; read write;<br />
          &nbsp;&nbsp;property Color: TColor; read write;<br />
          &nbsp;&nbsp;property Font: <a href="#TFont">TFont</a>; read write;<br />
          &nbsp;&nbsp;property State: <a href="#TCheckBoxState">TCheckBoxState</a>; read write;<br />
          &nbsp;&nbsp;property OnClick: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          end;<br />
          <br />
          <a name="TNewCheckBox" id="TNewCheckBox">TNewCheckBox</a> = class(<a href="#TCheckBox">TCheckBox</a>)<br />
          end;<br />
          <br />
          <a name="TRadioButton" id="TRadioButton">TRadioButton</a> = class(<a href="#TButtonControl">TButtonControl</a>)<br />
          &nbsp;&nbsp;property Alignment: <a href="#TAlignment">TAlignment</a>; read write;<br />
          &nbsp;&nbsp;property Caption: String; read write;<br />
          &nbsp;&nbsp;property Checked: Boolean; read write;<br />
          &nbsp;&nbsp;property Color: TColor; read write;<br />
          &nbsp;&nbsp;property Font: <a href="#TFont">TFont</a>; read write;<br />
          &nbsp;&nbsp;property OnClick: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnDblClick: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          end;<br />
          <br />
          <a name="TNewRadioButton" id="TNewRadioButton">TNewRadioButton</a> = class(<a href="#TRadioButton">TRadioButton</a>)<br />
          end;<br />
          <br />
          <a name="TCustomListBox" id="TCustomListBox">TCustomListBox</a> = class(<a href="#TWinControl">TWinControl</a>)<br />
          &nbsp;&nbsp;property Items: <a href="#TStrings">TStrings</a>; read write;<br />
          &nbsp;&nbsp;property ItemIndex: Integer; read write;<br />
          &nbsp;&nbsp;property SelCount: Integer; read;<br />
          &nbsp;&nbsp;property Selected[Index: Integer]: Boolean; read write;<br />
          end;<br />
          <br />
          <a name="TListBoxStyle" id="TListBoxStyle">TListBoxStyle</a> = (lbStandard, lbOwnerDrawFixed, lbOwnerDrawVariable);<br />
          <br />
          <a name="TListBox" id="TListBox">TListBox</a> = class(<a href="#TCustomListBox">TCustomListBox</a>)<br />
          &nbsp;&nbsp;property BorderStyle: <a href="#TBorderStyle">TBorderStyle</a>; read write;<br />
          &nbsp;&nbsp;property Color: TColor; read write;<br />
          &nbsp;&nbsp;property Font: <a href="#TFont">TFont</a>; read write;<br />
          &nbsp;&nbsp;property MultiSelect: Boolean; read write;<br />
          &nbsp;&nbsp;property Sorted: Boolean; read write;<br />
          &nbsp;&nbsp;property Style: <a href="#TListBoxStyle">TListBoxStyle</a>; read write;<br />
          &nbsp;&nbsp;property OnClick: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnDblClick: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnKeyDown: <a href="#TKeyEvent">TKeyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnKeyPress: <a href="#TKeyPressEvent">TKeyPressEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnKeyUp: <a href="#TKeyEvent">TKeyEvent</a>; read write;<br />
          end;<br />
          <br />
          <a name="TNewListBox" id="TNewListBox">TNewListBox</a> = class(<a href="#TListBox">TListBox</a>)<br />
          end;<br />
          <br />
          <a name="TBevelShape" id="TBevelShape">TBevelShape</a> = (bsBox, bsFrame, bsTopLine, bsBottomLine, bsLeftLine, bsRightLine, bsSpacer);<br />
          <br />
          <a name="TBevelStyle" id="TBevelStyle">TBevelStyle</a> = (bsLowered, bsRaised);<br />
          <br />
          <a name="TBevel" id="TBevel">TBevel</a> = class(<a href="#TGraphicControl">TGraphicControl</a>)<br />
          &nbsp;&nbsp;property Shape: <a href="#TBevelShape">TBevelShape</a>; read write;<br />
          &nbsp;&nbsp;property Style: <a href="#TBevelStyle">TBevelStyle</a>; read write;<br />
          end;<br />
          <br />
          <a name="TCustomPanel" id="TCustomPanel">TCustomPanel</a> = class(<a href="#TCustomControl">TCustomControl</a>)<br />
          end;<br />
          <br />
          <a name="TPanelBevel" id="TPanelBevel">TPanelBevel</a> = (bvNone, bvLowered, bvRaised, bvSpace);<br />
          <br />
          <a name="TBevelWidth" id="TBevelWidth">TBevelWidth</a> = Longint;<br />
          <br />
          <a name="TBorderWidth" id="TBorderWidth">TBorderWidth</a> = Longint;<br />
          <br />
          <a name="TPanel" id="TPanel">TPanel</a> = class(<a href="#TCustomPanel">TCustomPanel</a>)<br />
          &nbsp;&nbsp;property Alignment: <a href="#TAlignment">TAlignment</a>; read write;<br />
          &nbsp;&nbsp;property BevelInner: <a href="#TPanelBevel">TPanelBevel</a>; read write;<br />
          &nbsp;&nbsp;property BevelOuter: <a href="#TPanelBevel">TPanelBevel</a>; read write;<br />
          &nbsp;&nbsp;property BevelWidth: <a href="#TBevelWidth">TBevelWidth</a>; read write;<br />
          &nbsp;&nbsp;property BorderWidth: <a href="#TBorderWidth">TBorderWidth</a>; read write;<br />
          &nbsp;&nbsp;property BorderStyle: <a href="#TBorderStyle">TBorderStyle</a>; read write;<br />
          &nbsp;&nbsp;property Caption: String; read write;<br />
          &nbsp;&nbsp;property Color: TColor; read write;<br />
          &nbsp;&nbsp;property Font: <a href="#TFont">TFont</a>; read write;<br />
          &nbsp;&nbsp;property OnClick: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnDblClick: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          end;<br />
          <br />
          <a name="TNewStaticText" id="TNewStaticText">TNewStaticText</a> = class(<a href="#TWinControl">TWinControl</a>)<br />
          &nbsp;&nbsp;function AdjustHeight: Integer;<br />
          &nbsp;&nbsp;property AutoSize: Boolean; read write;<br />
          &nbsp;&nbsp;property Caption: String; read write;<br />
          &nbsp;&nbsp;property Color: TColor; read write;<br />
          &nbsp;&nbsp;property FocusControl: <a href="#TWinControl">TWinControl</a>; read write;<br />
          &nbsp;&nbsp;property Font: <a href="#TFont">TFont</a>; read write;<br />
          &nbsp;&nbsp;property ForceLTRReading: Boolean; read write;<br />
          &nbsp;&nbsp;property ShowAccelChar: Boolean; read write;<br />
          &nbsp;&nbsp;property WordWrap: Boolean; read write;<br />
          &nbsp;&nbsp;property OnClick: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnDblClick: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          end;<br />
          <br />
          <a name="TCheckItemOperation" id="TCheckItemOperation">TCheckItemOperation</a> = (coUncheck, coCheck, coCheckWithChildren);<br />
          <br />
          <a name="TNewCheckListBox" id="TNewCheckListBox">TNewCheckListBox</a> = class(<a href="#TCustomListBox">TCustomListBox</a>)<br />
          &nbsp;&nbsp;function AddCheckBox(const ACaption, ASubItem: String; ALevel: Byte; AChecked, AEnabled, AHasInternalChildren, ACheckWhenParentChecked: Boolean; AObject: <a href="#TObject">TObject</a>): Integer;<br />
          &nbsp;&nbsp;function AddGroup(ACaption, ASubItem: String; ALevel: Byte; AObject: <a href="#TObject">TObject</a>): Integer;<br />
          &nbsp;&nbsp;function AddRadioButton(const ACaption, ASubItem: String; ALevel: Byte; AChecked, AEnabled: Boolean; AObject: <a href="#TObject">TObject</a>): Integer;<br />
          &nbsp;&nbsp;function CheckItem(const Index: Integer; const AOperation: <a href="#TCheckItemOperation">TCheckItemOperation</a>): Boolean;<br />
          &nbsp;&nbsp;property Checked[Index: Integer]: Boolean; read write;<br />
          &nbsp;&nbsp;property State[Index: Integer]: <a href="#TCheckBoxState">TCheckBoxState</a>; read write;<br />
          &nbsp;&nbsp;property ItemCaption[Index: Integer]: String; read write;<br />
          &nbsp;&nbsp;property ItemEnabled[Index: Integer]: Boolean; read write;<br />
          &nbsp;&nbsp;property ItemLevel[Index: Integer]: Byte; read;<br />
          &nbsp;&nbsp;property ItemObject[Index: Integer]: <a href="#TObject">TObject</a>; read write;<br />
          &nbsp;&nbsp;property ItemSubItem[Index: Integer]: String; read write;<br />
          &nbsp;&nbsp;property Flat: Boolean; read write;<br />
          &nbsp;&nbsp;property MinItemHeight: Integer; read write;<br />
          &nbsp;&nbsp;property Offset: Integer; read write;<br />
          &nbsp;&nbsp;property OnClickCheck: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property BorderStyle: <a href="#TBorderStyle">TBorderStyle</a>; read write;<br />
          &nbsp;&nbsp;property Color: TColor; read write;<br />
          &nbsp;&nbsp;property Font: <a href="#TFont">TFont</a>; read write;<br />
          &nbsp;&nbsp;property Sorted: Boolean; read write;<br />
          &nbsp;&nbsp;property OnClick: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnDblClick: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnKeyDown: <a href="#TKeyEvent">TKeyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnKeyPress: <a href="#TKeyPressEvent">TKeyPressEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnKeyUp: <a href="#TKeyEvent">TKeyEvent</a>; read write;<br />
          &nbsp;&nbsp;property ShowLines: Boolean; read write;<br />
          &nbsp;&nbsp;property WantTabs: Boolean; read write;<br />
          &nbsp;&nbsp;property RequireRadioSelection: Boolean; read write;<br />
          end;<br />
          <br />
          <a name="TNewProgressBarState" id="TNewProgressBarState">TNewProgressBarState</a> = (npbsNormal, npbsError, npbsPaused);<br />
          <br />
          <a name="TNewProgressBarStyle" id="TNewProgressBarStyle">TNewProgressBarStyle</a> = (npbstNormal, npbstMarquee);<br />
          <br />
          <a name="TNewProgressBar" id="TNewProgressBar">TNewProgressBar</a> = class(<a href="#TWinControl">TWinControl</a>)<br />
          &nbsp;&nbsp;property Min: Longint; read write;<br />
          &nbsp;&nbsp;property Max: Longint; read write;<br />
          &nbsp;&nbsp;property Position: Longint; read write;<br />
          &nbsp;&nbsp;property State: <a href="#TNewProgressBarState">TNewProgressBarState</a>; read write;<br />
          &nbsp;&nbsp;property Style: <a href="#TNewProgressBarStyle">TNewProgressBarStyle</a>; read write;<br />
          &nbsp;&nbsp;property Visible: Boolean; read write;<br/>
          end;<br />
          <br />
          <a name="TRichEditViewer" id="TRichEditViewer">TRichEditViewer</a> = class(<a href="#TMemo">TMemo</a>)<br />
          &nbsp;&nbsp;property RTFText: AnsiString; write;<br />
          &nbsp;&nbsp;property UseRichEdit: Boolean; read write;<br />
          end;<br />
          <br />
          <a name="TPasswordEdit" id="TPasswordEdit">TPasswordEdit</a> = class(<a href="#TCustomEdit">TCustomEdit</a>)<br />
          &nbsp;&nbsp;property AutoSelect: Boolean; read write;<br />
          &nbsp;&nbsp;property AutoSize: Boolean; read write;<br />
          &nbsp;&nbsp;property BorderStyle: <a href="#TBorderStyle">TBorderStyle</a>; read write;<br />
          &nbsp;&nbsp;property Color: TColor; read write;<br />
          &nbsp;&nbsp;property Font: <a href="#TFont">TFont</a>; read write;<br />
          &nbsp;&nbsp;property HideSelection: Boolean; read write;<br />
          &nbsp;&nbsp;property MaxLength: Integer; read write;<br />
          &nbsp;&nbsp;property Password: Boolean; read write;<br />
          &nbsp;&nbsp;property ReadOnly: Boolean; read write;<br />
          &nbsp;&nbsp;property Text: String; read write;<br />
          &nbsp;&nbsp;property OnChange: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnClick: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnDblClick: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnKeyDown: <a href="#TKeyEvent">TKeyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnKeyPress: <a href="#TKeyPressEvent">TKeyPressEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnKeyUp: <a href="#TKeyEvent">TKeyEvent</a>; read write;<br />
          end;<br />
          <br />
          <a name="TCustomFolderTreeView" id="TCustomFolderTreeView">TCustomFolderTreeView</a> = class(<a href="#TWinControl">TWinControl</a>)<br />
          &nbsp;&nbsp;procedure ChangeDirectory(const Value: String; const CreateNewItems: Boolean);<br />
          &nbsp;&nbsp;procedure CreateNewDirectory(const ADefaultName: String);<br />
          &nbsp;&nbsp;property: Directory: String; read write;<br />
          end;<br />
          <br />
          <a name="TFolderRenameEvent" id="TFolderRenameEvent">TFolderRenameEvent</a> = procedure(Sender: <a href="#TCustomFolderTreeView">TCustomFolderTreeView</a>; var NewName: String; var Accept: Boolean);<br />
          <br />
          <a name="TFolderTreeView" id="TFolderTreeView">TFolderTreeView</a> = class(<a href="#TCustomFolderTreeView">TCustomFolderTreeView</a>)<br />
          &nbsp;&nbsp;property OnChange: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnRename: <a href="#TFolderRenameEvent">TFolderRenameEvent</a>; read write;<br />
          end;<br />
          <br />
          <a name="TStartMenuFolderTreeView" id="TStartMenuFolderTreeView">TStartMenuFolderTreeView</a> = class(<a href="#TCustomFolderTreeView">TCustomFolderTreeView</a>)<br />
          &nbsp;&nbsp;procedure SetPaths(const AUserPrograms, ACommonPrograms, AUserStartup, ACommonStartup: String);<br />
          &nbsp;&nbsp;property OnChange: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnRename: <a href="#TFolderRenameEvent">TFolderRenameEvent</a>; read write;<br />
          end;<br />
          <br />
          <a name="TAlphaFormat">TAlphaFormat</a> = (afIgnored, afDefined, afPremultiplied);<br/>
          <br/>
          <a name="TAlphaBitmap">TAlphaBitmap</a> = class(<a href="#TBitmap">TBitmap</a>)<br/>
          &nbsp;&nbsp;property AlphaFormat: <a href="#TAlphaFormat">TAlphaFormat</a>; read write;<br/>
          end;<br/>
          <br/>
          <a name="TBitmapImage" id="TBitmapImage">TBitmapImage</a> = class(<a href="#TGraphicControl">TGraphicControl</a>)<br />
          &nbsp;&nbsp;property AutoSize: Boolean; read write;<br />
          &nbsp;&nbsp;property BackColor: TColor; read write;<br />
          &nbsp;&nbsp;property Center: Boolean; read write;<br />
          &nbsp;&nbsp;property Bitmap: <a href="#TAlphaBitmap">TAlphaBitmap</a>; read write;<br />
          &nbsp;&nbsp;property ReplaceColor: TColor; read write;<br />
          &nbsp;&nbsp;property ReplaceWithColor: TColor; read write;<br />
          &nbsp;&nbsp;property Stretch: Boolean; read write;<br />
          &nbsp;&nbsp;property OnClick: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnDblClick: <a href="#TNotifyEvent">TNotifyEvent</a>; read write;<br />
          end;<br />
          <br />
          <a name="TNewNotebook" id="TNewNotebook">TNewNotebook</a> = class(<a href="#TWinControl">TWinControl</a>)<br />
          &nbsp;&nbsp;function FindNextPage(CurPage: <a href="#TNewNotebookPage">TNewNotebookPage</a>; GoForward: Boolean): <a href="#TNewNotebookPage">TNewNotebookPage</a>;<br />
          &nbsp;&nbsp;property PageCount: Integer; read write;<br />
          &nbsp;&nbsp;property Pages[Index: Integer]: <a href="#TNewNotebookPage">TNewNotebookPage</a>; read;<br />
          &nbsp;&nbsp;property ActivePage: <a href="#TNewNotebookPage">TNewNotebookPage</a>; read write;<br />
          end;<br />
          <br />
          <a name="TNewNotebookPage" id="TNewNotebookPage">TNewNotebookPage</a> = class(<a href="#TCustomControl">TCustomControl</a>)<br />
          &nbsp;&nbsp;property Color: TColor; read write;<br />
          &nbsp;&nbsp;property Notebook: <a href="#TNewNotebook">TNewNotebook</a>; read write;<br />
          &nbsp;&nbsp;property PageIndex: Integer; read write;<br />
          end;<br />
          <br />
          <a name="TWizardPageNotifyEvent" id="TWizardPageNotifyEvent">TWizardPageNotifyEvent</a> = procedure(Sender: <a href="#TWizardPage">TWizardPage</a>);<br />
          <a name="TWizardPageButtonEvent" id="TWizardPageButtonEvent">TWizardPageButtonEvent</a> = function(Sender: <a href="#TWizardPage">TWizardPage</a>): Boolean;<br />
          <a name="TWizardPageCancelEvent" id="TWizardPageCancelEvent">TWizardPageCancelEvent</a> = procedure(Sender: <a href="#TWizardPage">TWizardPage</a>; var ACancel, AConfirm: Boolean);<br />
          <a name="TWizardPageShouldSkipEvent" id="TWizardPageShouldSkipEvent">TWizardPageShouldSkipEvent</a> = function(Sender: <a href="#TWizardPage">TWizardPage</a>): Boolean;<br />
          <br />
          <a name="TWizardPage" id="TWizardPage">TWizardPage</a> = class(<a href="#TComponent">TComponent</a>)<br />
          &nbsp;&nbsp;property ID: Integer; read;<br />
          &nbsp;&nbsp;property Caption: String; read write;<br />
          &nbsp;&nbsp;property Description: String; read write;<br />
          &nbsp;&nbsp;property Surface: <a href="#TNewNotebookPage">TNewNotebookPage</a>; read write;<br />
          &nbsp;&nbsp;property SurfaceHeight: Integer; read write;<br />
          &nbsp;&nbsp;property SurfaceWidth: Integer; read write;<br />
          &nbsp;&nbsp;property OnActivate: <a href="#TWizardPageNotifyEvent">TWizardPageNotifyEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnBackButtonClick: <a href="#TWizardPageButtonEvent">TWizardPageButtonEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnCancelButtonClick: <a href="#TWizardPageCancelEvent">TWizardPageCancelEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnNextButtonClick: <a href="#TWizardPageButtonEvent">TWizardPageButtonEvent</a>; read write;<br />
          &nbsp;&nbsp;property OnShouldSkipPage: <a href="#TWizardPageShouldSkipEvent">TWizardPageShouldSkipEvent</a>; read write;<br />
          end;<br />
          <br />
          <a name="TInputQueryWizardPage" id="TInputQueryWizardPage">TInputQueryWizardPage</a> = class(<a href="#TWizardPage">TWizardPage</a>)<br />
          &nbsp;&nbsp;function Add(const APrompt: String; const APassword: Boolean): Integer;<br />
          &nbsp;&nbsp;property Edits[Index: Integer]: <a href="#TPasswordEdit">TPasswordEdit</a>; read;<br />
          &nbsp;&nbsp;property PromptLabels[Index: Integer]: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property SubCaptionLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property Values[Index: Integer]: String; read write;<br />
          end;<br />
          <br />
          <a name="TInputOptionWizardPage" id="TInputOptionWizardPage">TInputOptionWizardPage</a> = class(<a href="#TWizardPage">TWizardPage</a>)<br />
          &nbsp;&nbsp;function Add(const ACaption: String): Integer;<br />
          &nbsp;&nbsp;function AddEx(const ACaption: String; const ALevel: Byte; const AExclusive: Boolean): Integer;<br />
          &nbsp;&nbsp;property CheckListBox: <a href="#TNewCheckListBox">TNewCheckListBox</a>; read;<br />
          &nbsp;&nbsp;property SelectedValueIndex: Integer; read write;<br />
          &nbsp;&nbsp;property SubCaptionLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property Values[Index: Integer]: Boolean; read write;<br />
          end;<br />
          <br />
          <a name="TInputDirWizardPage" id="TInputDirWizardPage">TInputDirWizardPage</a> = class(<a href="#TWizardPage">TWizardPage</a>)<br />
          &nbsp;&nbsp;function Add(const APrompt: String): Integer;<br />
          &nbsp;&nbsp;property Buttons[Index: Integer]: <a href="#TNewButton">TNewButton</a>; read;<br />
          &nbsp;&nbsp;property Edits[Index: Integer]: <a href="#TEdit">TEdit</a>; read;<br />
          &nbsp;&nbsp;property PromptLabels[Index: Integer]: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property SubCaptionLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property Values[Index: Integer]: String; read write;<br />
          end;<br />
          <br />
          <a name="TInputFileWizardPage" id="TInputFileWizardPage">TInputFileWizardPage</a> = class(<a href="#TWizardPage">TWizardPage</a>)<br />
          &nbsp;&nbsp;function Add(const APrompt, AFilter, ADefaultExtension: String): Integer;<br />
          &nbsp;&nbsp;property Buttons[Index: Integer]: <a href="#TNewButton">TNewButton</a>; read;<br />
          &nbsp;&nbsp;property Edits[Index: Integer]: <a href="#TEdit">TEdit</a>; read;<br />
          &nbsp;&nbsp;property PromptLabels[Index: Integer]: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property SubCaptionLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property Values[Index: Integer]: String; read write;<br />
          &nbsp;&nbsp;property IsSaveButton[Index: Integer]: Boolean; read write;<br />
          end;<br />
          <br />
          <a name="TOutputMsgWizardPage" id="TOutputMsgWizardPage">TOutputMsgWizardPage</a> = class(<a href="#TWizardPage">TWizardPage</a>)<br />
          &nbsp;&nbsp;property MsgLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          end;<br />
          <br />
          <a name="TOutputMsgMemoWizardPage" id="TOutputMsgMemoWizardPage">TOutputMsgMemoWizardPage</a> = class(<a href="#TWizardPage">TWizardPage</a>)<br />
          &nbsp;&nbsp;property RichEditViewer: <a href="#TRichEditViewer">TRichEditViewer</a>; read;<br />
          &nbsp;&nbsp;property SubCaptionLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          end;<br />
          <br />
          <a name="TOutputProgressWizardPage" id="TOutputProgressWizardPage">TOutputProgressWizardPage</a> = class(<a href="#TWizardPage">TWizardPage</a>)<br />
          &nbsp;&nbsp;procedure Hide;<br />
          &nbsp;&nbsp;property Msg1Label: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property Msg2Label: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property ProgressBar: <a href="#TNewProgressBar">TNewProgressBar</a>; read;<br />
          &nbsp;&nbsp;procedure SetProgress(const Position, Max: Longint);<br />
          &nbsp;&nbsp;procedure SetText(const Msg1, Msg2: String);<br />
          &nbsp;&nbsp;procedure Show;<br />
          end;<br />
          <br />
          <a name="TUIStateForm" id="TUIStateForm">TUIStateForm</a> = class(<a href="#TForm">TForm</a>)<br />
          end;<br />
          <br />
          <a name="TSetupForm" id="TSetupForm">TSetupForm</a> = class(<a href="#TUIStateForm">TUIStateForm</a>)<br />
          &nbsp;&nbsp;procedure Center;<br />
          &nbsp;&nbsp;procedure CenterInsideControl(const Ctl: <a href="#TWinControl">TWinControl</a>; const InsideClientArea: Boolean);<br />
          &nbsp;&nbsp;procedure FlipControlsIfNeeded;<br />
          &nbsp;&nbsp;property ControlsFlipped: Boolean; read;<br />
          &nbsp;&nbsp;property FlipControlsOnShow: Boolean; read write;<br />
          &nbsp;&nbsp;property RightToLeft: Boolean; read;<br />
          end;<br />
          <br />
          <a name="TMainForm" id="TMainForm">TMainForm</a> = class(<a href="#TSetupForm">TSetupForm</a>)<br />
          &nbsp;&nbsp;procedure ShowAboutBox;<br />
          end;<br />
          <br />
          <a name="TWizardForm" id="TWizardForm">TWizardForm</a> = class(<a href="#TSetupForm">TSetupForm</a>)<br />
          &nbsp;&nbsp;property CancelButton: <a href="#TNewButton">TNewButton</a>; read;<br />
          &nbsp;&nbsp;property NextButton: <a href="#TNewButton">TNewButton</a>; read;<br />
          &nbsp;&nbsp;property BackButton: <a href="#TNewButton">TNewButton</a>; read;<br />
          &nbsp;&nbsp;property Notebook1: TNotebook; read;<br />
          &nbsp;&nbsp;property Notebook2: TNotebook; read;<br />
          &nbsp;&nbsp;property WelcomePage: <a href="#TNewNotebookPage">TNewNotebookPage</a>; read;<br />
          &nbsp;&nbsp;property InnerPage: <a href="#TNewNotebookPage">TNewNotebookPage</a>; read;<br />
          &nbsp;&nbsp;property FinishedPage: <a href="#TNewNotebookPage">TNewNotebookPage</a>; read;<br />
          &nbsp;&nbsp;property LicensePage: <a href="#TNewNotebookPage">TNewNotebookPage</a>; read;<br />
          &nbsp;&nbsp;property PasswordPage: <a href="#TNewNotebookPage">TNewNotebookPage</a>; read;<br />
          &nbsp;&nbsp;property InfoBeforePage: <a href="#TNewNotebookPage">TNewNotebookPage</a>; read;<br />
          &nbsp;&nbsp;property UserInfoPage: <a href="#TNewNotebookPage">TNewNotebookPage</a>; read;<br />
          &nbsp;&nbsp;property SelectDirPage: <a href="#TNewNotebookPage">TNewNotebookPage</a>; read;<br />
          &nbsp;&nbsp;property SelectComponentsPage: <a href="#TNewNotebookPage">TNewNotebookPage</a>; read;<br />
          &nbsp;&nbsp;property SelectProgramGroupPage: <a href="#TNewNotebookPage">TNewNotebookPage</a>; read;<br />
          &nbsp;&nbsp;property SelectTasksPage: <a href="#TNewNotebookPage">TNewNotebookPage</a>; read;<br />
          &nbsp;&nbsp;property ReadyPage: <a href="#TNewNotebookPage">TNewNotebookPage</a>; read;<br />
          &nbsp;&nbsp;property PreparingPage: <a href="#TNewNotebookPage">TNewNotebookPage</a>; read;<br />
          &nbsp;&nbsp;property InstallingPage: <a href="#TNewNotebookPage">TNewNotebookPage</a>; read;<br />
          &nbsp;&nbsp;property InfoAfterPage: <a href="#TNewNotebookPage">TNewNotebookPage</a>; read;<br />
          &nbsp;&nbsp;property DiskSpaceLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property DirEdit: <a href="#TEdit">TEdit</a>; read;<br />
          &nbsp;&nbsp;property GroupEdit: <a href="#TNewEdit">TNewEdit</a>; read;<br />
          &nbsp;&nbsp;property NoIconsCheck: <a href="#TNewCheckBox">TNewCheckBox</a>; read;<br />
          &nbsp;&nbsp;property PasswordLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property PasswordEdit: <a href="#TPasswordEdit">TPasswordEdit</a>; read;<br />
          &nbsp;&nbsp;property PasswordEditLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property ReadyMemo: <a href="#TNewMemo">TNewMemo</a>; read;<br />
          &nbsp;&nbsp;property TypesCombo: <a href="#TNewComboBox">TNewComboBox</a>; read;<br />
          &nbsp;&nbsp;property Bevel: <a href="#TBevel">TBevel</a>; read;<br />
          &nbsp;&nbsp;property WizardBitmapImage: <a href="#TBitmapImage">TBitmapImage</a>; read;<br />
          &nbsp;&nbsp;property WelcomeLabel1: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property InfoBeforeMemo: <a href="#TRichEditViewer">TRichEditViewer</a>; read;<br />
          &nbsp;&nbsp;property InfoBeforeClickLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property MainPanel: <a href="#TPanel">TPanel</a>; read;<br />
          &nbsp;&nbsp;property Bevel1: <a href="#TBevel">TBevel</a>; read;<br />
          &nbsp;&nbsp;property PageNameLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property PageDescriptionLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property WizardSmallBitmapImage: <a href="#TBitmapImage">TBitmapImage</a>; read;<br />
          &nbsp;&nbsp;property ReadyLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property FinishedLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property YesRadio: <a href="#TNewRadioButton">TNewRadioButton</a>; read;<br />
          &nbsp;&nbsp;property NoRadio: <a href="#TNewRadioButton">TNewRadioButton</a>; read;<br />
          &nbsp;&nbsp;property WizardBitmapImage2: <a href="#TBitmapImage">TBitmapImage</a>; read;<br />
          &nbsp;&nbsp;property WelcomeLabel2: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property LicenseLabel1: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property LicenseMemo: <a href="#TRichEditViewer">TRichEditViewer</a>; read;<br />
          &nbsp;&nbsp;property InfoAfterMemo: <a href="#TRichEditViewer">TRichEditViewer</a>; read;<br />
          &nbsp;&nbsp;property InfoAfterClickLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property ComponentsList: <a href="#TNewCheckListBox">TNewCheckListBox</a>; read;<br />
          &nbsp;&nbsp;property ComponentsDiskSpaceLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property BeveledLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property StatusLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property FilenameLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property ProgressGauge: <a href="#TNewProgressBar">TNewProgressBar</a>; read;<br />
          &nbsp;&nbsp;property SelectDirLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property SelectStartMenuFolderLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property SelectComponentsLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property SelectTasksLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property LicenseAcceptedRadio: <a href="#TNewRadioButton">TNewRadioButton</a>; read;<br />
          &nbsp;&nbsp;property LicenseNotAcceptedRadio: <a href="#TNewRadioButton">TNewRadioButton</a>; read;<br />
          &nbsp;&nbsp;property UserInfoNameLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property UserInfoNameEdit: <a href="#TNewEdit">TNewEdit</a>; read;<br />
          &nbsp;&nbsp;property UserInfoOrgLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property UserInfoOrgEdit: <a href="#TNewEdit">TNewEdit</a>; read;<br />
          &nbsp;&nbsp;property PreparingErrorBitmapImage: <a href="#TBitmapImage">TBitmapImage</a>; read;<br />
          &nbsp;&nbsp;property PreparingLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property FinishedHeadingLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property UserInfoSerialLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property UserInfoSerialEdit: <a href="#TNewEdit">TNewEdit</a>; read;<br />
          &nbsp;&nbsp;property TasksList: <a href="#TNewCheckListBox">TNewCheckListBox</a>; read;<br />
          &nbsp;&nbsp;property RunList: <a href="#TNewCheckListBox">TNewCheckListBox</a>; read;<br />
          &nbsp;&nbsp;property DirBrowseButton: <a href="#TNewButton">TNewButton</a>; read;<br />
          &nbsp;&nbsp;property GroupBrowseButton: <a href="#TNewButton">TNewButton</a>; read;<br />
          &nbsp;&nbsp;property SelectDirBitmapImage: <a href="#TBitmapImage">TBitmapImage</a>; read;<br />
          &nbsp;&nbsp;property SelectGroupBitmapImage: <a href="#TBitmapImage">TBitmapImage</a>; read;<br />
          &nbsp;&nbsp;property SelectDirBrowseLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property SelectStartMenuFolderBrowseLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property PreparingYesRadio: <a href="#TNewRadioButton">TNewRadioButton</a>; read;<br />
          &nbsp;&nbsp;property PreparingNoRadio: <a href="#TNewRadioButton">TNewRadioButton</a>; read;<br />
          &nbsp;&nbsp;property PreparingMemo: <a href="#TNewMemo">TNewMemo</a>; read;<br/>
          &nbsp;&nbsp;property CurPageID: Integer; read;<br />
          &nbsp;&nbsp;function AdjustLabelHeight(ALabel: <a href="#TNewStaticText">TNewStaticText</a>): Integer;<br />
          &nbsp;&nbsp;procedure IncTopDecHeight(AControl: <a href="#TControl">TControl</a>; Amount: Integer);<br />
          &nbsp;&nbsp;property PrevAppDir: String; read;<br />
          end;<br />
          <br />
          <a name="TUninstallProgressForm" id="TUninstallProgressForm">TUninstallProgressForm</a> = class(<a href="#TSetupForm">TSetupForm</a>)<br />
          &nbsp;&nbsp;property OuterNotebook: <a href="#TNewNotebook">TNewNotebook</a>; read;<br />
          &nbsp;&nbsp;property InnerPage: <a href="#TNewNotebookPage">TNewNotebookPage</a>; read;<br />
          &nbsp;&nbsp;property InnerNotebook: <a href="#TNewNotebook">TNewNotebook</a>; read;<br />
          &nbsp;&nbsp;property InstallingPage: <a href="#TNewNotebookPage">TNewNotebookPage</a>; read;<br />
          &nbsp;&nbsp;property MainPanel: <a href="#TPanel">TPanel</a>; read;<br />
          &nbsp;&nbsp;property PageNameLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property PageDescriptionLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property WizardSmallBitmapImage: <a href="#TBitmapImage">TBitmapImage</a>; read;<br />
          &nbsp;&nbsp;property Bevel1: <a href="#TBevel">TBevel</a>; read;<br />
          &nbsp;&nbsp;property StatusLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property ProgressBar: <a href="#TNewProgressBar">TNewProgressBar</a>; read;<br />
          &nbsp;&nbsp;property BeveledLabel: <a href="#TNewStaticText">TNewStaticText</a>; read;<br />
          &nbsp;&nbsp;property Bevel: <a href="#TBevel">TBevel</a>; read;<br />
          &nbsp;&nbsp;property CancelButton: <a href="#TNewButton">TNewButton</a>; read;<br />
          end;<br /><br />
          <b>См. также:</b><br/>
		  &nbsp;&nbsp;function <a href="isxfunc/topic_isxfunc_createinputquerypage.htm">CreateInputQueryPage</a>(const AfterID: Integer; const ACaption, ADescription, ASubCaption: String): TInputQueryWizardPage;<br/>
		  &nbsp;&nbsp;function <a href="isxfunc/topic_isxfunc_createinputoptionpage.htm">CreateInputOptionPage</a>(const AfterID: Integer; const ACaption, ADescription, ASubCaption: String; Exclusive, ListBox: Boolean): TInputOptionWizardPage;<br/>
		  &nbsp;&nbsp;function <a href="isxfunc/topic_isxfunc_createinputdirpage.htm">CreateInputDirPage</a>(const AfterID: Integer; const ACaption, ADescription, ASubCaption: String; AAppendDir: Boolean; ANewFolderName: String): TInputDirWizardPage;<br/>
		  &nbsp;&nbsp;function <a href="isxfunc/topic_isxfunc_createinputfilepage.htm">CreateInputFilePage</a>(const AfterID: Integer; const ACaption, ADescription, ASubCaption: String): TInputFileWizardPage;<br/>
		  &nbsp;&nbsp;function <a href="isxfunc/topic_isxfunc_createoutputmsgpage.htm">CreateOutputMsgPage</a>(const AfterID: Integer; const ACaption, ADescription, AMsg: String): TOutputMsgWizardPage;<br/>
		  &nbsp;&nbsp;function <a href="isxfunc/topic_isxfunc_createoutputmsgmemopage.htm">CreateOutputMsgMemoPage</a>(const AfterID: Integer; const ACaption, ADescription, ASubCaption: String; const AMsg: AnsiString): TOutputMsgMemoWizardPage;<br/>
		  &nbsp;&nbsp;function <a href="isxfunc/topic_isxfunc_createoutputprogresspage.htm">CreateOutputProgressPage</a>(const ACaption, ADescription: String): TOutputProgressWizardPage;<br/>
		  &nbsp;&nbsp;function <a href="isxfunc/topic_isxfunc_createcustompage.htm">CreateCustomPage</a>(const AfterID: Integer; const ACaption, ADescription: String): TWizardPage;<br/>
		  &nbsp;&nbsp;function <a href="isxfunc/topic_isxfunc_createcustomform.htm">CreateCustomForm</a>: TSetupForm;<br/><br/>
		  &nbsp;&nbsp;function <a href="isxfunc/topic_isxfunc_pagefromid.htm">PageFromID</a>(const ID: Integer): TWizardPage;<br/>
		  &nbsp;&nbsp;function <a href="isxfunc/topic_isxfunc_minimizepathname.htm">MinimizePathName</a>(const Filename: String; const Font: TFont; MaxLen: Integer): String;<br/>
          <script language="javascript" type="text/javascript">highlightSyntax('delphi_Tc4NTM','delphi');</script>
          </code></tt></p>
</div>
</body>
</html>
