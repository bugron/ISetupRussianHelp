<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=windows-1251"><title>Текстурирование кнопок</title><link rel="stylesheet" type="text/css" href="css.css"><script type="text/javascript" src="includer.js"></script><script language='jscript' type='text/javascript' src='copycode.js'></script></head><body><div id="heading"><h1>» Inno Setup Faq. Текстурирование кнопок</h1></div><br><script language="javascript" type="text/javascript">includeSyntax('delphi');</script><code id="delphi_Tc4NTM">
<input type="button" value="Копировать в буфер обмена" onClick="copyToClipboard( taCode1, theCode1 );">
<blockquote id="theCode1"><font>;;Скрипт текстурирования кнопок, с четырмя видами состояния кнопок<br>;;Используется текстура размером 320х23, где размер одной кнопки 80х23<br>;;Скрипт написал Shegorat<br>[Setup]<br>AppName=Test<br>AppVerName=Test<br>DefaultDirName={pf}\Test<br>OutputDir=userdocs:Test.<br><br>[Languages]<br>Name: &quot;rus&quot;; MessagesFile: &quot;compiler:Languages\Russian.isl&quot;;<br><br>[Files]<br>;;Изображение размером 320х23<br>Source: button2.bmp; DestDir: {tmp}; Flags: dontcopy<br>[Code]<br>const<br>ButtonWidth = 80;<br>ButtonHeight = 23;<br><br>var<br>WizardLabel: TLabel;<br>ButtonPanel: array of TPanel;<br>ButtonImage: array of TBitmapImage;<br>ButtonLabel: array of TLabel;<br>UsedButtons: array of TButton;<br>ButtonsCount: Integer;<br><br>procedure ButtonLabelClick(Sender: TObject);<br>var Button: TButton; n, i: Integer;<br>begin<br>i:= TLabel(Sender).Tag; ButtonImage[i].Left:= 0<br>for n:=0 to (ButtonsCount-1) do begin<br>if i = n then Button:= UsedButtons[n];<br>end;<br>Button.OnClick(Button)<br>end;<br><br>procedure ButtonLabelMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);<br>begin<br>if ButtonLabel[TLabel(Sender).Tag].Enabled then ButtonImage[TLabel(Sender).Tag].Left:=-ButtonWidth*2<br>end;<br><br>procedure ButtonLabelMouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);<br>begin<br>if ButtonLabel[TLabel(Sender).Tag].Enabled then ButtonImage[TLabel(Sender).Tag].Left:=0<br>end;<br><br>procedure ButtonLabelMove(Sender: TObject; Shift: TShiftState; X, Y: Integer);<br>var n, I: Integer;<br>begin<br>I:=TLabel(Sender).Tag;<br>///Сначала восстанавливаем картинку у всех кнопок, так надо иначе могут быть глюки<br>for n:=0 to (ButtonsCount-1) do begin if (ButtonLabel[n].Enabled)and(ButtonImage[n].Left &lt;&gt; -ButtonWidth*2)and(I&lt;&gt;N) then ButtonImage[n].Left:= 0; end;<br>///Теперь собственно ставим нужную картинку<br>if (ButtonLabel[I].Enabled)and(ButtonImage[I].Left &lt;&gt; -ButtonWidth*2) then begin ButtonImage[I].Left:= -ButtonWidth; end;<br>end;<br><br>procedure WizardLabelMove(Sender: TObject; Shift: TShiftState; X, Y: Integer);<br>var n: Integer;<br>begin<br>///Т.к Sender'ом выступает WizardLabel то не получится испльзовать индекс кнопки<br>for n:=0 to (ButtonsCount-1) do if (ButtonLabel[n].Enabled)and(ButtonImage[n].Left &lt;&gt; -ButtonWidth*2) then begin ButtonImage[n].Left:= 0; end;<br>end;<br><br>procedure LoadButtonImage(AButton: TButton);<br>var n: Integer;<br>begin<br>n:=ButtonsCount; SetArrayLength(ButtonPanel, n+1);<br>SetArrayLength(ButtonImage, n+1); SetArrayLength(ButtonLabel, n+1);<br>SetArrayLength(UsedButtons, n+1); UsedButtons[n]:= AButton;<br><br>ButtonPanel[n]:=TPanel.Create(WizardForm)<br>ButtonPanel[n].SetBounds(AButton.Left, AButton.Top, AButton.Width, AButton.Height)<br>ButtonPanel[n].Tag:= n<br>ButtonPanel[n].Enabled:= AButton.Enabled<br>ButtonPanel[n].Parent:=AButton.Parent<br><br>ButtonImage[n]:=TBitmapImage.Create(WizardForm)<br>ButtonImage[n].SetBounds(ScaleX(0), ScaleY(0), ScaleX(320), ScaleY(23))<br>ButtonImage[n].Enabled:=False<br>ButtonImage[n].Bitmap.LoadFromFile(ExpandConstant('{tmp}\Button2.bmp'))<br>ButtonImage[n].Parent:=ButtonPanel[n]<br><br>with TLabel.Create(WizardForm) do begin<br>Tag:=n<br>Parent:=ButtonPanel[n]<br>Width:=AButton.Width<br>Height:=AButton.Height<br>Transparent:=True<br>OnClick:=@ButtonLabelClick<br>OnDblClick:=@ButtonLabelClick<br>OnMouseMove:=@ButtonLabelMove<br>OnMouseDown:=@ButtonLabelMouseDown<br>OnMouseUp:=@ButtonLabelMouseUp<br> end;<br><br>ButtonLabel[n]:=TLabel.Create(WizardForm)<br>ButtonLabel[n].Autosize:=True<br>ButtonLabel[n].Alignment:=taCenter<br>ButtonLabel[n].Tag:=n<br>ButtonLabel[n].Enabled:= AButton.Enabled<br>ButtonLabel[n].Transparent:=True<br>ButtonLabel[n].Font.Color:=clWhite<br>ButtonLabel[n].Caption:=AButton.Caption<br>ButtonLabel[n].OnClick:=@ButtonLabelClick<br>ButtonLabel[n].OnDblClick:=@ButtonLabelClick<br>ButtonLabel[n].OnMouseMove:=@ButtonLabelMove<br>ButtonLabel[n].OnMouseDown:=@ButtonLabelMouseDown<br>ButtonLabel[n].OnMouseUp:=@ButtonLabelMouseUp<br>ButtonLabel[n].Parent:=ButtonPanel[n]<br><br>ButtonsCount:= ButtonsCount+1<br>end;<br><br>procedure UpdateButtons();<br>var n: Integer;<br>begin<br>for n:=0 to ButtonsCount-1 do begin<br>ButtonLabel[n].Caption:=UsedButtons[n].Caption<br>ButtonPanel[n].Visible:=UsedButtons[n].Visible<br>if (UsedButtons[n].Enabled = False) then ButtonImage[n].Left:= -ButtonWidth*3 else ButtonImage[n].Left:= 0;<br>ButtonLabel[n].Enabled:= UsedButtons[n].Enabled;<br>ButtonPanel[n].Enabled:= UsedButtons[n].Enabled;<br>///Ставим Left и Top лейбла соразмерно размеру лейбла<br>ButtonLabel[n].Left:= ButtonPanel[n].Width div 2 - ButtonLabel[n].Width div 2;<br>ButtonLabel[n].Top:= ButtonPanel[n].Height div 2 - ButtonLabel[n].Height div 2;<br>end;<br>end;<br><br>procedure LicenceAcceptedRadioOnClick(Sender: TObject);<br>begin<br>///Делаем кнопку активной<br>WizardForm.NextButton.Enabled:= True;<br>///Обновляем текстурированную кнопку (обновляем активность и текстуру)<br>UpdateButtons();<br>end;<br><br>procedure LicenceNotAcceptedRadioOnClick(Sender: TObject);<br>begin<br>///Делаем кнопку неактивной<br>WizardForm.NextButton.Enabled:= False;<br>///Обновляем текстурированную кнопку (обновляем активность и текстуру)<br>UpdateButtons()<br>end;<br><br>procedure InitializeWizard();<br>begin<br>WizardLabel:= TLabel.Create(WizardForm)<br>WizardLabel.SetBounds(ScaleX(0), ScaleY(0), ScaleX(WizardForm.Width), ScaleY(WizardForm.Height))<br>WizardLabel.Transparent:= True;<br>WizardLabel.AutoSize:=false;<br>WizardLabel.OnMouseMove:=@WizardLabelMove<br>WizardLabel.Parent:= WizardForm;<br><br>WizardForm.BackButton.Width:= ButtonWidth<br>WizardForm.BackButton.Height:= ButtonHeight<br><br>WizardForm.NextButton.Width:= ButtonWidth<br>WizardForm.NextButton.Height:= ButtonHeight<br><br>WizardForm.CancelButton.Width:=ButtonWidth<br>WizardForm.CancelButton.Height:= ButtonHeight<br><br>WizardForm.DirBrowseButton.Left:=ScaleX(337)<br>WizardForm.DirBrowseButton.Width:= ButtonWidth<br>WizardForm.DirBrowseButton.Height:=ButtonHeight<br><br>WizardForm.GroupBrowseButton.Left:=ScaleX(337)<br>WizardForm.GroupBrowseButton.Width:= ButtonWidth<br>WizardForm.GroupBrowseButton.Height:=ButtonHeight<br><br>WizardForm.LicenseAcceptedRadio.OnClick:=@LicenceAcceptedRadioOnClick<br><br>WizardForm.LicenseNotAcceptedRadio.OnClick:=@LicenceNotAcceptedRadioOnClick<br><br>ExtractTemporaryFile('button2.bmp')<br>LoadButtonImage(WizardForm.BackButton)<br>LoadButtonImage(WizardForm.NextButton)<br>LoadButtonImage(WizardForm.CancelButton)<br>LoadButtonImage(WizardForm.DirBrowseButton)<br>LoadButtonImage(WizardForm.GroupBrowseButton)<br>end;<br><br>procedure CurPageChanged(CurPageID: Integer);<br>begin<br>UpdateButtons()<br>end;<br></font></blockquote><textarea id="taCode1" style="display:none;" rows="1" cols="5"></textarea><textarea id='taCode' style='display:none;' rows='1' cols='20'></textarea></code><script language="javascript" type="text/javascript">highlightSyntax('delphi_Tc4NTM','delphi');</script><br><br><div id="heading"><h1><font size="1" face="Consolas">Copyright (c) <a href="http://www.krinkels.org/" target="_blank">Krinkels Inc</a></font></h1></div></body></html>