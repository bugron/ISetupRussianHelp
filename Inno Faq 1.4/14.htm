<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><title>Текстурирование прогресс бара</title><link rel="stylesheet" type="text/css" href="css.css"><script type="text/javascript" src="includer.js"></script><script language='jscript' type='text/javascript' src='copycode.js'></script></head><body><div id="heading"><h1>» Inno Setup Faq. Текстурирование прогресс бара</h1></div><br><script language="javascript" type="text/javascript">includeSyntax('delphi');</script><code id="delphi_Tc4NTM"> <input type="button" value="Копировать в буфер обмена" onClick="copyToClipboard( taCode1, theCode1 );"> <blockquote id="theCode1"><font>[Setup]<br>AppName=MyApp<br>AppVerName=MyApp<br>defaultDirName={pf}\MyApp<br><br>[Files]<br>Source: compiler:InnoCallBack.dll; DestDir: {tmp};<br>Source: progress.bmp; DestDir: {tmp}<br>Source: {win}\Help\; DestDir: {app}; Flags: external<br><br>[Code]<br>type<br>&nbsp; TProc = procedure(HandleW, msg, idEvent, TimeSys: LongWord);<br>&nbsp; TPBInfo = record ProgressBarName: TNewProgressBar ; ImageHeight, LastWidth, MaxWidth: Integer; end;<br><br>var<br>ProgressBarEdit: array of TEdit;<br>ProgressBarImage: array of TBitmapImage;<br>PBBuff: array of TPBInfo;<br>ProgressTimer: Longword; PBCount: Integer;<br><br>function WrapTimerProc(callback:TProc; paramcount:integer):longword; external 'wrapcallback@files:innocallback.dll stdcall';<br>function SetTimer(hWnd: LongWord; nIDEvent, uElapse: LongWord; lpTimerFunc: LongWord): LongWord; external 'SetTimer@user32.dll stdcall';<br>function KillTimer(hWnd: LongWord; nIDEvent: LongWord): LongWord; external 'KillTimer@user32.dll stdcall';<br><br>procedure TextureProgressBar(ProgressBar:TNewProgressBar);<br>var n: Integer;<br>begin<br>n:= PBCount; SetArrayLength(ProgressBarEdit, n+1); SetArrayLength(ProgressBarImage, n+1)<br>SetArrayLength(PBBuff, n+1);<br><br>ProgressBarEdit[n]:= TEdit.Create(WizardForm)<br>ProgressBarEdit[n].SetBounds(ProgressBar.Left, ProgressBar.Top, ProgressBar.Width, ProgressBar.Height);<br>ProgressBarEdit[n].Enabled:= False;<br>ProgressBarEdit[n].Parent:= ProgressBar.Parent;<br>ProgressBarEdit[n].Visible:= ProgressBar.Visible;<br><br>PBBuff[n].LastWidth:= ProgressBar.Position;<br>PBBuff[n].ImageHeight:= ProgressBarEdit[n].Height - ScaleY(2);<br>PBBuff[n].ProgressBarName:= ProgressBar ;<br>PBBuff[n].MaxWidth:= ScaleX(ProgressBar.Width);<br><br>ProgressbarImage[n]:= TBitmapImage.Create(WizardForm);<br>ProgressbarImage[n].Stretch:= True;<br>ProgressbarImage[n].Parent:= ProgressBarEdit[n];<br>ProgressbarImage[n].SetBounds(ScaleX(0), ScaleY(0), ScaleX(0), ScaleY(0))<br>ProgressbarImage[n].Bitmap.LoadFromFile(ExpandConstant('{tmp}\progress.bmp'));<br><br>ProgressBar.Width:= ScaleX(0); ProgressBar.Height:= ScaleY(0);<br><br>PBCount:= PBCount+1<br>end;<br><br>procedure HideAllTexturedPB();<br>var n: integer;<br>begin<br>for n:=0 to PBCount-1 do begin ProgressBarEdit[n].Hide; ProgressBarImage[n].Hide; end;<br>end;<br><br>procedure UpdateAllTexturedPB();<br>var n: integer;<br>begin<br>for n:=0 to PBCount-1 do begin<br>ProgressBarEdit[n].Visible:= PBBuff[n]. ProgressBarName.Visible;<br>ProgressBarImage[n].Visible:= PBBuff[n].ProgressBarName.Visible; end;<br>end;<br><br>procedure UpdatePB(HandleW, msg, idEvent, TimeSys: LongWord);<br>var f: integer; CurWidth: single;<br>begin<br>for f:=0 to PBCount-1 do begin<br>UpdateAllTexturedPB<br>with PBBuff[f].ProgressB arName do begin<br>&nbsp; CurWidth := (Position*PBBuff[f].MaxWidth)/Max;<br>&nbsp; if PBBuff[f].LastWidth &lt;&gt; Round(CurWidth) then begin<br>&nbsp; &nbsp; PBBuff[f].LastWidth:= Round(CurWidth);<br>&nbsp; &nbsp; ProgressBarImage[f].SetBounds(ScaleX(0), ScaleY(0), PBBuff[f].LastWidth, PBBuff[f].ImageHeight); end;<br>&nbsp; end;<br>end;<br>end;<br><br>procedure InitializeWizard();<br>begin<br>ExtractTemporaryFile('progress.bmp');<br><br>TextureProgressBar(WizardForm.ProgressGauge)<br>end;<br><br>procedure CurStepChanged(CurStep: TSetupStep);<br>begin<br>if CurStep=ssInstall then ProgressTimer:= SetTimer(0,0, 200, WrapTimerProc(@UpdatePB, 4));<br>if CurStep=ssPostInstall then KillTimer(0, ProgressTimer);<br>end;</font></blockquote><textarea id="taCode1" style="display:none;" rows="1" cols="5"></textarea><textarea id='taCode' style='display:none;' rows='1' cols='20'></textarea></code><script language="javascript" type="text/javascript">highlightSyntax('delphi_Tc4NTM','delphi');</script><br><div id="heading"><h1><font size="1" face="Consolas">Copyright (c) <a href="http://www.krinkels.org/" target="_blank">Krinkels Inc</a></font></h1></div></body></html>