<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>Ожидание завершения</title>
<link rel="stylesheet" type="text/css" href="css.css"><script type="text/javascript" src="includer.js"></script>
<script language='jscript' type='text/javascript' src='copycode.js'></script></head><body>
<div id="heading"><h1>» Inno Setup Faq. Ожидание завершения</h1></div><br>
 <script language="javascript" type="text/javascript">includeSyntax('delphi');</script><code id="delphi_Tc4NTM">
<input type="button" value="Копировать в буфер обмена" onClick="copyToClipboard( taCode1, theCode1 );">
<blockquote id="theCode1" ><font>[Code]<br>////////////////////////////////////////////////////////////////////////////////////<br>/////////////////////////////ExecAndWait.iss////////////////////////////////////////<br>////////////////////////////////////////////////////////////////////////////////////<br>////////////////////////////////Описание////////////////////////////////////////////<br>
///Данный скрипт позволяет запускать другие программы, с ожиданием их завершения. //<br>
///Инсталлятор в момент ожидания остается 'кликабельным', т.е. отвечает на все &nbsp; &nbsp;//<br>
///действия пользователя.  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //<br>
///&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//<br>///////////////////////////////Использование////////////////////////////////////////<br>
///Добавьте этот скрипт в свой проект, с помощью директивы препроцессора #include.//<br>
///Пример:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; //<br>
///#include &quot;ExecAndWait.iss&quot;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; //<br>
///&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//<br>
///После добавления этого скрипта в свой проект, вы можете вызвать функцию:&nbsp; &nbsp; &nbsp;&nbsp; //<br>
///function ExecAndWait(const Filename, Params, WorkingDir: string;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; //<br>
///&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; const ShowCmd: Word; TerminateChild: Boolean): Boolean;&nbsp; //<br>
///где:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//<br>
///Filename - имя файла;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;//<br>
///Params - параметр командной строки, с которым нужно запустить программу;&nbsp; &nbsp; &nbsp; &nbsp;//<br>
///WorkingDir - каталог, где находится программа;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//<br>
///ShowCmd - параметр для запуска программы (SW_HIDE, SW_SHOWNORMAL и т.д.);&nbsp; &nbsp; &nbsp;&nbsp;//<br>
///TerminateChild - указывается, нужно ли завершить запущенную инсталлятором&nbsp; &nbsp; &nbsp;&nbsp;//<br>
///&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; программу, если пользователь отменил установку во время&nbsp; &nbsp; &nbsp; //<br>
///&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ее работы.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//<br>
///&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Возможные значения: True (запущенная программа будет закрыта&nbsp;//<br>
///&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; вместе с инсталлятором), False (продолжит свою работу);&nbsp; &nbsp; &nbsp; //<br>
///Примечание:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;//<br>
///Params и WorkingDir можно не указывать.&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//<br>
///&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//<br>
///Пример 1:&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//<br>
///&nbsp; ExecAndWait(ExpandConstant('{sys}\notepad.exe'), '', '', SW_SHOW, True);&nbsp;  	&nbsp; &nbsp;//<br>
///Пример 2:&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//<br>
///&nbsp; ExecAndWait('notepad.exe', '', ExpandConstant('{sys}'), SW_SHOW, False);&nbsp; &nbsp; &nbsp;//<br>////////////////////////////////////////////////////////////////////////////////////<br>
///&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//<br>////////////////////////////////////////////////////////////////////////////////////<br>
///Автор скрипта: Serega, <a href="http://forum.oszone.net/member.php?userid=88670">http://forum.oszone.net/member.php?userid=88670</a>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; //<br>
///e-mail: <a href="mailto:serg_0675@mail.ru">serg_0675@mail.ru</a>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//<br>////////////////////////////////////////////////////////////////////////////////////<br>const<br>&nbsp; MAX_PATH&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 260;<br>&nbsp; TH32CS_SNAPPROCESS&nbsp; &nbsp; = $00000002;<br>&nbsp; INVALID_HANDLE_VALUE&nbsp; = -1;<br>&nbsp; PROCESS_TERMINATE&nbsp; &nbsp; = $0001;<br>&nbsp; PM_REMOVE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = 1;<br>&nbsp; STARTF_USESHOWWINDOW&nbsp; = 1;<br>&nbsp; NORMAL_PRIORITY_CLASS = $00000020;<br><br>type<br>&nbsp; TProcessEntry32 = record<br>&nbsp; &nbsp; dwSize: DWORD;<br>&nbsp; &nbsp; cntUsage: DWORD;<br>&nbsp; &nbsp; th32ProcessID: DWORD;<br>&nbsp; &nbsp; th32DefaultHeapID: DWORD;<br>&nbsp; &nbsp; th32ModuleID: DWORD;<br>&nbsp; &nbsp; cntThreads: DWORD;<br>&nbsp; &nbsp; th32ParentProcessID: DWORD;<br>&nbsp; &nbsp; pcPriClassBase: Longint;<br>&nbsp; &nbsp; dwName: DWORD;<br>&nbsp; &nbsp; szExeFile: array[0..MAX_PATH] of Char;<br>&nbsp; end;<br><br>&nbsp; _TMsg = record<br>&nbsp; &nbsp; hWnd: HWND;<br>&nbsp; &nbsp; msg: Word;<br>&nbsp; &nbsp; wParam: Word;<br>&nbsp; &nbsp; lParam: LongWord;<br>&nbsp; &nbsp; Time: TFileTime;<br>&nbsp; &nbsp; pt: TPoint;<br>&nbsp; end;<br><br>&nbsp; TProcessInformation = record<br>&nbsp; &nbsp; hProcess: THandle;<br>&nbsp; &nbsp; hThread: THandle;<br>&nbsp; &nbsp; dwProcessId: DWORD;<br>&nbsp; &nbsp; dwThreadId: DWORD;<br>&nbsp; end;<br><br>&nbsp; TStartupInfo = record<br>&nbsp; &nbsp; cb: DWORD;<br>&nbsp; &nbsp; lpReserved: Longint;<br>&nbsp; &nbsp; lpDesktop: Longint;<br>&nbsp; &nbsp; lpTitle: PAnsiChar;<br>&nbsp; &nbsp; dwX: DWORD;<br>&nbsp; &nbsp; dwY: DWORD;<br>&nbsp; &nbsp; dwXSize: DWORD;<br>&nbsp; &nbsp; dwYSize: DWORD;<br>&nbsp; &nbsp; dwXCountChars: DWORD;<br>&nbsp; &nbsp; dwYCountChars: DWORD;<br>&nbsp; &nbsp; dwFillAttribute: DWORD;<br>&nbsp; &nbsp; dwName: DWORD;<br>&nbsp; &nbsp; wShowWindow: Word;<br>&nbsp; &nbsp; cbReserved2: Word;<br>&nbsp; &nbsp; lpReserved2: Byte;<br>&nbsp; &nbsp; hStdInput: THandle;<br>&nbsp; &nbsp; hStdOutput: THandle;<br>&nbsp; &nbsp; hStdError: THandle;<br>&nbsp; end;<br><br>function _CreateToolhelp32Snapshot( dwName, th32ProcessID : DWORD): THandle;<br>&nbsp; external 'CreateToolhelp32Snapshot@kernel32.dll stdcall';<br> function _Process32First(hSnapshot: THandle; var lppe: TProcessEntry32): BOOL;<br>&nbsp; external 'Process32First@kernel32.dll stdcall';<br>function _Process32Next(hSnapshot: THandle; var lppe: TProcessEntry32): BOOL;<br>&nbsp; external 'Process32Next@kernel32.dll stdcall';<br>function _OpenProcess(dwDesiredAccess: DWORD; bInheritHandle: BOOL; dwProcessId: DWORD): THandle;<br>&nbsp; external 'OpenProcess@kernel32.dll stdcall';<br>function _TerminateProcess(hProcess: THandle; uExitCode: UINT): BOOL;<br>&nbsp; external 'TerminateProcess@kernel32.dll stdcall';<br>function _CloseHandle(hObject: THandle): BOOL; external 'CloseHandle@kernel32.dll stdcall';<br>function _PeekMessage(var lpMsg: _TMsg; hWnd: HWND; wMsgFilterMin, wMsgFilterMax,<br>&nbsp; wRemoveMsg: UINT): BOOL; external 'PeekMessageA@user32.dll stdcall';<br>function _TranslateMessage(const lpMsg: _TMsg): BOOL; external 'TranslateMessage@user32.dll stdcall';<br>function _DispatchMessage(const lpMsg: _TMsg): Longint; external 'DispatchMessageA@user32.dll stdcall';<br>function _CreateProcess( lpApplicationName: PAnsiChar ; lpCommandLine: PAnsiChar;<br>&nbsp; lpProcessAttributes, lpThreadAttributes: DWORD; bInheritHandles: BOOL; dwCreationName: DWORD;<br>&nbsp; &nbsp; lpEnvironment: PAnsiChar; lpCurrentDirectory: PAnsiChar ; const lpStartupInfo: TStartupInfo;<br>&nbsp; &nbsp; &nbsp; var lpProcessInformation: TProcessInformation): BOOL;<br>&nbsp; &nbsp; &nbsp; &nbsp; external 'CreateProcessA@kernel32.dll stdcall';<br><br>var<br>&nbsp; _QUIT: Boolean;<br><br>procedure _Application_ProcessMessages;<br>var<br>&nbsp; Msg: _TMsg;<br>begin<br>&nbsp; if not _PeekMessage(Msg, 0, 0, 0, PM_REMOVE) then<br>&nbsp; &nbsp; Exit;<br>&nbsp; _TranslateMessage(Msg);<br>&nbsp; _DispatchMessage(Msg);<br>end;<br><br>function _KillProcess(ProcessID: DWORD): Boolean;<br>var<br>&nbsp; hProcess: THandle;<br>begin<br>&nbsp; hProcess:= _OpenProcess(PROCESS_TERMINATE, False, ProcessID);<br>&nbsp; Result:= _TerminateProcess(hProcess, 0);<br>&nbsp; _CloseHandle(hProcess);<br>end;<br><br>function _ArrayCharToString(ArrayChar: array of Char): string;<br>var<br>&nbsp; i: Integer;<br>&nbsp; str: string;<br>begin<br>&nbsp; for i:= 0 to MAX_PATH do<br>&nbsp; &nbsp; if (ArrayChar[i]) &lt;&gt; #0 then<br>&nbsp; &nbsp; &nbsp; str:= str + ArrayChar[i]<br>&nbsp; &nbsp; else Break;<br>&nbsp; Result:= str;<br>end;<br><br>function _ProcIsRunning(Process: string; ProcessID: DWORD): Boolean;<br>var<br>&nbsp; Snap: THandle;<br>&nbsp; pe32: TProcessEntry32;<br>begin<br>&nbsp; Result:= False;<br> &nbsp; if Pos('\', Process) &gt; 0 then Process:= ExtractFileName(Process);<br>&nbsp; Snap:= _CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);<br>&nbsp; if Snap = INVALID_HANDLE_VALUE then Exit;<br>&nbsp; pe32.dwSize:= SizeOf(pe32);<br>&nbsp; if _Process32First(Snap, pe32) then<br>&nbsp; &nbsp; while _Process32Next(Snap, pe32) do<br>&nbsp; &nbsp; &nbsp; begin<br>&nbsp; &nbsp; &nbsp; &nbsp; if pe32.th32ProcessID = ProcessID then<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (LowerCase(_ArrayCharToString(pe32.szExeFile)) = LowerCase(Process)) then<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; begin<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Result:= True;<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Break;<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; end;<br>&nbsp; &nbsp; &nbsp; &nbsp; if _QUIT then Break;<br>&nbsp; &nbsp; &nbsp; &nbsp; _Application_ProcessMessages;<br>&nbsp; &nbsp; &nbsp; end;<br>&nbsp; _CloseHandle(Snap);<br>end;<br><br> procedure _WizardFormOnCloseQuery(Sender: TObject;&nbsp; var CanClose: Boolean);<br>begin<br>&nbsp; _QUIT:= True;<br>end;<br><br>function _StartProc(const Name, Params, WorkingDir: string; const ShowCmd: Word;<br>&nbsp; TerminateChild: Boolean): Boolean;<br>var<br> &nbsp; PI: TProcessInformation;<br>&nbsp; SI: TStartupInfo;<br>&nbsp; ProcessId: DWORD;<br>&nbsp; ProcessName: string;<br>&nbsp; CmdLine: string;<br>begin<br>&nbsp; _QUIT:= False;<br>&nbsp; CmdLine:= '&quot;' + Name + '&quot; ' + Params;<br>&nbsp; SI.cb:= SizeOf(SI);<br>&nbsp; SI.dwName:= STARTF_USESHOWWINDOW;<br>&nbsp; SI.wShowWindow:= ShowCmd;<br>&nbsp; try<br>&nbsp; &nbsp; Result:= _CreateProcess('', PAnsiChar(CmdLine), 0, 0, False, NORMAL_PRIORITY_CLASS,<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; '', PAnsiChar(WorkingDir), SI, PI);<br>&nbsp; except<br>&nbsp; &nbsp; ShowExceptionMessage;<br>&nbsp; end;<br>&nbsp; if Result then<br>&nbsp; &nbsp; begin<br>&nbsp; &nbsp; &nbsp; WizardForm.OnCloseQuery:= @_WizardFormOnCloseQuery;<br>&nbsp; &nbsp; &nbsp; ProcessName:= ExtractFileName(Name);<br>&nbsp; &nbsp; &nbsp; ProcessId:= PI.dwProcessId;<br>&nbsp; &nbsp; &nbsp; _CloseHandle(PI.hProcess);<br>&nbsp; &nbsp; &nbsp; _CloseHandle(PI.hThread);<br>&nbsp; &nbsp; &nbsp; while _ProcIsRunning( ProcessName, ProcessID ) do;<br>&nbsp; &nbsp; &nbsp; if _QUIT and TerminateChild then _KillProcess(ProcessID);<br>&nbsp; &nbsp; end;<br>end;<br>////////////////////////////////////////////////////////////////////////////////////<br>function ExecAndWait(const Name, Params, WorkingDir: string;<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; const ShowCmd: Word; TerminateChild: Boolean): Boolean;<br>begin<br>&nbsp; Result:= _StartProc (Name, Params, WorkingDir, ShowCmd, TerminateChild);<br>end;<br>////////////////////////////////////////////////////////////////////////////////////
</font></blockquote><textarea id="taCode1" style="display:none;" rows="1" cols="5"></textarea>
<textarea id='taCode' style='display:none;' rows='1' cols='20'></textarea></code>
<script language="javascript" type="text/javascript">highlightSyntax('delphi_Tc4NTM','delphi');</script>
<br><div id="heading"><h1><font size="1" face="Consolas">Copyright (c) <a href="http://www.krinkels.org/" target="_blank">Krinkels Inc</a></font></h1></div></body></html>