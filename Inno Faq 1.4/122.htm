<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><title>Установка переменных среды в Windows 9x, NT, 2000 или XP</title><link rel="stylesheet" type="text/css" href="css.css">
<script language='jscript' type='text/javascript' src='copycode.js'></script>
<script type="text/javascript" src="includer.js"></script></head><body><div id="heading"><h1>» Inno Setup Faq. Установка переменных среды в Windows 9x, NT, 2000 или XP</h1></div><br>
<script language="javascript" type="text/javascript">includeSyntax('delphi');</script><code id="delphi_Tc4NTM">
<input type="button" value="Копировать в буфер обмена" onClick="copyToClipboard( taCode1, theCode1 );">
<blockquote id="theCode1"><font>
[Code]<br>
///Version&nbsp;log:<br>
///09/22/2005:&nbsp;Initial&nbsp;release&nbsp;(axis23(at)gmail.com)<br>
///Based&nbsp;in&nbsp;'Native&nbsp;ISX&nbsp;procedures&nbsp;for&nbsp;PATH&nbsp;modification'&nbsp;from&nbsp;Thomas&nbsp;Vedel&nbsp;('ModifyPath.iss')<br>
<br>
const<br>
///Modification&nbsp;method<br>
vmAddOnlyIfVarDoesNotExists&nbsp;=&nbsp;$1;&nbsp;///Add&nbsp;Var&nbsp;only&nbsp;is&nbsp;this&nbsp;Var&nbsp;doesn't&nbsp;exists<br>
vmAddAllways&nbsp;=&nbsp;$2;&nbsp;///Add&nbsp;Var&nbsp;allways<br>
<br>
///Scope<br>
vsCurrentUser&nbsp;=&nbsp;1;&nbsp;///Add&nbsp;Var&nbsp;for&nbsp;current&nbsp;user<br>
vsAllUsers&nbsp;=&nbsp;2;&nbsp;///Add&nbsp;Var&nbsp;for&nbsp;all&nbsp;users<br>
<br>
///Error&nbsp;results<br>
mvOK&nbsp;=&nbsp;0;&nbsp;///No&nbsp;errors<br>
mvMissingRights&nbsp;=&nbsp;-1;&nbsp;///User&nbsp;has&nbsp;insufficient&nbsp;rights<br>
mvAutoexecNoWriteacc&nbsp;=&nbsp;-2;&nbsp;///Autoexec&nbsp;can&nbsp;not&nbsp;be&nbsp;written&nbsp;(may&nbsp;be&nbsp;readonly)<br>
mvBothMethods&nbsp;=&nbsp;-3;&nbsp;///Error&nbsp;if&nbsp;invoque&nbsp;function&nbsp;with&nbsp;two&nbsp;methods<br>
<br>
{{&nbsp;Helper&nbsp;function:&nbsp;Modify&nbsp;Var&nbsp;on&nbsp;Windows&nbsp;9x&nbsp;}<br>
function&nbsp;ModifyVar9x(VarName,&nbsp;VarValue:&nbsp;string;&nbsp;Method:&nbsp;integer):&nbsp;integer;<br>
var<br>
AutoexecLines:&nbsp;TStringList;<br>
ActualLine:&nbsp;String;<br>
VarLineNos:&nbsp;TStringList;<br>
FirstVarLineNo:&nbsp;Integer;<br>
VarExists:&nbsp;boolean;<br>
LineNo,&nbsp;CharNo,&nbsp;Index:&nbsp;integer;<br>
<br>
TempString:&nbsp;String;<br>
TempVarName:&nbsp;String;<br>
TempVarName_comp:&nbsp;String;<br>
<br>
begin<br>
///Expect&nbsp;everything&nbsp;to&nbsp;be&nbsp;OK<br>
result&nbsp;:=&nbsp;mvOK;<br>
<br>
///Create&nbsp;stringslists<br>
AutoexecLines&nbsp;:=&nbsp;TStringList.Create;<br>
VarLineNos&nbsp;:=&nbsp;TStringList.Create;<br>
TempVarName&nbsp;:=&nbsp;'SET&nbsp;'&nbsp;+&nbsp;uppercase(VarName)&nbsp;+&nbsp;'=';<br>
TempVarName_comp&nbsp;:=&nbsp;'SET'&nbsp;+&nbsp;uppercase(VarName)&nbsp;+&nbsp;'=';<br>
<br>
///Create&nbsp;VarExists<br>
VarExists&nbsp;:=&nbsp;false;<br>
<br>
///Read&nbsp;existing&nbsp;Var<br>
LoadStringFromFile('c:Autoexec.bat',&nbsp;TempString);<br>
AutoexecLines.Text&nbsp;:=&nbsp;TempString;<br>
VarLineNos.Clear;<br>
///Read&nbsp;Autoexec&nbsp;line&nbsp;by&nbsp;line<br>
for&nbsp;LineNo&nbsp;:=&nbsp;0&nbsp;to&nbsp;AutoexecLines.Count&nbsp;-&nbsp;1&nbsp;do&nbsp;begin<br>
ActualLine&nbsp;:=&nbsp;AutoexecLines.Strings[LineNo];<br>
///Check&nbsp;if&nbsp;line&nbsp;starts&nbsp;with&nbsp;'Varname='&nbsp;after&nbsp;first&nbsp;stripping&nbsp;spaces&nbsp;and&nbsp;other&nbsp;&quot;fill-chars&quot;<br>
if&nbsp;Pos('=',&nbsp;ActualLine)&nbsp;&gt;&nbsp;0&nbsp;then<br>
begin<br>
for&nbsp;CharNo&nbsp;:=&nbsp;Pos('=',&nbsp;ActualLine)-1&nbsp;downto&nbsp;1&nbsp;do<br>
if&nbsp;(ActualLine[CharNo]='&nbsp;')&nbsp;or&nbsp;(ActualLine[CharNo]=#9)&nbsp;then<br>
Delete(ActualLine,&nbsp;CharNo,&nbsp;1);<br>
if&nbsp;Pos('@',&nbsp;ActualLine)&nbsp;=&nbsp;1&nbsp;then<br>
Delete(ActualLine,&nbsp;1,&nbsp;1);<br>
if&nbsp;(Pos(TempVarName_Comp,&nbsp;uppercase(ActualLine))=1)&nbsp;then<br>
begin<br>
ActualLine&nbsp;:=&nbsp;TempVarName&nbsp;+&nbsp;VarValue;<br>
///Update&nbsp;list&nbsp;of&nbsp;line&nbsp;numbers&nbsp;holding&nbsp;VarName&nbsp;variables<br>
VarLineNos.Add(IntToStr(LineNo));<br>
VarExists&nbsp;:=true;<br>
end;<br>
end;<br>
end;<br>
<br>
///Save&nbsp;first&nbsp;line&nbsp;number&nbsp;in&nbsp;Autoexec.bat&nbsp;which&nbsp;modifies&nbsp;Var&nbsp;environment&nbsp;variable<br>
if&nbsp;VarLineNos.Count&nbsp;&gt;&nbsp;0&nbsp;then<br>
FirstVarLineNo&nbsp;:=&nbsp;StrToInt(VarLineNos.Strings[0])<br>
else<br>
FirstVarLineNo&nbsp;:=&nbsp;0;<br>
<br>
///Only&nbsp;change&nbsp;autoexec&nbsp;if&nbsp;method&nbsp;permit&nbsp;this<br>
if&nbsp;((Method&nbsp;=&nbsp;vmAddAllways)&nbsp;or&nbsp;((Method&nbsp;=&nbsp;vmAddOnlyIfVarDoesNotExists)&nbsp;and&nbsp;(VarExists=false)))&nbsp;then<br>
begin<br>
///Write&nbsp;Modified&nbsp;Var&nbsp;back&nbsp;to&nbsp;Autoexec.bat<br>
///First&nbsp;delete&nbsp;all&nbsp;existing&nbsp;Var&nbsp;references&nbsp;from&nbsp;Autoexec.bat<br>
Index&nbsp;:=&nbsp;VarLineNos.Count-1;<br>
while&nbsp;(Index&gt;=0)&nbsp;do<br>
begin<br>
AutoexecLines.Delete(StrToInt(VarLineNos.Strings[Index]));<br>
Index&nbsp;:=&nbsp;Index-1;<br>
end;<br>
///Then&nbsp;insert&nbsp;new&nbsp;Var&nbsp;variable&nbsp;into&nbsp;Autoexec.bat<br>
if(VarExists=false)&nbsp;then<br>
FirstVarLineNo&nbsp;:=&nbsp;AutoexecLines.Count;<br>
AutoexecLines.Insert(FirstVarLineNo,&nbsp;TempVarName+VarValue);<br>
///Delete&nbsp;old&nbsp;Autoexec.bat&nbsp;from&nbsp;disk<br>
if&nbsp;not&nbsp;DeleteFile('c:Autoexec.bat')&nbsp;then<br>
result&nbsp;:=&nbsp;mvAutoexecNoWriteAcc;<br>
Sleep(500);<br>
///And&nbsp;finally&nbsp;write&nbsp;Autoexec.bat&nbsp;back&nbsp;to&nbsp;disk<br>
if&nbsp;not&nbsp;(result=mvAutoexecNoWriteAcc)&nbsp;then<br>
SaveStringToFile('c:Autoexec.bat',&nbsp;AutoexecLines.Text,&nbsp;false);<br>
end;<br>
<br>
///Free&nbsp;stringlists<br>
VarLineNos.Free;<br>
AutoexecLines.Free;<br>
end;&nbsp;///ModifyVar9x<br>
<br>
<br>
{{&nbsp;Helper&nbsp;function:&nbsp;Modify&nbsp;Var&nbsp;on&nbsp;Windows&nbsp;NT,&nbsp;2000&nbsp;and&nbsp;XP&nbsp;}<br>
function&nbsp;ModifyVarNT(VarName,&nbsp;VarValue:&nbsp;string;&nbsp;Method,&nbsp;Scope:&nbsp;integer):&nbsp;integer;<br>
var<br>
RegRootKey:&nbsp;integer;<br>
RegSubKeyName:&nbsp;string;<br>
RegValueName:&nbsp;string;<br>
ResultVar:&nbsp;string;<br>
OK:&nbsp;boolean;<br>
begin<br>
///Expect&nbsp;everything&nbsp;to&nbsp;be&nbsp;OK<br>
result&nbsp;:=&nbsp;mvOK;<br>
<br>
///Initialize&nbsp;registry&nbsp;key&nbsp;and&nbsp;value&nbsp;names&nbsp;to&nbsp;reflect&nbsp;if&nbsp;changes&nbsp;should&nbsp;be&nbsp;global&nbsp;or&nbsp;local&nbsp;to&nbsp;current&nbsp;user&nbsp;only<br>
case&nbsp;Scope&nbsp;of<br>
vsCurrentUser:<br>
begin<br>
RegRootKey&nbsp;:=&nbsp;HKEY_CURRENT_USER;<br>
RegSubKeyName&nbsp;:=&nbsp;'Environment';<br>
RegValueName&nbsp;:=&nbsp;VarName;<br>
end;<br>
vsAllUsers:<br>
begin<br>
RegRootKey&nbsp;:=&nbsp;HKEY_LOCAL_MACHINE;<br>
RegSubKeyName&nbsp;:=&nbsp;'SYSTEMCurrentControlSetControlSession&nbsp;ManagerEnvironment';<br>
RegValueName&nbsp;:=&nbsp;VarName;<br>
end;<br>
end;<br>
<br>
///Read&nbsp;current&nbsp;Var&nbsp;value&nbsp;from&nbsp;registry<br>
OK&nbsp;:=&nbsp;RegQueryStringValue(RegRootKey,&nbsp;RegSubKeyName,&nbsp;RegValueName,&nbsp;ResultVar);<br>
<br>
///Write&nbsp;new&nbsp;Var&nbsp;value&nbsp;to&nbsp;registry<br>
if&nbsp;((Method&nbsp;=&nbsp;vmAddAllways)&nbsp;or&nbsp;((Method&nbsp;=&nbsp;vmAddOnlyIfVarDoesNotExists)&nbsp;and&nbsp;(OK=false)))&nbsp;then<br>
begin<br>
if&nbsp;not&nbsp;RegWriteStringValue(RegRootKey,&nbsp;RegSubKeyName,&nbsp;RegValueName,&nbsp;VarValue)&nbsp;then<br>
begin<br>
result&nbsp;:=&nbsp;mvMissingRights;<br>
Exit;<br>
end;<br>
end;<br>
end;&nbsp;///ModifyVarNT<br>
<br>
<br>
{{&nbsp;Main&nbsp;function:&nbsp;Modify&nbsp;Var&nbsp;}<br>
function&nbsp;ModifyVar(VarName,&nbsp;VarValue:&nbsp;string;&nbsp;Method,&nbsp;Scope:&nbsp;integer):&nbsp;integer;<br>
begin<br>
///Check&nbsp;if&nbsp;both&nbsp;add&nbsp;and&nbsp;remove&nbsp;has&nbsp;been&nbsp;specified&nbsp;(=&nbsp;error!)<br>
if&nbsp;(Method&nbsp;and&nbsp;(vmAddOnlyIfVarDoesNotExists&nbsp;and&nbsp;vmAddAllways))&nbsp;&gt;&nbsp;0&nbsp;then<br>
begin<br>
result&nbsp;:=&nbsp;mvBothMethods;<br>
Exit;<br>
end;<br>
<br>
///Test&nbsp;if&nbsp;Win9x<br>
if&nbsp;InstallOnThisVersion('4,0','0,0')&nbsp;=&nbsp;irInstall&nbsp;then<br>
ModifyVar9x(VarName,VarValue,&nbsp;Method);<br>
<br>
///Test&nbsp;if&nbsp;WinNT,&nbsp;2000&nbsp;or&nbsp;XP<br>
if&nbsp;InstallOnThisVersion('0,4','0,0')&nbsp;=&nbsp;irInstall&nbsp;then<br>
ModifyVarNT(VarName,&nbsp;VarValue,&nbsp;Method,&nbsp;Scope);<br>
end;&nbsp;///ModifyVar<br>
</font></blockquote><textarea id="taCode1" style="display:none;" rows="1" cols="5"></textarea><textarea id='taCode' style='display:none;' rows='1' cols='20'></textarea></code><script language="javascript" type="text/javascript">highlightSyntax('delphi_Tc4NTM','delphi');</script><br><div id="heading"><h1><font size="1" face="Consolas">Copyright (c) <a href="http://www.krinkels.org/" target="_blank">Krinkels Inc</a></font></h1></div></body></html>