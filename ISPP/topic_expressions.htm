<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html lang="ru">
  <head>
    <meta content="text/html; charset=windows-1251" http-equiv="content-type">
    <meta content="IE=8" http-equiv="X-UA-Compatible" />
	<meta content="Перевод на русский: Leserg (www.wylek.ru)" name="description">
    <title>Inno Setup Preprocessor: Expression Syntax</title>
    <!--[if IE 6]><style type="text/css">html{overflow-y:scroll}</style><![endif]-->
    <link rel="stylesheet" href="../styles.css" type="text/css">
    <script src="../topic.js" type="text/javascript"></script>
  </head>
  <body>
    <h1 class="topicheading">Inno Setup Preprocessor: Синтаксис выражений</h1>
    <div class="topicbody">
      <p><span style="font-weight: bold;">ISPP</span> использует C/C++-подобный
        синтаксис выражений. Он поддерживает простые и составные операторы,
        условные операторы и операторы следования. И хотя <span style="font-weight: bold;">ISPP</span>
        является всего лишь интерпретатором, но также поддерживает короткие
        логические операции и никогда не вычисляет выражения (и какие-либо
        макросы, упомянутые в этих выражениях), которые по причине особых правил
        не должны вычисляться (например, при использовании условного оператора
        будут вычислены только 2 и 3 операнды).</p>
      <p>В файле сценария <a href="topic_builtinsiss.htm" class="new1">ISPPBuiltins.iss</a>
        вы найдете множество примеров синтаксических выражений.</p>
      <br />
      <h2 class="heading">Различия между синтаксисом C и ISPP</h2>
      <ul>
        <li><span style="font-weight: bold;">ISPP</span> не поддерживает работу
          со следующими операторами: <span style="font-style: italic;">ссылочные</span>,
          <span style="font-style: italic;">разыменованные</span>, <span style="font-style: italic;">разрешения
            области видимости</span>, <span style="font-style: italic;">принадлежности</span>
          и т.д.</li>
        <li><span style="font-weight: bold;">ISPP</span> рассматривает
          идентификатор со знаком равенства в качестве имени аргумента, если
          этот идентификатор используется в списке аргументов.</li>
        <li>Арифметический оператор деления (косая черта) выполняет только
          целочисленное деление, т.к. <span style="font-weight: bold;">ISPP</span>
          не поддерживает математические операции с плавающей запятой.</li>
        <li>В некоторых случаях <span style="font-weight: bold;">ISPP</span> не
          выполняет проверку правильности выражений. Например, в условном
          выражении операнд "<span style="font-style: italic;">true</span>"
          может быть строковым (<span style="font-weight: bold;">str</span>)
          типом данных, в то время как операнд "<span style="font-style: italic;">false</span>"
          может быть целочисленным (<span style="font-weight: bold;">int</span>).</li>
        <li>Строковые литералы могут быть заключены как в одинарные кавычки, так
          и в двойные (в стиле <span style="font-style: italic;">С</span> или <span
            style="font-style: italic;">Pascal</span>). Если строка открывается
          одинарной кавычкой, то и закрываться должна также одинарной. Двойные
          кавычки могут быть использованы внутри одинарных кавычек и наоборот.
          Если внутри строки необходимо записать часть выражения снова в
          кавычках (например, цитата), то символы этих кавычек необходимо
          экранировать (это зависит от текущего состояния параметра  "<span style="font-style: italic;">Pascal</span>-стиль
          строковых литералов" для синтаксического анализа строк сценария, см.
          директиву <tt><a href="topic_pragma.htm" class="new">pragma</a></tt>).
          </li>
      </ul>
      <br />
      <h2 class="heading">Типы данных</h2>
      <p><span style="font-weight: bold;">ISPP</span> содержит три типа данных:
        <span style="font-weight: bold;">void</span> (пустой), <span style="font-weight: bold;">integer</span>
        (целочисленный) и <span style="font-weight: bold;">string</span>
        (строковый). Переменные типа <span style="font-weight: bold;">void</span>
        объявляются директивой <tt><a href="topic_define.htm" class="new">define</a></tt>,
        для которой указывается только имя переменной, без каких-либо значений.
        Такие переменные могут использоваться с директивой <tt><a href="topic_ifdef.htm"
            class="new">ifdef</a></tt> или в функции <tt><a href="topic_defined.htm">Defined</a></tt>.</p>
      <p>Если для синтаксического анализа строк параметр "Разрешить применение
        необъявленных идентификаторов" отключен (это состояние по умолчанию,
        подробности смотрите в <tt><a href="topic_pragma.htm" class="new">pragma</a></tt>),
        то возникнет ошибка, т.к. компилятор не знает, что это за переменные. В
        противном случае, они будут обработаны как пустые (тип <span style="font-weight: bold;">void</span>),
        т.е. не имеющие никаких значений.</p>
      <p>В выражениях тип <span style="font-weight: bold;">void</span> хорошо
        совместим с целочисленными (<span style="font-weight: bold;">int</span>)
        и строковыми (<span style="font-weight: bold;">str</span>) типами
        данных. Например, вы можете запросто сложить два операнда, один из
        которых является <span style="font-weight: bold;">int</span>, в другой
        - <span style="font-weight: bold;">void</span>. В этом случае пустой
        операнд будет обработан как ноль (целое число 0). Если же операции
        выполняются над строками, пустой операнд будет обработан как пустая
        строка.</p>
      <br />
      <h2 class="heading">Комментарии</h2>
      <p>Для облегчения чтения и понимания текста сценария, вы можете писать
        текст. Покажем вам основные принципы ввода комментариев и символы,
        которые при этом можно использовать. комментариев. Посмотрите на
        следующий пример, используя косую черту (<span style="color: #006600;">
          <span style="font-weight: bold;">/</span> </span>) и звездочку ( <span
          style="font-weight: bold; color: #006600;">*</span> ) можно внедрить
        комментарий в выражение:</p>
      <p><tt>  <span style="font-weight: bold; color: #990000;">#emit</span>
          Var1 <span style="font-style: italic; color: #006600;">/* это
            комментарий */</span> + Var2 <span style="font-style: italic; color: #006600;">/*
            и это комментарий */</span><br />
        </tt></p>
      <p>Комментарии могут быть однострочные. Такой комментарий должен
        начинаться с символа "точки с запятой" (<span style="font-weight: bold;">
          <span style="color: #006600;"> ;</span> </span>). При этом весь текст
        после точки с запятой до конца строки будет считаться строкой
        комментария. Запись такого комментария можно начать как с начала строки,
        так любой другой позиции в строке. Например:</p>
      <p><tt>  <span style="font-weight: bold; color: #990000;">#emit</span>
          Var1 + Var2 <span style="font-style: italic; color: #006600;">; это
            комментарий</span><br />
        </tt></p>
      <p>Если текст комментария очень большой, то используя символ разделения
        строк — обратная косая черта ( <span style="font-weight: bold;">\</span>
        ) —  его можно разбить на несколько строк. Например:</p>
      <p><tt>  <span style="font-weight: bold; color: #990000;">#emit</span>
          Var1 + Var2 <span style="font-style: italic; color: #006600;">; здесь
            находится текст</span> <span style="font-weight: bold;">\</span><br />
              <span style="font-style: italic; color: #006600;">очень длинного
            комментария :)</span><br />
        </tt></p>
      <br />
      <h2 class="heading">Расширенный синтаксис вызова макросов</h2>
      <p>В ISPP имеется возможность использования именованных аргументов при
        вызове макросов, определённых пользователем. Например, выполним
        объявление макроса <tt>MyMacro</tt>:</p>
      <p><tt><span style="font-weight: bold; color: #990000;">  #define</span>
          MyMacro(int A = 2, int B = 2) A + B<br />
        </tt></p>
      <p>Теперь выполним вызов этого макроса и укажем имена аргументов:<br />
        <br />
        <tt>    <span style="font-weight: bold; color: #990000;">#emit</span>
          MyMacro(A = 5, B = 10)<br />
              <span style="font-weight: bold; color: #990000;">#emit</span>
          MyMacro(B = 3)<br />
              <span style="font-weight: bold; color: #990000;">#emit</span>
          MyMacro(B = 10, A = 5)<br />
        </tt></p>
      <ul>
        <li>Если хотя бы для одного аргумента задано имя, то и все остальные
          аргументы (обязательно!) в списке также должны иметь имена.</li>
        <li>Порядок размещения именованных аргументов не имеет значения.</li>
        <li>Если расширенный синтаксис вызова не используется, то чтобы избежать
          двусмысленности, операция присваивания должна быть заключена в круглые
          скобки:<br />
          <br />
            <tt><span style="font-weight: bold; color: #990000;">#emit</span>
            MyMacro((MyVar = 5), 10)<br />
          </tt><br />
          В этом примере знак равенства рассматривается как оператор
          присваивания.<br />
          Хотя функции и не имеют именованных аргументов, все же, при их вызове,
          рекомендуется заключить аргументы в круглые скобки. </li>
        <li>Согласно стандартным правилам, для разделения фактических параметров
          используется запятая (<span style="font-weight: bold;"> , </span>).
          Если вам необходимо использовать оператор следования, то вы должны
          заключить его в круглые скобки. Например:<br />
          <br />
            <tt><span style="font-weight: bold; color: #990000;">#emit</span>
            MyMacro((SaveToFile(<span style="font-style: italic; color: #333333;">"script.txt"</span>),
            5), 10)<br />
          </tt><br />
          В показанном выше примере, выражение до первой запятой обрабатывается
          как оператор следования, тогда как вторая запятая является
          разделителем аргументов. </li>
      </ul>
    </div>
  </body>
</html>
